
TransistorTester.elf:     Dateiformat elf32-avr

Sektionen:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00003f28  00003fdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f28  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a3  00800100  00800100  00003fdc  2**0
                  ALLOC
  3 .eeprom       000001d6  00810000  00810000  00003fdc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      00000011  00000000  00000000  000041b2  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000041c4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000428  00000000  00000000  00004200  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001004d  00000000  00000000  00004628  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000027c4  00000000  00000000  00014675  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000056e5  00000000  00000000  00016e39  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006d4  00000000  00000000  0001c520  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000143e  00000000  00000000  0001cbf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004966  00000000  00000000  0001e032  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00022998  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	85 c0       	rjmp	.+266    	; 0x10c <__ctors_end>
       2:	00 00       	nop
       4:	95 c0       	rjmp	.+298    	; 0x130 <__bad_interrupt>
       6:	00 00       	nop
       8:	93 c0       	rjmp	.+294    	; 0x130 <__bad_interrupt>
       a:	00 00       	nop
       c:	91 c0       	rjmp	.+290    	; 0x130 <__bad_interrupt>
       e:	00 00       	nop
      10:	8f c0       	rjmp	.+286    	; 0x130 <__bad_interrupt>
      12:	00 00       	nop
      14:	8d c0       	rjmp	.+282    	; 0x130 <__bad_interrupt>
      16:	00 00       	nop
      18:	8b c0       	rjmp	.+278    	; 0x130 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	89 c0       	rjmp	.+274    	; 0x130 <__bad_interrupt>
      1e:	00 00       	nop
      20:	87 c0       	rjmp	.+270    	; 0x130 <__bad_interrupt>
      22:	00 00       	nop
      24:	85 c0       	rjmp	.+266    	; 0x130 <__bad_interrupt>
      26:	00 00       	nop
      28:	83 c0       	rjmp	.+262    	; 0x130 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	81 c0       	rjmp	.+258    	; 0x130 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7f c0       	rjmp	.+254    	; 0x130 <__bad_interrupt>
      32:	00 00       	nop
      34:	7d c0       	rjmp	.+250    	; 0x130 <__bad_interrupt>
      36:	00 00       	nop
      38:	7b c0       	rjmp	.+246    	; 0x130 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	79 c0       	rjmp	.+242    	; 0x130 <__bad_interrupt>
      3e:	00 00       	nop
      40:	77 c0       	rjmp	.+238    	; 0x130 <__bad_interrupt>
      42:	00 00       	nop
      44:	75 c0       	rjmp	.+234    	; 0x130 <__bad_interrupt>
      46:	00 00       	nop
      48:	73 c0       	rjmp	.+230    	; 0x130 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	71 c0       	rjmp	.+226    	; 0x130 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6f c0       	rjmp	.+222    	; 0x130 <__bad_interrupt>
      52:	00 00       	nop
      54:	6d c0       	rjmp	.+218    	; 0x130 <__bad_interrupt>
      56:	00 00       	nop
      58:	6b c0       	rjmp	.+214    	; 0x130 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	69 c0       	rjmp	.+210    	; 0x130 <__bad_interrupt>
      5e:	00 00       	nop
      60:	67 c0       	rjmp	.+206    	; 0x130 <__bad_interrupt>
      62:	00 00       	nop
      64:	65 c0       	rjmp	.+202    	; 0x130 <__bad_interrupt>
	...

00000068 <REF_R_str>:
      68:	52 45 46 5f 52 3d 00                                REF_R=.

0000006f <REF_C_str>:
      6f:	52 45 46 5f 43 3d 00                                REF_C=.

00000076 <MinCap_str>:
      76:	20 3e 31 30 30 6e 46 00                              >100nF.

0000007e <PinRLRHADCtab>:
      7e:	01 04 10 01 02 04                                   ......

00000084 <R0_str>:
      84:	52 30 3d 00                                         R0=.

00000088 <ICEs_str>:
      88:	49 43 45 73 3d 00                                   ICEs=.

0000008e <ICE0_str>:
      8e:	49 43 45 30 3d 00                                   ICE0=.

00000094 <RHtab>:
      94:	b9 03 87 03 58 03 2e 03 07 03 e4 02 c3 02 a4 02     ....X...........
      a4:	88 02                                               ..

000000a6 <LogTab>:
      a6:	00 00 14 00 29 00 3e 00 53 00 69 00 80 00 97 00     ....).>.S.i.....
      b6:	ae 00 c6 00 df 00 f8 00 12 01 2d 01 49 01 65 01     ..........-.I.e.
      c6:	82 01 a0 01 be 01 de 01 ff 01 21 02 44 02 68 02     ..........!.D.h.
      d6:	8e 02 b5 02 de 02 09 03 35 03 64 03 94 03 c8 03     ........5.d.....
      e6:	fe 03 37 04 73 04 b4 04 f9 04 43 05 93 05 ea 05     ..7.s.....C.....
      f6:	49 06 b3 06 29 07 ae 07 48 08 ff 08 de 09 fd 0a     I...)...H.......
     106:	93 0c 48 0f 99 1b                                   ..H...

0000010c <__ctors_end>:
     10c:	11 24       	eor	r1, r1
     10e:	1f be       	out	0x3f, r1	; 63
     110:	cf ef       	ldi	r28, 0xFF	; 255
     112:	d4 e0       	ldi	r29, 0x04	; 4
     114:	de bf       	out	0x3e, r29	; 62
     116:	cd bf       	out	0x3d, r28	; 61

00000118 <__do_clear_bss>:
     118:	21 e0       	ldi	r18, 0x01	; 1
     11a:	a0 e0       	ldi	r26, 0x00	; 0
     11c:	b1 e0       	ldi	r27, 0x01	; 1
     11e:	01 c0       	rjmp	.+2      	; 0x122 <.do_clear_bss_start>

00000120 <.do_clear_bss_loop>:
     120:	1d 92       	st	X+, r1

00000122 <.do_clear_bss_start>:
     122:	a3 3a       	cpi	r26, 0xA3	; 163
     124:	b2 07       	cpc	r27, r18
     126:	e1 f7       	brne	.-8      	; 0x120 <.do_clear_bss_loop>
     128:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <main>
     12c:	0c 94 92 1f 	jmp	0x3f24	; 0x3f24 <_exit>

00000130 <__bad_interrupt>:
     130:	67 cf       	rjmp	.-306    	; 0x0 <__vectors>

00000132 <_lcd_hw_write>:
#else	/* !(LCD_INTERFACE_MODE == (MODE_SPI | MODE_7920_SERIAL | MODE_I2C | MODE_7108_SERIAL)) */
;---------------------------------------------------------------------------------
_lcd_hw_write:
; must be a 4-bit parallel interface for HD44780 compatible controller or simular
               ; Set RS (0=Cmd, 1=Char)
               sbrc    preg_1, 0
     132:	80 fd       	sbrc	r24, 0
                       set_rs_high
     134:	5c 9a       	sbi	0x0b, 4	; 11
               sbrs    preg_1, 0
     136:	80 ff       	sbrs	r24, 0
                       set_rs_low
     138:	5c 98       	cbi	0x0b, 4	; 11
               set_rs_output;		//init hardware
     13a:	54 9a       	sbi	0x0a, 4	; 10
               nop	;		//wait for address setup
     13c:	00 00       	nop
               set_en_high
     13e:	5d 9a       	sbi	0x0b, 5	; 11
               set_en_output;		//init hardware
     140:	55 9a       	sbi	0x0a, 5	; 10

               ; Send high nibble
               set_b4_low
     142:	58 98       	cbi	0x0b, 0	; 11
               set_b5_low
     144:	59 98       	cbi	0x0b, 1	; 11
               set_b6_low
     146:	5a 98       	cbi	0x0b, 2	; 11
               set_b7_low
     148:	5b 98       	cbi	0x0b, 3	; 11

               sbrc    preg_2, 4
     14a:	64 fd       	sbrc	r22, 4
                       set_b4_high
     14c:	58 9a       	sbi	0x0b, 0	; 11
               set_b4_output;		//init hardware
     14e:	50 9a       	sbi	0x0a, 0	; 10
               sbrc    preg_2, 5
     150:	65 fd       	sbrc	r22, 5
                       set_b5_high
     152:	59 9a       	sbi	0x0b, 1	; 11
               set_b5_output;		//init hardware
     154:	51 9a       	sbi	0x0a, 1	; 10
               sbrc    preg_2, 6
     156:	66 fd       	sbrc	r22, 6
                       set_b6_high
     158:	5a 9a       	sbi	0x0b, 2	; 11
               set_b6_output;		//init hardware
     15a:	52 9a       	sbi	0x0a, 2	; 10
               sbrc    preg_2, 7
     15c:	67 fd       	sbrc	r22, 7
                       set_b7_high
     15e:	5b 9a       	sbi	0x0b, 3	; 11
               set_b7_output;		//init hardware
     160:	53 9a       	sbi	0x0a, 3	; 10

               nop			; wait for data setup time
     162:	00 00       	nop
               set_en_low		; force data read from LCD controller
     164:	5d 98       	cbi	0x0b, 5	; 11
               RCALL    wait1us
     166:	ec d2       	rcall	.+1496   	; 0x740 <wait1us>

               ; skip sending low nibble for init commands
               sbrc    preg_1, 7
     168:	87 fd       	sbrc	r24, 7
                       rjmp _lcd_hw_write_exit
     16a:	10 c0       	rjmp	.+32     	; 0x18c <_lcd_hw_write_exit>

               ; Send low nibble
               set_en_high
     16c:	5d 9a       	sbi	0x0b, 5	; 11
               
               set_b4_low
     16e:	58 98       	cbi	0x0b, 0	; 11
               set_b5_low
     170:	59 98       	cbi	0x0b, 1	; 11
               set_b6_low
     172:	5a 98       	cbi	0x0b, 2	; 11
               set_b7_low
     174:	5b 98       	cbi	0x0b, 3	; 11
               
               sbrc    preg_2, 0
     176:	60 fd       	sbrc	r22, 0
                       set_b4_high
     178:	58 9a       	sbi	0x0b, 0	; 11
               sbrc    preg_2, 1
     17a:	61 fd       	sbrc	r22, 1
                       set_b5_high
     17c:	59 9a       	sbi	0x0b, 1	; 11
               sbrc    preg_2, 2
     17e:	62 fd       	sbrc	r22, 2
                       set_b6_high
     180:	5a 9a       	sbi	0x0b, 2	; 11
               sbrc    preg_2, 3
     182:	63 fd       	sbrc	r22, 3
                       set_b7_high
     184:	5b 9a       	sbi	0x0b, 3	; 11

               nop			; wait for data setup time
     186:	00 00       	nop
               set_en_low		; force data read from LCD controller
     188:	5d 98       	cbi	0x0b, 5	; 11
               RCALL    wait50us
 #endif
 #ifdef SLOW_LCD
               RCALL    wait50us
 #else
               RCALL    wait1us
     18a:	da c2       	rjmp	.+1460   	; 0x740 <wait1us>

0000018c <_lcd_hw_write_exit>:
 #endif
_lcd_hw_write_exit:
               ret		; end _lcd_hw_write
     18c:	08 95       	ret

0000018e <lcd_save_position>:
}

#if FLASHEND > 0x1fff
/* ************************************************************************************** */
uint8_t lcd_save_position(void) {
 last_text_column = _lcd_column;
     18e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <_lcd_column>
     192:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 last_text_line = lcd_text_line;
     196:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <lcd_text_line>
     19a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <last_text_line>
 return(last_text_line);
}
     19e:	08 95       	ret

000001a0 <lcd_data>:
 lcd_fg_color.w = lcd_fg2_color.w;
 #else
 lcd_fg_color.w = LCD_FG_COLOR;
 #endif
#endif
_lcd_column++;
     1a0:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <_lcd_column>
     1a4:	9f 5f       	subi	r25, 0xFF	; 255
     1a6:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <_lcd_column>
 pfont = (uint8_t *)font + (FONT_WIDTH * PAGES_PER_LINE * temp1);	// first byte of character data
 // for other controllers like ST7565 the _page specifies the page of the controller (8 lines)
 lcd_set_pixels( pfont, _xpos, _page*8, 0, (unsigned char)FONT_WIDTH, (unsigned char)(PAGES_PER_LINE*8));
_xpos += FONT_WIDTH;		// move pointer to the next character position
#else
 lcd_write_data(temp1);		// set RS to 1
     1aa:	68 2f       	mov	r22, r24
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	c1 df       	rcall	.-126    	; 0x132 <_lcd_hw_write>
     1b0:	be d2       	rcall	.+1404   	; 0x72e <wait50us>
 #endif
    default:
    	uart_putc(temp1);
 }
#endif
 wdt_reset();
     1b2:	a8 95       	wdr
   lcd_data(temp + '1' + TP_OFFSET - TP_MIN);
     1b4:	08 95       	ret

000001b6 <lcd_testpin>:
     1b6:	8f 5c       	subi	r24, 0xCF	; 207
}
     1b8:	f3 cf       	rjmp	.-26     	; 0x1a0 <lcd_data>
   lcd_data(' ');	// output one space to LCD and UART
     1ba:	08 95       	ret

000001bc <lcd_space>:
     1bc:	80 e2       	ldi	r24, 0x20	; 32
     1be:	f0 cf       	rjmp	.-32     	; 0x1a0 <lcd_data>
}
     1c0:	08 95       	ret

000001c2 <lcd_spaces>:
void lcd_spaces(int8_t nn) {
     1c2:	cf 93       	push	r28
     1c4:	c8 2f       	mov	r28, r24
   while (nn > 0) {
     1c6:	1c 16       	cp	r1, r28
}
     1c8:	14 f0       	brlt	.+4      	; 0x1ce <lcd_spaces+0xc>
     1ca:	cf 91       	pop	r28
     lcd_space();	// output one space to LCD and UART
     1cc:	08 95       	ret
     1ce:	f6 df       	rcall	.-20     	; 0x1bc <lcd_space>
     1d0:	c1 50       	subi	r28, 0x01	; 1
   lcd_data('=');
     1d2:	f9 cf       	rjmp	.-14     	; 0x1c6 <lcd_spaces+0x4>

000001d4 <lcd_equal>:
}
     1d4:	8d e3       	ldi	r24, 0x3D	; 61
} /* end lcd_data() */
 
// sends a command to the LCD
 
void lcd_command(unsigned char temp1) {
	_lcd_hw_write(0x00,temp1);
     1d6:	e4 cf       	rjmp	.-56     	; 0x1a0 <lcd_data>
     1d8:	08 95       	ret

000001da <lcd_command>:
     1da:	68 2f       	mov	r22, r24
#if ((LCD_ST_TYPE == 7565) || (LCD_ST_TYPE == 1306) || (LCD_ST_TYPE == 7108) || (LCD_ST_TYPE == 7920) || (LCD_ST_TYPE == 8812) || (LCD_ST_TYPE == 8814) || (LCD_ST_TYPE == 7735) || (LCD_ST_TYPE == 9163) || (LCD_ST_TYPE == 9341) || (LCD_ST_TYPE == 1327))
 ;
#else
	wait50us();		// wait at least 50us after every instruction for character LCD
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	a9 df       	rcall	.-174    	; 0x132 <_lcd_hw_write>
#endif
}
     1e0:	a6 c2       	rjmp	.+1356   	; 0x72e <wait50us>
   lcd_text_line = 0;
     1e2:	08 95       	ret

000001e4 <lcd_line1>:
     1e4:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <lcd_text_line>
   lcd_command((uint8_t)(CMD_SetDDRAMAddress + LCD_Row1));
     1e8:	80 e8       	ldi	r24, 0x80	; 128
   _lcd_column = 0;
     1ea:	f7 df       	rcall	.-18     	; 0x1da <lcd_command>
     1ec:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <_lcd_column>
   lcd_text_line = 1;
     1f0:	08 95       	ret

000001f2 <lcd_line2>:
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <lcd_text_line>
   lcd_command((uint8_t)(CMD_SetDDRAMAddress + LCD_Row2));
     1f8:	80 ec       	ldi	r24, 0xC0	; 192
   _lcd_column = 0;
     1fa:	ef df       	rcall	.-34     	; 0x1da <lcd_command>
     1fc:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <_lcd_column>
   lcd_text_line = 2;
     200:	08 95       	ret

00000202 <lcd_line3>:
     202:	82 e0       	ldi	r24, 0x02	; 2
   lcd_command((uint8_t)(CMD_SetDDRAMAddress + LCD_Row3));
     204:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <lcd_text_line>
     208:	80 e9       	ldi	r24, 0x90	; 144
   _lcd_column = 0;
     20a:	e7 df       	rcall	.-50     	; 0x1da <lcd_command>
     20c:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <_lcd_column>
   lcd_text_line = 3;
     210:	08 95       	ret

00000212 <lcd_line4>:
     212:	83 e0       	ldi	r24, 0x03	; 3
     214:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <lcd_text_line>
   lcd_command((uint8_t)(CMD_SetDDRAMAddress + LCD_Row4));
     218:	80 ed       	ldi	r24, 0xD0	; 208
   _lcd_column = 0;
     21a:	df df       	rcall	.-66     	; 0x1da <lcd_command>
     21c:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <_lcd_column>
    _lcd_column = x;
     220:	08 95       	ret

00000222 <lcd_set_cursor>:
     222:	60 93 37 01 	sts	0x0137, r22	; 0x800137 <_lcd_column>
     lcd_command((uint8_t)(CMD_SetDDRAMAddress + LCD_Row2 + x));
     226:	81 30       	cpi	r24, 0x01	; 1
     lcd_command((uint8_t)(CMD_SetDDRAMAddress + LCD_Row1 + x));
     228:	21 f4       	brne	.+8      	; 0x232 <lcd_set_cursor+0x10>
}
     22a:	80 ec       	ldi	r24, 0xC0	; 192
     lcd_command((uint8_t)(CMD_SetDDRAMAddress + LCD_Row1 + x));
     22c:	86 0f       	add	r24, r22
     22e:	d5 cf       	rjmp	.-86     	; 0x1da <lcd_command>
 lcd_set_cursor((uint8_t)last_text_line * PAGES_PER_LINE, (uint8_t)(last_text_column));
     230:	08 95       	ret
     232:	80 e8       	ldi	r24, 0x80	; 128
     234:	fb cf       	rjmp	.-10     	; 0x22c <lcd_set_cursor+0xa>

00000236 <lcd_restore_position>:
     236:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
     23a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <last_text_line>
 #else
       lcd_write_word(0);		// 4 black pixels
 #endif
     }
#else
   lcd_command(CMD_CLEAR_DISPLAY);
     23e:	f1 cf       	rjmp	.-30     	; 0x222 <lcd_set_cursor>
     240:	08 95       	ret

00000242 <lcd_clear>:
   wait_about10ms();
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	ca df       	rcall	.-108    	; 0x1da <lcd_command>
#endif
   lcd_line1();			// set cursor to Line1 Column 1, (only for OLED-Display)
     246:	67 d2       	rcall	.+1230   	; 0x716 <wait10ms>
     248:	cd cf       	rjmp	.-102    	; 0x1e4 <lcd_line1>
}  /* end lcd_clear() */
     24a:	08 95       	ret

0000024c <lcd_string>:
 
 
/* ******************************************************************************* */
// writes a string to the LCD 
 
void lcd_string(char *data) {
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
    while(*data) {
     250:	ec 01       	movw	r28, r24
     252:	89 91       	ld	r24, Y+
     254:	81 11       	cpse	r24, r1
        lcd_data(*data);
        data++;
    }
}
     256:	03 c0       	rjmp	.+6      	; 0x25e <lcd_string+0x12>
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
        lcd_data(*data);
     25c:	08 95       	ret
     25e:	a0 df       	rcall	.-192    	; 0x1a0 <lcd_data>
     260:	f8 cf       	rjmp	.-16     	; 0x252 <lcd_string+0x6>

00000262 <lcd_pgm_string>:

#ifdef use_lcd_pgm
//Load string from PGM  and send to LCD 
void lcd_pgm_string(const unsigned char *data) {
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = pgm_read_byte(data);
     268:	fe 01       	movw	r30, r28
     26a:	84 91       	lpm	r24, Z
      if((cc==0) || (cc==128)) {
     26c:	98 2f       	mov	r25, r24
     26e:	9f 77       	andi	r25, 0x7F	; 127
         return;
      }
      lcd_data(cc);
     270:	19 f0       	breq	.+6      	; 0x278 <lcd_pgm_string+0x16>
     272:	96 df       	rcall	.-212    	; 0x1a0 <lcd_data>
      data++;
     274:	21 96       	adiw	r28, 0x01	; 1
      cc = pgm_read_byte(data);
     276:	f8 cf       	rjmp	.-16     	; 0x268 <lcd_pgm_string+0x6>
   }
}
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	08 95       	ret

0000027e <lcd_fix_string>:
#endif

/* ******************************************************************************* */
#ifdef USE_EEPROM
//Load string from PGM or EEprom and send to LCD 
void lcd_fix_string(const unsigned char *data) {
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = MEM_read_byte(data);
     284:	ce 01       	movw	r24, r28
     286:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <eeprom_read_byte>
      if((cc==0) || (cc==128)) {
     28a:	98 2f       	mov	r25, r24
     28c:	9f 77       	andi	r25, 0x7F	; 127
         return;
      }
      lcd_data(cc);
     28e:	19 f0       	breq	.+6      	; 0x296 <lcd_fix_string+0x18>
     290:	87 df       	rcall	.-242    	; 0x1a0 <lcd_data>
      data++;
     292:	21 96       	adiw	r28, 0x01	; 1
      cc = MEM_read_byte(data);
     294:	f7 cf       	rjmp	.-18     	; 0x284 <lcd_fix_string+0x6>
   }
}
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	08 95       	ret

0000029c <lcd_fix_customchar>:
#endif

/* ******************************************************************************* */
// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
#if (LCD_ST_TYPE == 0)
    uint8_t ii;
    for (ii=0;ii<8;ii++) {
        lcd_data(MEM_read_byte(chardata++));
     2a4:	ec 01       	movw	r28, r24
     2a6:	28 96       	adiw	r28, 0x08	; 8
     2a8:	8c 01       	movw	r16, r24
     2aa:	0f 5f       	subi	r16, 0xFF	; 255
     2ac:	1f 4f       	sbci	r17, 0xFF	; 255
    for (ii=0;ii<8;ii++) {
     2ae:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <eeprom_read_byte>
    }
#endif
}
     2b2:	76 df       	rcall	.-276    	; 0x1a0 <lcd_data>
     2b4:	c8 01       	movw	r24, r16
     2b6:	0c 17       	cp	r16, r28
   wait_about100ms();
     2b8:	1d 07       	cpc	r17, r29
   lcd_command(0x33);			// switch to 8-bit
     2ba:	b1 f7       	brne	.-20     	; 0x2a8 <lcd_fix_customchar+0xc>
     2bc:	df 91       	pop	r29
   lcd_command(0x32);			// switch to 4-bit
     2be:	cf 91       	pop	r28
     2c0:	1f 91       	pop	r17
   wait_about10ms();
     2c2:	0f 91       	pop	r16
     2c4:	08 95       	ret

000002c6 <lcd_init>:
   lcd_command(CMD_SetIFOptions | MODE_8BIT);		// Add for OLED
     2c6:	22 d2       	rcall	.+1092   	; 0x70c <wait100ms>
     2c8:	83 e3       	ldi	r24, 0x33	; 51
   lcd_command(CMD_SetIFOptions | MODE_8BIT);		// Add for OLED
     2ca:	87 df       	rcall	.-242    	; 0x1da <lcd_command>
     2cc:	82 e3       	ldi	r24, 0x32	; 50
   lcd_command(CMD_SetIFOptions | MODE_8BIT | 0x0A);	// 4Bit / 2 rows / 5x7 / table3 / Add for OLED
     2ce:	85 df       	rcall	.-246    	; 0x1da <lcd_command>
     2d0:	22 d2       	rcall	.+1092   	; 0x716 <wait10ms>
   lcd_command(CMD_SetDisplayAndCursor);	// Display off / no Blinking  / Add for OLED
     2d2:	80 e2       	ldi	r24, 0x20	; 32
     2d4:	82 df       	rcall	.-252    	; 0x1da <lcd_command>
   lcd_command(CMD_SetEntryMode | 0x02);	// increment / no Scroll
     2d6:	80 e2       	ldi	r24, 0x20	; 32
     2d8:	80 df       	rcall	.-256    	; 0x1da <lcd_command>
   lcd_command(CMD_CURSOR_HOME);		// Home Command  // Add for OLED
     2da:	8a e2       	ldi	r24, 0x2A	; 42
     2dc:	7e df       	rcall	.-260    	; 0x1da <lcd_command>
   lcd_clear();
     2de:	88 e0       	ldi	r24, 0x08	; 8
     2e0:	7c df       	rcall	.-264    	; 0x1da <lcd_command>
   wait_about5ms();
     2e2:	86 e0       	ldi	r24, 0x06	; 6
   lcd_command(CMD_SetDisplayAndCursor | 0x04);	// Display on / Cursor off / no Blinking
     2e4:	7a df       	rcall	.-268    	; 0x1da <lcd_command>
     2e6:	82 e0       	ldi	r24, 0x02	; 2
     2e8:	78 df       	rcall	.-272    	; 0x1da <lcd_command>
   LCDLoadCustomChar(LCD_CHAR_DIODE1);	//Custom-Character Diode symbol
     2ea:	ab df       	rcall	.-170    	; 0x242 <lcd_clear>
     2ec:	15 d2       	rcall	.+1066   	; 0x718 <wait5ms>
   lcd_fix_customchar(DiodeIcon1);	//load Character  >|
     2ee:	8c e0       	ldi	r24, 0x0C	; 12
     2f0:	74 df       	rcall	.-280    	; 0x1da <lcd_command>
     2f2:	88 e4       	ldi	r24, 0x48	; 72
     2f4:	72 df       	rcall	.-284    	; 0x1da <lcd_command>
   LCDLoadCustomChar(LCD_CHAR_DIODE2);	//Custom-Character 
     2f6:	80 e2       	ldi	r24, 0x20	; 32
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	d0 df       	rcall	.-96     	; 0x29c <lcd_fix_customchar>
   lcd_fix_customchar(DiodeIcon2);	//load Character  |<
     2fc:	80 e5       	ldi	r24, 0x50	; 80
     2fe:	6d df       	rcall	.-294    	; 0x1da <lcd_command>
     300:	88 e1       	ldi	r24, 0x18	; 24
     302:	90 e0       	ldi	r25, 0x00	; 0
   LCDLoadCustomChar(LCD_CHAR_CAP);	//Custom-Character  Capacitor symbol
     304:	cb df       	rcall	.-106    	; 0x29c <lcd_fix_customchar>
     306:	88 e5       	ldi	r24, 0x58	; 88
   lcd_fix_customchar(CapIcon);		//load Character  ||
     308:	68 df       	rcall	.-304    	; 0x1da <lcd_command>
     30a:	88 e2       	ldi	r24, 0x28	; 40
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	c6 df       	rcall	.-116    	; 0x29c <lcd_fix_customchar>
   LCDLoadCustomChar(LCD_CHAR_RESIS1);	//Custom-Character Resistor symbol
     310:	88 e7       	ldi	r24, 0x78	; 120
     312:	63 df       	rcall	.-314    	; 0x1da <lcd_command>
   lcd_fix_customchar(ResIcon1);		//load Character  [
     314:	80 e1       	ldi	r24, 0x10	; 16
     316:	90 e0       	ldi	r25, 0x00	; 0
   LCDLoadCustomChar(LCD_CHAR_RESIS2);	//Custom-Character 
     318:	c1 df       	rcall	.-126    	; 0x29c <lcd_fix_customchar>
     31a:	80 e7       	ldi	r24, 0x70	; 112
   lcd_fix_customchar(ResIcon2);		//load Character  ]
     31c:	5e df       	rcall	.-324    	; 0x1da <lcd_command>
     31e:	88 e0       	ldi	r24, 0x08	; 8
     320:	90 e0       	ldi	r25, 0x00	; 0
}	/* end lcd_init */
     322:	bc cf       	rjmp	.-136    	; 0x29c <lcd_fix_customchar>

/* ******************************************************************************* */
void lcd_clear_line(void) {
 // writes spaces up to LCD_LINE_LENGTH to LCD-Display, Cursor can be positioned to any column
    lcd_spaces(LCD_LINE_LENGTH - _lcd_column);
     324:	08 95       	ret

00000326 <lcd_clear_line>:
     326:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <_lcd_column>
     32a:	80 e1       	ldi	r24, 0x10	; 16
     32c:	89 1b       	sub	r24, r25
}
     32e:	49 cf       	rjmp	.-366    	; 0x1c2 <lcd_spaces>
void lcd_next_line(uint8_t xx) {
     330:	08 95       	ret

00000332 <lcd_next_line>:
     332:	cf 93       	push	r28
   lcd_clear_line();
     334:	c8 2f       	mov	r28, r24
     336:	f7 df       	rcall	.-18     	; 0x326 <lcd_clear_line>
   lcd_text_line ++;
     338:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <lcd_text_line>
     33c:	8f 5f       	subi	r24, 0xFF	; 255
     33e:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <lcd_text_line>
   if (lcd_text_line > (LCD_LINES - 1))  {
     342:	82 30       	cpi	r24, 0x02	; 2
      lcd_text_line = (LCD_LINES - 1);
     344:	58 f0       	brcs	.+22     	; 0x35c <lcd_next_line+0x2a>
     346:	81 e0       	ldi	r24, 0x01	; 1
      last_line_used = 1;
     348:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <lcd_text_line>
   lcd_set_cursor((uint8_t)(lcd_text_line * PAGES_PER_LINE), xx);
     34c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <last_line_used>
     350:	6c 2f       	mov	r22, r28
     352:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <lcd_text_line>
}
     356:	65 df       	rcall	.-310    	; 0x222 <lcd_set_cursor>
      last_line_used = 0;
     358:	cf 91       	pop	r28
     35a:	08 95       	ret
   lcd_next_line(xx);
     35c:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <last_line_used>
   wait_for_key_5s_line2();		// wait 5s and clear last line
     360:	f7 cf       	rjmp	.-18     	; 0x350 <lcd_next_line+0x1e>

00000362 <lcd_next_line_wait>:
     362:	e7 df       	rcall	.-50     	; 0x332 <lcd_next_line>
}
     364:	97 c2       	rjmp	.+1326   	; 0x894 <wait_for_key_5s_line2>

#ifdef LCD_CLEAR
void lcd_clear_line1(void) {
    lcd_line1();
     366:	08 95       	ret

00000368 <lcd_clear_line1>:
     368:	3d df       	rcall	.-390    	; 0x1e4 <lcd_line1>
    lcd_clear_line();
     36a:	dd df       	rcall	.-70     	; 0x326 <lcd_clear_line>
    lcd_line1();
     36c:	3b cf       	rjmp	.-394    	; 0x1e4 <lcd_line1>
     36e:	08 95       	ret

00000370 <lcd_clear_line2>:
}
     370:	40 df       	rcall	.-384    	; 0x1f2 <lcd_line2>
void lcd_clear_line2(void) {
    lcd_line2();
     372:	d9 df       	rcall	.-78     	; 0x326 <lcd_clear_line>
     374:	3e cf       	rjmp	.-388    	; 0x1f2 <lcd_line2>
    lcd_clear_line();
     376:	08 95       	ret

00000378 <lcd_set_pixels>:
     378:	08 95       	ret

0000037a <lcd_show_Cg>:
    lcd_line2();
     37a:	0f 93       	push	r16
     37c:	8c eb       	ldi	r24, 0xBC	; 188
}
     37e:	90 e0       	ldi	r25, 0x00	; 0
         pdata += width;
      }
   } /* end for page */
/* ------------------------------------------------------------------------------- */
#endif /* (LCD_ST_TYPE == 7565 || 1306 || 7108 || 7920 || 8812 || 8814 ... */
}
     380:	7e df       	rcall	.-260    	; 0x27e <lcd_fix_string>
/* ******************************************************************************* */
void lcd_show_Cg(void) {
     382:	40 91 7a 01 	lds	r20, 0x017A	; 0x80017a <cap+0x12>
       lcd_MEM_string(GateCap_str);             //"Cg="
     386:	4d 3f       	cpi	r20, 0xFD	; 253
     388:	6c f4       	brge	.+26     	; 0x3a4 <lcd_show_Cg+0x2a>
     38a:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <cap>
#if FLASHEND > 0x1fff
       if (cap.cpre < -3) {
     38e:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <cap+0x1>
     392:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <cap+0x2>
          DisplayValue(cap.cval,cap.cpre,'F',3);
     396:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <cap+0x3>
     39a:	03 e0       	ldi	r16, 0x03	; 3
     39c:	26 e4       	ldi	r18, 0x46	; 70
     39e:	ea d0       	rcall	.+468    	; 0x574 <DisplayValue>
     3a0:	0f 91       	pop	r16
     3a2:	08 95       	ret
     3a4:	8f e3       	ldi	r24, 0x3F	; 63
     3a6:	fc de       	rcall	.-520    	; 0x1a0 <lcd_data>
     3a8:	fb cf       	rjmp	.-10     	; 0x3a0 <lcd_show_Cg+0x26>

000003aa <lcd_show_rds>:
     3aa:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <PartMode>
          lcd_data('?');
       }
#else
       DisplayValue(cap.cval,cap.cpre,'F',3);
#endif
}
     3ae:	9f 70       	andi	r25, 0x0F	; 15
          lcd_data('?');
     3b0:	92 30       	cpi	r25, 0x02	; 2
     3b2:	71 f4       	brne	.+28     	; 0x3d0 <lcd_show_rds+0x26>
     3b4:	d6 df       	rcall	.-84     	; 0x362 <lcd_next_line_wait>
}
     3b6:	80 e3       	ldi	r24, 0x30	; 48
#ifdef SHOW_R_DS
void lcd_show_rds(uint8_t xpos)
{
       if ((PartMode&0x0f) == PART_MODE_MOS) {     /* kein JFET or IGBT */
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	61 df       	rcall	.-318    	; 0x27e <lcd_fix_string>
     3bc:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <_trans>
     3c0:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <_trans+0x1>
          lcd_next_line_wait(xpos);
     3c4:	22 e0       	ldi	r18, 0x02	; 2
          lcd_MEM_string(RDS_str);		// "RDS=
     3c6:	44 ef       	ldi	r20, 0xF4	; 244
     3c8:	6f ef       	ldi	r22, 0xFF	; 255
     3ca:	84 81       	ldd	r24, Z+4	; 0x04
     3cc:	95 81       	ldd	r25, Z+5	; 0x05
          DisplayValue16(_trans->uBE,-1,LCD_CHAR_OMEGA,2);	// Drain-Source resistance
     3ce:	7f c1       	rjmp	.+766    	; 0x6ce <DisplayValue16>
     3d0:	08 95       	ret

000003d2 <i2lcd>:
i2lcd:			;	void i2lcd(int iw)

#if FLASHEND > 0x1fff

;;  	movw	r20, r24
 	sbrs	r25, 7
     3d2:	97 ff       	sbrs	r25, 7
 	rjmp	to_lcd		; if (iw >= 0) {
     3d4:	09 c0       	rjmp	.+18     	; 0x3e8 <u2lcd>
;   // negativ value, output -  and invert iw
        push	r24		; save r24:r25
     3d6:	8f 93       	push	r24
        push	r25
     3d8:	9f 93       	push	r25
 	ldi	r24,'-'		; 45
     3da:	8d e2       	ldi	r24, 0x2D	; 45
 	RCALL	lcd_data	; lcd_data('-'); uses r22
     3dc:	e1 de       	rcall	.-574    	; 0x1a0 <lcd_data>
        pop	r25		; recall r25:r24
     3de:	9f 91       	pop	r25
        pop	r24		; old r24
     3e0:	8f 91       	pop	r24
        com	r25
     3e2:	90 95       	com	r25
	neg	r24
     3e4:	81 95       	neg	r24
        sbci	r25,-1		; iw = - iw
     3e6:	9f 4f       	sbci	r25, 0xFF	; 255

000003e8 <u2lcd>:
#endif

u2lcd:			;	void i2lcd(uint16_t iw)
to_lcd:			;	void i2lcd(uint16_t iw)
 	ldi	r22, lo8(outval)	;0x0F
     3e8:	6d e1       	ldi	r22, 0x1D	; 29
 	ldi	r23, hi8(outval)	;0x01
     3ea:	71 e0       	ldi	r23, 0x01	; 1
 	ldi	r20, 10
     3ec:	4a e0       	ldi	r20, 0x0A	; 10
 	ldi	r21, 0x00	; 0
     3ee:	50 e0       	ldi	r21, 0x00	; 0
 	ACALL	utoa		; utoa(iw, outval, 10);	//output voltage to string
     3f0:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <utoa>
 	RCALL	lcd_string	;lcd_string(utoa(iw, outval, 10));	//output correction voltage
     3f4:	2b cf       	rjmp	.-426    	; 0x24c <lcd_string>

 	ret
     3f6:	08 95       	ret

000003f8 <i2lcd_space>:

#if FLASHEND > 0x1fff
.GLOBAL i2lcd_space
i2lcd_space:
	RCALL	i2lcd
     3f8:	ec df       	rcall	.-40     	; 0x3d2 <i2lcd>
	rjmp	space_ret	; use return from u2lcd_space
     3fa:	01 c0       	rjmp	.+2      	; 0x3fe <space_ret>

000003fc <u2lcd_space>:

u2lcd_space:
	RCALL	i2lcd
     3fc:	ea df       	rcall	.-44     	; 0x3d2 <i2lcd>

000003fe <space_ret>:
space_ret:
	RCALL    lcd_space
     3fe:	de ce       	rjmp	.-580    	; 0x1bc <lcd_space>
	ret
     400:	08 95       	ret

00000402 <PinLayout>:

PinLayout:

#ifndef EBC_STYLE 
;   // Layout with 123= style
 	push	r14
     402:	ef 92       	push	r14
 	push	r15
     404:	ff 92       	push	r15
 	push	r16
     406:	0f 93       	push	r16
 	push	r17
     408:	1f 93       	push	r17

 	mov	r17, r24		; Pin1
     40a:	18 2f       	mov	r17, r24
 	mov	r16, r22		; Pin2
     40c:	06 2f       	mov	r16, r22
 	mov	r15, r20		; Pin3
     40e:	f4 2e       	mov	r15, r20
 	ldi	r24, lo8(N123_str)	; 0x0B
     410:	8b ea       	ldi	r24, 0xAB	; 171
 	ldi	r25, hi8(N123_str)	; 0x01	
     412:	90 e0       	ldi	r25, 0x00	; 0
 #ifdef USE_EEPROM
 	RCALL	lcd_fix_string	; lcd_MEM_string(N123_str);		//" 123="
     414:	34 df       	rcall	.-408    	; 0x27e <lcd_fix_string>
 #else
 	RCALL	lcd_pgm_string	; lcd_MEM_string(N123_str);		//" 123="
 #endif
 	eor	r14, r14	; for (ipp=0;
     416:	ee 24       	eor	r14, r14

00000418 <loop1>:
loop1:
 	lds	r30, _trans
     418:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <_trans>
 	lds	r31, _trans+1
     41c:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <_trans+0x1>
 	ldd	r24, Z+OFFS_e	; _trans->e
     420:	86 85       	ldd	r24, Z+14	; 0x0e
 	cp	r14, r24
     422:	e8 16       	cp	r14, r24
 	brne	checkb		; if (ipp == _trans->e) 
     424:	11 f4       	brne	.+4      	; 0x42a <checkb>
 	mov	r24, r17	; pin1
     426:	81 2f       	mov	r24, r17
        rjmp	data_ipp  	; lcd_data(pin1);	// Output Character in right order
     428:	09 c0       	rjmp	.+18     	; 0x43c <data_ipp>

0000042a <checkb>:
checkb:
 	ldd	r24, Z+OFFS_b	; _trans->b
     42a:	84 85       	ldd	r24, Z+12	; 0x0c
 	cp	r14, r24	; if (ipp == _trans->b) 
     42c:	e8 16       	cp	r14, r24
 	brne	checkc
     42e:	11 f4       	brne	.+4      	; 0x434 <checkc>
 	mov	r24, r16
     430:	80 2f       	mov	r24, r16
        rjmp	data_ipp	;  lcd_data(pin2);
     432:	04 c0       	rjmp	.+8      	; 0x43c <data_ipp>

00000434 <checkc>:
checkc:
 	ldd	r24, Z+OFFS_c	; _trans->c
     434:	85 85       	ldd	r24, Z+13	; 0x0d
 	cp	r14, r24
     436:	e8 16       	cp	r14, r24
 	brne	next_ipp		; if (ipp == _trans->c) 
     438:	11 f4       	brne	.+4      	; 0x43e <next_ipp>
 	mov	r24, r15
     43a:	8f 2d       	mov	r24, r15

0000043c <data_ipp>:
data_ipp:
 	RCALL	lcd_data	;  lcd_data(pin3);
     43c:	b1 de       	rcall	.-670    	; 0x1a0 <lcd_data>

0000043e <next_ipp>:
next_ipp:
 	inc	r14
     43e:	e3 94       	inc	r14
 	mov	r24, r14
     440:	8e 2d       	mov	r24, r14
 	cpi	r24, 0x03	;  for (     ;ipp<3;ipp++) {
     442:	83 30       	cpi	r24, 0x03	; 3
 	brne	loop1 
     444:	49 f7       	brne	.-46     	; 0x418 <loop1>

 	pop	r17
     446:	1f 91       	pop	r17
 	pop	r16
     448:	0f 91       	pop	r16
 	pop	r15
     44a:	ff 90       	pop	r15
 	pop	r14
     44c:	ef 90       	pop	r14
 	ret
     44e:	08 95       	ret

00000450 <Rnum2pins>:
#endif     /* WITH_GRAPHICS */

 .GLOBAL Rnum2pins
 .func Rnum2pins
 Rnum2pins:
	mov	r22,r24
     450:	68 2f       	mov	r22, r24
	ldi	r24, TP1
     452:	80 e0       	ldi	r24, 0x00	; 0
	ldi	r25, TP3
     454:	92 e0       	ldi	r25, 0x02	; 2
        and	r22,r22
     456:	66 23       	and	r22, r22
        brne    nozero
     458:	09 f4       	brne	.+2      	; 0x45c <nozero>
        ldi	r25, TP2
     45a:	91 e0       	ldi	r25, 0x01	; 1

0000045c <nozero>:
nozero:
	cpi	r22, 2
     45c:	62 30       	cpi	r22, 0x02	; 2
	brne	no_two
     45e:	09 f4       	brne	.+2      	; 0x462 <no_two>
	ldi	r24, TP2
     460:	81 e0       	ldi	r24, 0x01	; 1

00000462 <no_two>:
no_two:
	ret
     462:	08 95       	ret

00000464 <RvalOut>:
 .extern ResistorVal

 .section .text

RvalOut:		; void RvalOut(uint8_t nrr) 	
 	push	r16
     464:	0f 93       	push	r16

        mov	r16, r24
     466:	08 2f       	mov	r16, r24
	LDIZ	ResistorVal
     468:	e7 e9       	ldi	r30, 0x97	; 151
     46a:	f1 e0       	ldi	r31, 0x01	; 1
	add	r24, r24	; nrr*2
     46c:	88 0f       	add	r24, r24
	add	r24, r24	; nrr*4
     46e:	88 0f       	add	r24, r24
	add	r30, r24
     470:	e8 0f       	add	r30, r24
	adc	r31, zero_reg
     472:	f1 1d       	adc	r31, r1

 	ld	r22, Z		; resis[rr].rx
     474:	60 81       	ld	r22, Z
 	ldd	r23, Z+1	; 0x01
     476:	71 81       	ldd	r23, Z+1	; 0x01
 	ldd	r24, Z+2	; 0x02
     478:	82 81       	ldd	r24, Z+2	; 0x02
 	ldd	r25, Z+3	; 0x03
     47a:	93 81       	ldd	r25, Z+3	; 0x03
#if FLASHEND > 0x1fff
 	cpi	r22, 0x64	; 100
     47c:	64 36       	cpi	r22, 0x64	; 100
 	cpc	r23, r1
     47e:	71 05       	cpc	r23, r1
 	cpc	r24, r1
     480:	81 05       	cpc	r24, r1
 	cpc	r25, r1
     482:	91 05       	cpc	r25, r1
 	brcc	ad1d8e 		; (ResistorVal[nrr] < 100)
     484:	70 f4       	brcc	.+28     	; 0x4a2 <ad1d8e>
 	lds	r18, inductor_lpre
     486:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <inductor_lpre>
	sbrc	r18, 7		; minus bit set?
     48a:	27 fd       	sbrc	r18, 7
 	rjmp	ad1d8e 		; (inductor_lpre >= 0)
     48c:	0a c0       	rjmp	.+20     	; 0x4a2 <ad1d8e>
	mov	r24,r16
     48e:	80 2f       	mov	r24, r16
	ACALL	Rnum2pins;	; pins = Rnum2pins(nrr)
     490:	df df       	rcall	.-66     	; 0x450 <Rnum2pins>
        mov	r22, r25
     492:	69 2f       	mov	r22, r25
 	ACALL	GetESR		; rr = GetESR(resis[nrr].ra,resis[nrr].rb);
     494:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <GetESR>
;        ldi	r24, 0
;        ldi	r25, 0
; 	ldi	r20, -2		; 254
; 	ldi	r16, 0x03	; 3
; 	rjmp	ad1d94		; DisplayValue(rr,-2,LCD_CHAR_OMEGA,3);
	ldi	r22, -2
     498:	6e ef       	ldi	r22, 0xFE	; 254
	ldi	r18, 3
     49a:	23 e0       	ldi	r18, 0x03	; 3
	ldi	r20, LCD_CHAR_OMEGA
     49c:	44 ef       	ldi	r20, 0xF4	; 244
	RCALL	DisplayValue16	; DisplayValue16(rr,-2,LCD_OMEGA,3);
     49e:	17 d1       	rcall	.+558    	; 0x6ce <DisplayValue16>
	rjmp	ret_with_space
     4a0:	04 c0       	rjmp	.+8      	; 0x4aa <ret_with_space>

000004a2 <ad1d8e>:
ad1d8e:		; } else {
#endif
	; r22-r25 = ResistorVal[rr]
 	ldi	r20, -1		; 255
     4a2:	4f ef       	ldi	r20, 0xFF	; 255
 	ldi	r16, 0x04	; DisplayValue(resis[nrr].rx,-1,LCD_CHAR_OMEGA,4);
     4a4:	04 e0       	ldi	r16, 0x04	; 4
;ad1d94:
 	ldi	r18, LCD_CHAR_OMEGA	; 244
     4a6:	24 ef       	ldi	r18, 0xF4	; 244
 	RCALL	DisplayValue
     4a8:	65 d0       	rcall	.+202    	; 0x574 <DisplayValue>

000004aa <ret_with_space>:
ret_with_space:
 	RCALL	lcd_space	; lcd_space();
     4aa:	88 de       	rcall	.-752    	; 0x1bc <lcd_space>
 	pop	r16
     4ac:	0f 91       	pop	r16
 	ret
     4ae:	08 95       	ret

000004b0 <mVAusgabe>:
        .extern lcd_space

	 .func mVAusgabe
	mVAusgabe:
	;   if (nn < 6) {
		cpi	r24, 0x06	; 6
     4b0:	86 30       	cpi	r24, 0x06	; 6
		brcc	ad1ca4;
     4b2:	58 f4       	brcc	.+22     	; 0x4ca <ad1ca4>
	      // Output in mV units
		LDIZ	diodes+12;
     4b4:	ea e8       	ldi	r30, 0x8A	; 138
     4b6:	f1 e0       	ldi	r31, 0x01	; 1
		add	r30,r24
     4b8:	e8 0f       	add	r30, r24
		adc	r31,zero_reg
     4ba:	f1 1d       	adc	r31, r1
		add	r30,r24
     4bc:	e8 0f       	add	r30, r24
		adc	r31,zero_reg
     4be:	f1 1d       	adc	r31, r1
		ld	r24, Z		; diodes.Voltage[nn]
     4c0:	80 81       	ld	r24, Z
		ldd	r25, Z+1	; 0x01
     4c2:	91 81       	ldd	r25, Z+1	; 0x01
		ldi	r22, 0x03	; 3
     4c4:	63 e0       	ldi	r22, 0x03	; 3
		RCALL	Display_mV	; Display_mV(diodes.Voltage[nn],3);
     4c6:	0e d1       	rcall	.+540    	; 0x6e4 <Display_mV>
		RCALL	lcd_space;	; lcd_space();
     4c8:	79 ce       	rjmp	.-782    	; 0x1bc <lcd_space>

000004ca <ad1ca4>:
	ad1ca4:
		ret
     4ca:	08 95       	ret

000004cc <UfAusgabe>:
	.extern mVAusgabe

	.func UfAusgabe

UfAusgabe:
 	push	r17
     4cc:	1f 93       	push	r17
 	mov	r17, r24
     4ce:	18 2f       	mov	r17, r24
 	lds	r24, ResistorsFound;	0x0168
     4d0:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <ResistorsFound>
 	and	r24, r24
     4d4:	88 23       	and	r24, r24
 	breq	ad1cbe; 	   if (ResistorsFound > 0) { 
     4d6:	19 f0       	breq	.+6      	; 0x4de <ad1cbe>
 	RCALL	lcd_space;	lcd_space();
     4d8:	71 de       	rcall	.-798    	; 0x1bc <lcd_space>
 	ldi	r24, LCD_CHAR_RESIS3;	0
     4da:	82 e5       	ldi	r24, 0x52	; 82
 	RCALL	lcd_data;      lcd_data(LCD_CHAR_RESIS3);	// special symbol or R
     4dc:	61 de       	rcall	.-830    	; 0x1a0 <lcd_data>

000004de <ad1cbe>:
ad1cbe:
 	RCALL	lcd_line2;					//2. row
     4de:	89 de       	rcall	.-750    	; 0x1f2 <lcd_line2>
 	ldi	r24, lo8(Uf_str);	0xE9
     4e0:	82 ea       	ldi	r24, 0xA2	; 162
 	ldi	r25, hi8(Uf_str);	0x01
     4e2:	90 e0       	ldi	r25, 0x00	; 0
#ifdef USE_EEPROM
 	RCALL	lcd_fix_string	; lcd_PGM_string(Uf_str);	//"Uf="
     4e4:	cc de       	rcall	.-616    	; 0x27e <lcd_fix_string>
#else
 	RCALL	lcd_pgm_string	; lcd_PGM_string(Uf_str);	//"Uf="
#endif
 	mov	r24, r17
     4e6:	81 2f       	mov	r24, r17
 	swap	r24
     4e8:	82 95       	swap	r24
 	andi	r24, 0x0F
     4ea:	8f 70       	andi	r24, 0x0F	; 15
 	rcall	mVAusgabe	; mVAusgabe(bcdnum >> 4);
     4ec:	e1 df       	rcall	.-62     	; 0x4b0 <mVAusgabe>
 	mov	r24, r17
     4ee:	81 2f       	mov	r24, r17
 	andi	r24, 0x0F	; 15
     4f0:	8f 70       	andi	r24, 0x0F	; 15
 	rcall	mVAusgabe	; mVAusgabe(bcdnum & 0x0f);
     4f2:	de df       	rcall	.-68     	; 0x4b0 <mVAusgabe>
 	pop	r17
     4f4:	1f 91       	pop	r17
 	ret
     4f6:	08 95       	ret

000004f8 <SerienDiodenAusgabe>:
	.extern AnKat_str

	.func  SerienDiodenAusgabe

SerienDiodenAusgabe:
 	lds	r24, diode_sequence;	0x0102
     4f8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <diode_sequence>
 	swap	r24
     4fc:	82 95       	swap	r24
 	andi	r24, 0x0F	; first = diode_sequence >> 4;
     4fe:	8f 70       	andi	r24, 0x0F	; 15
	rcall	DiodeSymbol_ApinCpin	;  1->|-2
     500:	19 d0       	rcall	.+50     	; 0x534 <DiodeSymbol_ApinCpin>

 	lds	r24, diode_sequence;	0x0102
     502:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <diode_sequence>
 	andi	r24, 0x03	; second = diode_sequence & 3;
     506:	83 70       	andi	r24, 0x03	; 3
 	RCALL	DiodeSymbol_ACpin	;  ->|-3
     508:	1c d0       	rcall	.+56     	; 0x542 <DiodeSymbol_ACpin>
 	lds	r24, diode_sequence;	x0102
     50a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <diode_sequence>
 	rcall	UfAusgabe	; UfAusgabe(diode_sequence);
     50e:	de cf       	rjmp	.-68     	; 0x4cc <UfAusgabe>
    	ret
     510:	08 95       	ret

00000512 <load_diodes_adr>:
 .endfunc

        .func	load_diodes_adr
load_diodes_adr:
 	ldi	r30, lo8(diodes)	;0x80
     512:	ee e7       	ldi	r30, 0x7E	; 126
 	ldi	r31, hi8(diodes)	;0x01
     514:	f1 e0       	ldi	r31, 0x01	; 1
 	add	r30, r24	; [nn]
     516:	e8 0f       	add	r30, r24
 	adc	r31, zero_reg
     518:	f1 1d       	adc	r31, r1
	ret
     51a:	08 95       	ret

0000051c <DiodeSymbol_withPins>:
	.func	DiodeSymbol_withPins

DiodeSymbol_withPins:
#if FLASHEND > 0x1fff
 // enough memory (>8k) to sort the pins
        push    r28
     51c:	cf 93       	push	r28
	rcall	load_diodes_adr
     51e:	f9 df       	rcall	.-14     	; 0x512 <load_diodes_adr>

cat_first1:
	rcall	DiodeSymbol_CpinApin
 #else
  // the higher test pin number is right side
	ld	r25, Z
     520:	90 81       	ld	r25, Z
	ldd	r28, Z+6	; if (anode_nr < cathode_nr) {
     522:	c6 81       	ldd	r28, Z+6	; 0x06
	cp	r28, r25
     524:	c9 17       	cp	r28, r25
	brcc	cat_first2
     526:	10 f4       	brcc	.+4      	; 0x52c <cat_first2>

	rcall	DiodeSymbol_ApinCpin
     528:	05 d0       	rcall	.+10     	; 0x534 <DiodeSymbol_ApinCpin>
	rjmp	diode_fin
     52a:	01 c0       	rjmp	.+2      	; 0x52e <diode_fin>

0000052c <cat_first2>:

//   } else {

cat_first2:
	rcall	DiodeSymbol_CpinApin
     52c:	13 d0       	rcall	.+38     	; 0x554 <DiodeSymbol_CpinApin>

0000052e <diode_fin>:
 #endif
#else
	rcall	DiodeSymbol_ApinCpin
#endif
diode_fin:
	rcall	lcd_space
     52e:	46 de       	rcall	.-884    	; 0x1bc <lcd_space>
	pop	r28
     530:	cf 91       	pop	r28
	ret
     532:	08 95       	ret

00000534 <DiodeSymbol_ApinCpin>:

	.GLOBAL DiodeSymbol_ApinCpin
	.func	DiodeSymbol_ApinCpin

DiodeSymbol_ApinCpin:
	rcall	load_diodes_adr
     534:	ee df       	rcall	.-36     	; 0x512 <load_diodes_adr>
	push	r24
     536:	8f 93       	push	r24
 	ld	r24, Z		;Anode
     538:	80 81       	ld	r24, Z
 	RCALL	lcd_testpin	; lcd_testpin(diodes.Anode[nn]);
     53a:	3d de       	rcall	.-902    	; 0x1b6 <lcd_testpin>
	pop	r24
     53c:	8f 91       	pop	r24
	rcall	DiodeSymbol_ACpin	; ->|-3
     53e:	01 c0       	rjmp	.+2      	; 0x542 <DiodeSymbol_ACpin>
        ret
     540:	08 95       	ret

00000542 <DiodeSymbol_ACpin>:

	.GLOBAL DiodeSymbol_ACpin
	.func	DiodeSymbol_ACpin

DiodeSymbol_ACpin:
	push	r24
     542:	8f 93       	push	r24
 	ldi	r24, lo8(AnKat_str)	;0xA3
     544:	8e e6       	ldi	r24, 0x6E	; 110
 	ldi	r25, hi8(AnKat_str)	;0x03
     546:	90 e0       	ldi	r25, 0x00	; 0
  #ifdef USE_EEPROM
	.extern lcd_fix_string
 	RCALL	lcd_fix_string	; lcd_PGM_string(AnKat_str);	//"->|-"
     548:	9a de       	rcall	.-716    	; 0x27e <lcd_fix_string>
  #else
	.extern lcd_pgm_string
 	RCALL	lcd_pgm_string	; lcd_PGM_string(AnKat_str);	//"->|-"
  #endif
	pop	r24
     54a:	8f 91       	pop	r24
	rcall	load_diodes_adr
     54c:	e2 df       	rcall	.-60     	; 0x512 <load_diodes_adr>
	ldd	r24, Z+6	; Cathode
     54e:	86 81       	ldd	r24, Z+6	; 0x06
 	RCALL	lcd_testpin	; lcd_testpin(diodes.Cathode[nn]);
     550:	32 ce       	rjmp	.-924    	; 0x1b6 <lcd_testpin>
	ret
     552:	08 95       	ret

00000554 <DiodeSymbol_CpinApin>:

	.GLOBAL DiodeSymbol_CpinApin
	.func	DiodeSymbol_CpinApin

DiodeSymbol_CpinApin:
	rcall	load_diodes_adr
     554:	de df       	rcall	.-68     	; 0x512 <load_diodes_adr>
	push	r24
     556:	8f 93       	push	r24
 	ldd	r24, Z+6	;Cathode
     558:	86 81       	ldd	r24, Z+6	; 0x06
 	RCALL	lcd_testpin	; lcd_testpin(diodes.Cathode[nn]);
     55a:	2d de       	rcall	.-934    	; 0x1b6 <lcd_testpin>
	pop	r24
     55c:	8f 91       	pop	r24
	rcall	DiodeSymbol_CApin	; -|<-3
     55e:	01 c0       	rjmp	.+2      	; 0x562 <DiodeSymbol_CApin>
        ret
     560:	08 95       	ret

00000562 <DiodeSymbol_CApin>:

	.GLOBAL DiodeSymbol_CApin
	.func	DiodeSymbol_CApin

DiodeSymbol_CApin:
	push	r24
     562:	8f 93       	push	r24
 	ldi	r24, lo8(KatAn_str)	;0xA3
     564:	8a e6       	ldi	r24, 0x6A	; 106
 	ldi	r25, hi8(KatAn_str)	;0x03
     566:	90 e0       	ldi	r25, 0x00	; 0
  #ifdef USE_EEPROM
	.extern lcd_fix_string
 	RCALL	lcd_fix_string	; lcd_PGM_string(KatAn_str);	//"->|-"
     568:	8a de       	rcall	.-748    	; 0x27e <lcd_fix_string>
  #else
	.extern lcd_pgm_string
 	RCALL	lcd_pgm_string	; lcd_PGM_string(KatAn_str);	//"->|-"
  #endif
	pop	r24
     56a:	8f 91       	pop	r24
	rcall	load_diodes_adr
     56c:	d2 df       	rcall	.-92     	; 0x512 <load_diodes_adr>
	ld	r24, Z		; Anode
     56e:	80 81       	ld	r24, Z
 	RCALL	lcd_testpin	; lcd_testpin(diodes.Anode[nn]);
     570:	22 ce       	rjmp	.-956    	; 0x1b6 <lcd_testpin>
	ret
     572:	08 95       	ret

00000574 <DisplayValue>:
 *  Flag 0x10 for output with leading zeros
 *  Flag 0x20 for '+' Output, if not '-' 
 */

void DisplayValue(signed long signedValue, int8_t Exponent, unsigned char Unit, uint8_t xdigits)
{
     574:	ae e0       	ldi	r26, 0x0E	; 14
     576:	b0 e0       	ldi	r27, 0x00	; 0
     578:	e0 ec       	ldi	r30, 0xC0	; 192
     57a:	f2 e0       	ldi	r31, 0x02	; 2
     57c:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <__prologue_saves__>
     580:	24 2e       	mov	r2, r20
     582:	32 2e       	mov	r3, r18
  uint8_t           digits;		/* xdigits without option */
  uint8_t           Length;		/* string length */
  uint8_t	    Rshift;		/* right shift of significant bits with leading '0' */


  unsigned long Value=signedValue;
     584:	6b 01       	movw	r12, r22
     586:	7c 01       	movw	r14, r24
  digits = xdigits & 0x0f;
     588:	10 2f       	mov	r17, r16
     58a:	1f 70       	andi	r17, 0x0F	; 15
  for(Prefix=0;Prefix<6;Prefix++) OutBuffer[Prefix] = '0';
     58c:	80 e3       	ldi	r24, 0x30	; 48
     58e:	89 83       	std	Y+1, r24	; 0x01
     590:	8a 83       	std	Y+2, r24	; 0x02
     592:	8b 83       	std	Y+3, r24	; 0x03
     594:	8c 83       	std	Y+4, r24	; 0x04
     596:	8d 83       	std	Y+5, r24	; 0x05
     598:	8e 83       	std	Y+6, r24	; 0x06

#if FLASHEND > 0x1fff
  if (signedValue<0) {
     59a:	f7 fe       	sbrs	r15, 7
     59c:	1d c0       	rjmp	.+58     	; 0x5d8 <DisplayValue+0x64>
     lcd_data('-');
     59e:	8d e2       	ldi	r24, 0x2D	; 45
     5a0:	ff dd       	rcall	.-1026   	; 0x1a0 <lcd_data>
     Value=-signedValue;
     5a2:	f0 94       	com	r15
     5a4:	e0 94       	com	r14
     5a6:	d0 94       	com	r13
     5a8:	c0 94       	com	r12
     5aa:	c1 1c       	adc	r12, r1
     5ac:	d1 1c       	adc	r13, r1
     5ae:	e1 1c       	adc	r14, r1
     5b0:	f1 1c       	adc	r15, r1
     if ((xdigits & 0x20) != 0) lcd_data('+');
  }
#endif

  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
     5b2:	88 ee       	ldi	r24, 0xE8	; 232
     5b4:	93 e0       	ldi	r25, 0x03	; 3
     5b6:	13 30       	cpi	r17, 0x03	; 3
     5b8:	31 f0       	breq	.+12     	; 0x5c6 <DisplayValue+0x52>
  Limit = 100;				/* scale value down to 2 digits */
     5ba:	84 e6       	ldi	r24, 0x64	; 100
     5bc:	90 e0       	ldi	r25, 0x00	; 0
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
     5be:	14 30       	cpi	r17, 0x04	; 4
     5c0:	11 f4       	brne	.+4      	; 0x5c6 <DisplayValue+0x52>
     5c2:	80 e1       	ldi	r24, 0x10	; 16
     5c4:	97 e2       	ldi	r25, 0x27	; 39
  if (digits == 5) Limit = 100000;	/* scale value down to 5 digits */
  if (digits == 6) Limit = 1000000;	/* scale value down to 6 digits */
  if (digits == 7) Limit = 10000000;	/* scale value down to 7 digits */
#endif

  while (Value >= Limit)
     5c6:	2c 01       	movw	r4, r24
     5c8:	71 2c       	mov	r7, r1
     5ca:	61 2c       	mov	r6, r1
  {
    Value += 5;				/* for automatic rounding */
    // perhaps TODO: the above is not really correct, can do double rounding (2000.45 -> 2000.5 -> 2001)
    Value = Value / 10;			/* scale down by 10^1 */
     5cc:	9a e0       	ldi	r25, 0x0A	; 10
     5ce:	89 2e       	mov	r8, r25
     5d0:	91 2c       	mov	r9, r1
     5d2:	a1 2c       	mov	r10, r1
     5d4:	b1 2c       	mov	r11, r1
     5d6:	12 c0       	rjmp	.+36     	; 0x5fc <DisplayValue+0x88>
     if ((xdigits & 0x20) != 0) lcd_data('+');
     5d8:	05 ff       	sbrs	r16, 5
     5da:	eb cf       	rjmp	.-42     	; 0x5b2 <DisplayValue+0x3e>
     5dc:	8b e2       	ldi	r24, 0x2B	; 43
     5de:	e0 dd       	rcall	.-1088   	; 0x1a0 <lcd_data>
     5e0:	e8 cf       	rjmp	.-48     	; 0x5b2 <DisplayValue+0x3e>
    Value += 5;				/* for automatic rounding */
     5e2:	c7 01       	movw	r24, r14
     5e4:	b6 01       	movw	r22, r12
     5e6:	6b 5f       	subi	r22, 0xFB	; 251
     5e8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ea:	8f 4f       	sbci	r24, 0xFF	; 255
     5ec:	9f 4f       	sbci	r25, 0xFF	; 255
    Value = Value / 10;			/* scale down by 10^1 */
     5ee:	a5 01       	movw	r20, r10
     5f0:	94 01       	movw	r18, r8
     5f2:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
     5f6:	69 01       	movw	r12, r18
     5f8:	7a 01       	movw	r14, r20
    Exponent++;				/* increase exponent by 1 */
     5fa:	23 94       	inc	r2
  while (Value >= Limit)
     5fc:	c4 14       	cp	r12, r4
     5fe:	d5 04       	cpc	r13, r5
     600:	e6 04       	cpc	r14, r6
     602:	f7 04       	cpc	r15, r7
     604:	70 f7       	brcc	.-36     	; 0x5e2 <DisplayValue+0x6e>
#endif
  // the following is much more concise
  // also removes the limits checking, since limit errors should never happen, and if they do, they'd show _incorrect_ results;
  // showing a garbage prefix character seems preferable to something correct-looking but off by some power of 10
  Index = ((unsigned char)(Exponent+17))/3;
  Offset = ((unsigned char)(6-Exponent))%3;
     606:	86 e0       	ldi	r24, 0x06	; 6
     608:	82 19       	sub	r24, r2
     60a:	63 e0       	ldi	r22, 0x03	; 3
     60c:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <__udivmodqi4>
     610:	79 2e       	mov	r7, r25
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
     612:	4e 01       	movw	r8, r28
     614:	87 e0       	ldi	r24, 0x07	; 7
     616:	88 0e       	add	r8, r24
     618:	91 1c       	adc	r9, r1
     61a:	4a e0       	ldi	r20, 0x0A	; 10
     61c:	b4 01       	movw	r22, r8
     61e:	c6 01       	movw	r24, r12
     620:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <__utoa_ncheck>
  ultoa(Value, &OutBuffer[6], 10);	// sprintf(&OutBuffer[6],"%ld%c",Value,(char)0);
#else
  utoa((uint16_t)Value, &OutBuffer[6], 10);	// sprintf(&OutBuffer[6],"%d%c",Value,(char)0);
#endif

  Length = strlen(&OutBuffer[6]);
     624:	f4 01       	movw	r30, r8
     626:	01 90       	ld	r0, Z+
     628:	00 20       	and	r0, r0
     62a:	e9 f7       	brne	.-6      	; 0x626 <DisplayValue+0xb2>
     62c:	31 97       	sbiw	r30, 0x01	; 1
     62e:	7f 01       	movw	r14, r30
     630:	e8 18       	sub	r14, r8
     632:	f9 08       	sbc	r15, r9
  Index = ((unsigned char)(Exponent+17))/3;
     634:	81 e1       	ldi	r24, 0x11	; 17
     636:	82 0d       	add	r24, r2
     638:	9b ea       	ldi	r25, 0xAB	; 171
     63a:	89 9f       	mul	r24, r25
     63c:	81 2d       	mov	r24, r1
     63e:	11 24       	eor	r1, r1
     640:	86 95       	lsr	r24
      Index++;				/* use mikro instead of nano */
      Offset += 3;			/* can be 3,4 or 5 */
    }
#endif

  Prefix = MEM_read_byte((unsigned char *)(&PrefixTab[Index]));   /* look up prefix in table */
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	80 50       	subi	r24, 0x00	; 0
     646:	90 40       	sbci	r25, 0x00	; 0
     648:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <eeprom_read_byte>
     64c:	b8 2e       	mov	r11, r24

   */


  /* position of dot */
  if (((xdigits & 0x10) != 0) && (digits > Length)) {
     64e:	04 ff       	sbrs	r16, 4
     650:	2a c0       	rjmp	.+84     	; 0x6a6 <DisplayValue+0x132>
     652:	e1 16       	cp	r14, r17
     654:	40 f5       	brcc	.+80     	; 0x6a6 <DisplayValue+0x132>
     Rshift = (digits - Length);	// use previous filled '0' characters
     656:	1e 19       	sub	r17, r14
  } else {
     Rshift = 0;
  }

  Exponent = (Length + Rshift) - Offset;		/* calculate position */
     658:	ce 2c       	mov	r12, r14
     65a:	c7 18       	sub	r12, r7
     65c:	c1 0e       	add	r12, r17

  if (Exponent <= 0)			/* we have to prepend "0." */
     65e:	1c 14       	cp	r1, r12
  {
    /* 0: factor 10 / -1: factor 100 */
//    lcd_data('0');
    lcd_data('.');
     660:	24 f0       	brlt	.+8      	; 0x66a <DisplayValue+0xf6>
     662:	8e e2       	ldi	r24, 0x2E	; 46
     664:	9d dd       	rcall	.-1222   	; 0x1a0 <lcd_data>
      }
#else
    if (Exponent < 0) lcd_data('0');	/* extra 0 for factor 100 */
#endif
#else
    Rshift = Offset - Length;
     666:	17 2d       	mov	r17, r7
     668:	1e 19       	sub	r17, r14
#endif
  }



  if (Offset == 0) Exponent = -8;	/* disable dot if not needed */
     66a:	71 10       	cpse	r7, r1
     66c:	02 c0       	rjmp	.+4      	; 0x672 <DisplayValue+0xfe>
     66e:	88 ef       	ldi	r24, 0xF8	; 248
     670:	c8 2e       	mov	r12, r24

//  Exponent--;


  /* display value and add dot if requested */
  Index = 0;
     672:	91 2c       	mov	r9, r1
  while (Index < (Length+Rshift))		/* loop through string */
     674:	01 2f       	mov	r16, r17
     676:	10 e0       	ldi	r17, 0x00	; 0
     678:	e0 0e       	add	r14, r16
     67a:	f1 2e       	mov	r15, r17
     67c:	f1 1c       	adc	r15, r1
  {
    lcd_data(OutBuffer[Index+6-Rshift]);		/* display char */
    Index++;				/* next one */
    if (Index == Exponent) {
     67e:	0c 2c       	mov	r0, r12
     680:	00 0c       	add	r0, r0
     682:	dd 08       	sbc	r13, r13
  while (Index < (Length+Rshift))		/* loop through string */
     684:	e9 2d       	mov	r30, r9
     686:	f0 e0       	ldi	r31, 0x00	; 0
     688:	ee 15       	cp	r30, r14
     68a:	ff 05       	cpc	r31, r15
     68c:	74 f0       	brlt	.+28     	; 0x6aa <DisplayValue+0x136>



  /* display prefix and unit */

  if (Prefix != 0) {
     68e:	bb 20       	and	r11, r11
     lcd_data(Prefix);
     690:	11 f0       	breq	.+4      	; 0x696 <DisplayValue+0x122>
     692:	8b 2d       	mov	r24, r11
  }

  if (Unit != 0) {
     694:	85 dd       	rcall	.-1270   	; 0x1a0 <lcd_data>
     696:	33 20       	and	r3, r3
      lcd_data(Unit);
     698:	11 f0       	breq	.+4      	; 0x69e <DisplayValue+0x12a>
     69a:	83 2d       	mov	r24, r3
     69c:	81 dd       	rcall	.-1278   	; 0x1a0 <lcd_data>
  }
  return;
}
     69e:	2e 96       	adiw	r28, 0x0e	; 14
     6a0:	e2 e1       	ldi	r30, 0x12	; 18
     6a2:	0c 94 2b 1f 	jmp	0x3e56	; 0x3e56 <__epilogue_restores__>
     Rshift = 0;
     6a6:	10 e0       	ldi	r17, 0x00	; 0
     6a8:	d7 cf       	rjmp	.-82     	; 0x658 <DisplayValue+0xe4>
    lcd_data(OutBuffer[Index+6-Rshift]);		/* display char */
     6aa:	36 96       	adiw	r30, 0x06	; 6
     6ac:	e0 1b       	sub	r30, r16
     6ae:	f1 0b       	sbc	r31, r17
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	8c 0f       	add	r24, r28
     6b6:	9d 1f       	adc	r25, r29
     6b8:	e8 0f       	add	r30, r24
     6ba:	f9 1f       	adc	r31, r25
     6bc:	80 81       	ld	r24, Z
     6be:	70 dd       	rcall	.-1312   	; 0x1a0 <lcd_data>
    Index++;				/* next one */
     6c0:	93 94       	inc	r9
    if (Index == Exponent) {
     6c2:	9c 14       	cp	r9, r12
     6c4:	1d 04       	cpc	r1, r13
     6c6:	f1 f6       	brne	.-68     	; 0x684 <DisplayValue+0x110>
      lcd_data('.');			/* display dot */
     6c8:	8e e2       	ldi	r24, 0x2E	; 46
     6ca:	6a dd       	rcall	.-1324   	; 0x1a0 <lcd_data>
     6cc:	db cf       	rjmp	.-74     	; 0x684 <DisplayValue+0x110>

000006ce <DisplayValue16>:
     6ce:	0f 93       	push	r16

void DisplayValue16(uint16_t Value, int8_t Exponent, unsigned char Unit, uint8_t digits)
{
     6d0:	36 2f       	mov	r19, r22
 DisplayValue((signed long)Value, Exponent, Unit, digits);
     6d2:	bc 01       	movw	r22, r24
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	02 2f       	mov	r16, r18
     6da:	24 2f       	mov	r18, r20
     6dc:	43 2f       	mov	r20, r19
     6de:	4a df       	rcall	.-364    	; 0x574 <DisplayValue>
     6e0:	0f 91       	pop	r16
}
     6e2:	08 95       	ret

000006e4 <Display_mV>:

void Display_mV(uint16_t xx, uint8_t ll) {
     6e4:	0f 93       	push	r16
     6e6:	06 2f       	mov	r16, r22
 DisplayValue((long)xx,-3,'V',ll);
     6e8:	bc 01       	movw	r22, r24
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	26 e5       	ldi	r18, 0x56	; 86
     6f0:	4d ef       	ldi	r20, 0xFD	; 253
     6f2:	40 df       	rcall	.-384    	; 0x574 <DisplayValue>
     6f4:	0f 91       	pop	r16
}
     6f6:	08 95       	ret

000006f8 <uart_putc>:
		lds	r25, UCSR0A
		sbrs	r25, UDRE0
		rjmp	w3		; wait
		AOUT    UDR0, r24	; put data to transmit buffer
#endif	/* def WITH_HARDWARE_SERIAL */
		ret			;   return
     6f8:	08 95       	ret

000006fa <wait5s>:
; A maximum of 28 bytes of space for return addresses is used in RAM 
; I see no way to implement this function with C-language (too tricky)


wait5s:
 rcall wait1s		;	12+x return-adresses
     6fa:	03 d0       	rcall	.+6      	; 0x702 <wait1000ms>

000006fc <wait4s>:
wait4s:
 rcall wait1s		;	12+x return-adresses
     6fc:	02 d0       	rcall	.+4      	; 0x702 <wait1000ms>

000006fe <wait3s>:
wait3s:
 rcall wait1s		;	12+x return-adresses
     6fe:	01 d0       	rcall	.+2      	; 0x702 <wait1000ms>

00000700 <wait2s>:
wait2s:
 rcall wait1s		;1s     12+x Return-Adresses
     700:	00 d0       	rcall	.+0      	; 0x702 <wait1000ms>

00000702 <wait1000ms>:

wait1s:
wait1000ms:	
 rcall wait500ms	;500ms	11+x Return-Adresses
     702:	00 d0       	rcall	.+0      	; 0x704 <wait500ms>

00000704 <wait500ms>:

wait500ms:
 rcall wait100ms	;100ms	10+x Return-Adresses
     704:	03 d0       	rcall	.+6      	; 0x70c <wait100ms>

00000706 <wait400ms>:
wait400ms:
 rcall wait100ms	;100ms	10+x Return-Adresses
     706:	02 d0       	rcall	.+4      	; 0x70c <wait100ms>

00000708 <wait300ms>:
wait300ms:
 rcall wait100ms	;100ms	10+x Return-Adresses
     708:	01 d0       	rcall	.+2      	; 0x70c <wait100ms>

0000070a <wait200ms>:
wait200ms:
 rcall wait100ms	;100ms	10+x Return-Adresses
     70a:	00 d0       	rcall	.+0      	; 0x70c <wait100ms>

0000070c <wait100ms>:


wait100ms:
 rcall wait50ms	    	; 50ms	9+x Return-Adresses
     70c:	00 d0       	rcall	.+0      	; 0x70e <wait50ms>

0000070e <wait50ms>:

wait50ms:
 rcall wait10ms	    	;10ms	8+x Return-Adresses 
     70e:	03 d0       	rcall	.+6      	; 0x716 <wait10ms>

00000710 <wait40ms>:
wait40ms:
 rcall wait10ms	    	;10ms	8+x Return-Adresses  
     710:	02 d0       	rcall	.+4      	; 0x716 <wait10ms>

00000712 <wait30ms>:
wait30ms:
 rcall wait10ms	    	;10ms	8+x Return-Adresses  
     712:	01 d0       	rcall	.+2      	; 0x716 <wait10ms>

00000714 <wait20ms>:
wait20ms:
 rcall wait10ms	    	;10ms	8+x Return-Adresses
     714:	00 d0       	rcall	.+0      	; 0x716 <wait10ms>

00000716 <wait10ms>:

wait10ms:
 rcall wait5ms	   	;5ms	7+x Return-Adresses
     716:	00 d0       	rcall	.+0      	; 0x718 <wait5ms>

00000718 <wait5ms>:
wait5ms:
 wdr				; every 5ms one Watchdog reset!
     718:	a8 95       	wdr
 rcall wait1ms	   	;1ms	6+x Return-Adresses
     71a:	03 d0       	rcall	.+6      	; 0x722 <wait1ms>

0000071c <wait4ms>:
wait4ms:
 rcall wait1ms	   	;1ms	6+x Return-Adresses
     71c:	02 d0       	rcall	.+4      	; 0x722 <wait1ms>

0000071e <wait3ms>:
wait3ms:
 rcall wait1ms	   	;1ms	6+x Return-Adresses
     71e:	01 d0       	rcall	.+2      	; 0x722 <wait1ms>

00000720 <wait2ms>:
wait2ms:
 rcall wait1ms	   	;1ms	6+x Return-Adresses
     720:	00 d0       	rcall	.+0      	; 0x722 <wait1ms>

00000722 <wait1ms>:

wait1ms:
 rcall wait500us    	;500us	5+x Return-Adresses
     722:	00 d0       	rcall	.+0      	; 0x724 <wait500us>

00000724 <wait500us>:
wait500us:
 rcall wait100us    	;100us	4+x Return-Adresses
     724:	03 d0       	rcall	.+6      	; 0x72c <wait100us>

00000726 <wait400us>:
wait400us:
 rcall wait100us    	;100us	4+x Return-Adresses
     726:	02 d0       	rcall	.+4      	; 0x72c <wait100us>

00000728 <wait300us>:
wait300us:
 rcall wait100us    	;100us	4+x Return-Adresses
     728:	01 d0       	rcall	.+2      	; 0x72c <wait100us>

0000072a <wait200us>:
wait200us:
 rcall wait100us    	;100us	4+x Return-Adresses
     72a:	00 d0       	rcall	.+0      	; 0x72c <wait100us>

0000072c <wait100us>:

wait100us:
#if US100_TICS > (2 * US50_TICS)
 nop
#endif
 rcall wait50us	    	; 50us delay
     72c:	00 d0       	rcall	.+0      	; 0x72e <wait50us>

0000072e <wait50us>:
wait50us:
#if US50_TICS > (US40_TICS + US10_TICS)
 nop
#endif
 rcall wait10us     	;10us delay
     72e:	03 d0       	rcall	.+6      	; 0x736 <wait10us>

00000730 <wait40us>:
wait40us:
#if US40_TICS > (US30_TICS + US10_TICS)
 nop
#endif
 rcall wait10us     	;10us delay
     730:	02 d0       	rcall	.+4      	; 0x736 <wait10us>

00000732 <wait30us>:
wait30us:
#if US30_TICS > (US20_TICS + US10_TICS)
 nop
#endif
 rcall wait10us     	;10us delay
     732:	01 d0       	rcall	.+2      	; 0x736 <wait10us>

00000734 <wait20us>:
wait20us:
#if US20_TICS > (2 * US10_TICS)
 nop
#endif
 rcall wait10us		;10us delay
     734:	00 d0       	rcall	.+0      	; 0x736 <wait10us>

00000736 <wait10us>:

#if US5_TICS >= RCALL_TICS
 #if US10_TICS > (2 * US5_TICS)
  nop
 #endif
 rcall wait5us
     736:	00 d0       	rcall	.+0      	; 0x738 <wait5us>

00000738 <wait5us>:
   #define INNER_TICS US1_TICS
wait5us:
   #if US5_TICS > (US4_TICS + US1_TICS)
    nop
   #endif
   rcall wait1us
     738:	03 d0       	rcall	.+6      	; 0x740 <wait1us>

0000073a <wait4us>:
wait4us:
   #if US4_TICS > (US3_TICS + US1_TICS)
    nop
   #endif
   rcall wait1us
     73a:	02 d0       	rcall	.+4      	; 0x740 <wait1us>

0000073c <wait3us>:
wait3us:
   #if US3_TICS > (US2_TICS + US1_TICS)
    nop
   #endif
   rcall wait1us
     73c:	01 d0       	rcall	.+2      	; 0x740 <wait1us>

0000073e <wait2us>:
wait2us:
   #if US2_TICS > (2 * US1_TICS)
    nop
   #endif
   rcall wait1us
     73e:	00 d0       	rcall	.+0      	; 0x740 <wait1us>

00000740 <wait1us>:
 #endif
 #if WAST_TICS2 >= 2
    rjmp .		/* two additional tics */
 #endif
 #if ((WAST_TICS2 / 2) * 2) < WAST_TICS2
    nop			/* one additional tic */
     740:	00 00       	nop
 #endif

 ret
     742:	08 95       	ret

00000744 <W20msReadADC>:
 .section .text
;unsigned int W20msReadADC(uint8_t Probe) 
;unsigned int W5msReadADC(uint8_t Probe) 
#ifdef INHIBIT_SLEEP_MODE
W20msReadADC:
	ACALL wait10ms;
     744:	e8 df       	rcall	.-48     	; 0x716 <wait10ms>

00000746 <W10msReadADC>:
			;// runs to W10msReadADC
W10msReadADC:
	ACALL wait5ms;
     746:	e8 df       	rcall	.-48     	; 0x718 <wait5ms>

00000748 <W5msReadADC>:
			;// runs to W5msReadADC
W5msReadADC:
	ACALL wait5ms;
     748:	e7 df       	rcall	.-50     	; 0x718 <wait5ms>

0000074a <ReadADC>:
     74a:	1f 93       	push	r17

;unsigned int ReadADC(uint8_t Probe) 
ReadADC:
;  //returns result of ADC port Probe scaled to mV resolution (unsigned int)
;  unsigned long Value;
	push	r17;
     74c:	18 2f       	mov	r17, r24
; unsigned int U; /* return value (mV) */
; uint8_t Samples; /* loop counter */
; unsigned long Value; /* ADC value */
	mov	r17, r24;	Probe
     74e:	10 64       	ori	r17, 0x40	; 64

00000750 <get_sample>:
	ori	r17, (1 << REFS0)	; Probe |= (1 << REFS0); /* use internal reference anyway */
     750:	10 93 7c 00 	sts	0x007C, r17	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
get_sample:
        AOUT	ADMUX, r17		; ADMUX = Probe; /* set input channel and U reference */
     754:	e1 2f       	mov	r30, r17
#ifdef AUTOSCALE_ADC
 /* if voltage reference changed run a dummy conversion */
	mov	r30, r17;
     756:	e0 78       	andi	r30, 0x80	; 128
       	andi	r30, (1 << REFS1)	; Samples = Probe & (1 << REFS1); /* get REFS1 bit flag */
     758:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <ADCconfig+0x1>
	lds	r24, ADCconfig+RefFlag	;
     75c:	e8 17       	cp	r30, r24
       	cp	r30, r24;
     75e:	51 f0       	breq	.+20     	; 0x774 <no_ref_change>
       	breq	no_ref_change			; if (Samples != ADCconfig.RefFlag) 
     760:	e0 93 28 01 	sts	0x0128, r30	; 0x800128 <ADCconfig+0x1>
	sts	ADCconfig+RefFlag, r30	; ADCconfig.RefFlag = Samples; /* update flag */
     764:	e3 df       	rcall	.-58     	; 0x72c <wait100us>
 #ifdef NO_AREF_CAP
	RCALL	wait100us		; wait100us(); /* time for voltage stabilization */
     766:	86 ed       	ldi	r24, 0xD6	; 214
  #else
	ldi	r24, 2			; /* 2 * 5ms */
	RCALL	sleep_5ms		; wait_about10ms()
  #endif
 #endif		/* end NO_AREF_CAP */
	StartADCwait                    ; // allways do one dummy read of ADC, 112us
     768:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     76c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     770:	86 fd       	sbrc	r24, 6
     772:	fc cf       	rjmp	.-8      	; 0x76c <get_sample+0x1c>

00000774 <no_ref_change>:
     774:	20 e0       	ldi	r18, 0x00	; 0
#endif		/* end AUTOSCALE_ADC */

;unsigned int ReadADC (uint8_t Probe) {
no_ref_change:
 /* * sample ADC readings */
	ldi	r18, 0x00;	 Value = 0UL; /* reset sampling variable */
     776:	30 e0       	ldi	r19, 0x00	; 0
	ldi	r19, 0x00; 
     778:	a9 01       	movw	r20, r18
	movw	r20, r18;
     77a:	e0 e0       	ldi	r30, 0x00	; 0
	ldi	r30, 0x00;	 Samples = 0; /* number of samples to take */
     77c:	1e c0       	rjmp	.+60     	; 0x7ba <r2ae8>

0000077e <Loop>:
	rjmp	r2ae8 ;
     77e:	86 ed       	ldi	r24, 0xD6	; 214
; while (Samples < ADCconfig.Samples) /* take samples */ 
Loop:
	StartADCwait                    /* start ADC and wait */
     780:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     784:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     788:	86 fd       	sbrc	r24, 6
     78a:	fc cf       	rjmp	.-8      	; 0x784 <Loop+0x6>
     78c:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>

	lds	r22, ADCL;     Value += ADCW; /* add ADC reading */
     790:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	lds	r23, ADCH;
     794:	26 0f       	add	r18, r22
	add	r18, r22;
     796:	37 1f       	adc	r19, r23
	adc	r19, r23;
     798:	41 1d       	adc	r20, r1
	adc	r20, r1;
     79a:	51 1d       	adc	r21, r1
	adc	r21, r1;
     79c:	e4 30       	cpi	r30, 0x04	; 4
#ifdef AUTOSCALE_ADC
;    /* auto-switch voltage reference for low readings */
;    if ((Samples == 4) && (ADCconfig.U_Bandgap > 255) && ((uint16_t)Value < 1024) && !(Probe & (1 << REFS1))) {
	cpi	r30, 0x04;	Samples == 4
     79e:	61 f4       	brne	.+24     	; 0x7b8 <cnt_next>
	brne	cnt_next		; if ((Samples == 4) && 
     7a0:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <ADCconfig+0x3>
	lds	r24, ADCconfig+3;
     7a4:	80 30       	cpi	r24, 0x00	; 0
        cpi	r24,0;
     7a6:	41 f0       	breq	.+16     	; 0x7b8 <cnt_next>
        breq	cnt_next		; if ( && (ADCconfig.U_Bandgap > 255) )
     7a8:	84 e0       	ldi	r24, 0x04	; 4
       	ldi	r24, hi8(1024)		; Value < 1024
     7aa:	20 30       	cpi	r18, 0x00	; 0
	cpi	r18, lo8(1024)
     7ac:	38 07       	cpc	r19, r24
	cpc	r19, r24;
     7ae:	20 f4       	brcc	.+8      	; 0x7b8 <cnt_next>
	brcc	cnt_next		; if ( &&  && ((uint16_t)Value < 1024) )
     7b0:	17 fd       	sbrc	r17, 7
	sbrc	r17, REFS1;
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <cnt_next>
	rjmp	cnt_next		; if ( &&  &&  && !(Probe & (1 << REFS1))) 
     7b4:	10 68       	ori	r17, 0x80	; 128
	ori	r17, (1 << REFS1);   Probe |= (1 << REFS1); /* select internal bandgap reference */
     7b6:	cc cf       	rjmp	.-104    	; 0x750 <get_sample>

000007b8 <cnt_next>:
 #if (PROCESSOR_TYP == 644) || (PROCESSOR_TYP == 1280)
	cbr	r17, (1<<REFS0); Probe &= ~(1 << REFS0);  /* ATmega640/1280/2560 1.1V Reference with REFS0=0 */
 #endif
	rjmp	get_sample ;       goto get_sample; /* re-run sampling */
     7b8:	ef 5f       	subi	r30, 0xFF	; 255

000007ba <r2ae8>:
#endif		/* end AUTOSCALE_ADC */
cnt_next:
	subi	r30, 0xFF;	  Samples++; /* one more done */
     7ba:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <ADCconfig>
r2ae8:
	lds	r24, ADCconfig+Samples;
     7be:	e8 17       	cp	r30, r24
	cp	r30, r24		; while (Samples < ADCconfig.Samples) /* take samples */ 
     7c0:	f0 f2       	brcs	.-68     	; 0x77e <Loop>
	brcs	Loop ;
     7c2:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <ADCconfig+0x4>
	lds	r22, ADCconfig+U_AVCC		; U = ADCconfig.U_AVCC; /* Vcc reference */
     7c6:	70 91 2c 01 	lds	r23, 0x012C	; 0x80012c <ADCconfig+0x5>
       	lds	r23, ADCconfig+U_AVCC+1;
     7ca:	17 ff       	sbrs	r17, 7
#ifdef AUTOSCALE_ADC
; /* * convert ADC reading to voltage * - single sample: U = ADC reading * U_ref / 1024 */
; /* get voltage of reference used */
	sbrs	r17, REFS1			; if (Probe & (1 << REFS1))
     7cc:	04 c0       	rjmp	.+8      	; 0x7d6 <r2b02>
	rjmp	r2b02 ;
     7ce:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <ADCconfig+0x2>
	lds	r22, ADCconfig+U_Bandgap	; U = ADCconfig.U_Bandgap; /* bandgap reference */
     7d2:	70 91 2a 01 	lds	r23, 0x012A	; 0x80012a <ADCconfig+0x3>

000007d6 <r2b02>:
	lds	r23, ADCconfig+U_Bandgap+1;
     7d6:	80 e0       	ldi	r24, 0x00	; 0
#endif		/* end AUTOSCALE_ADC */
; /* convert to voltage; */
r2b02:
	ldi	r24, 0x00			; Value *= U; /* ADC readings * U_ref */
     7d8:	90 e0       	ldi	r25, 0x00	; 0
	ldi	r25, 0x00; 0
     7da:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__mulsi3>
	ACALL	__mulsi3;			; sum(ADCreads) * ADC_reference
     7de:	2f ef       	ldi	r18, 0xFF	; 255
	ldi	r18, lo8(1023)			; Value /= 1023; /* / 1024 for 10bit ADC */
     7e0:	33 e0       	ldi	r19, 0x03	; 3
	ldi	r19, hi8(1023);
     7e2:	40 e0       	ldi	r20, 0x00	; 0
	ldi	r20, 0x00; 0
     7e4:	50 e0       	ldi	r21, 0x00	; 0
	ldi	r21, 0x00; 0
     7e6:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
	ACALL	__udivmodsi4;			R22-25 / R18-21
     7ea:	b9 01       	movw	r22, r18
	movw	r22, r18;
     7ec:	ca 01       	movw	r24, r20
	movw	r24, r20;
     7ee:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <ADCconfig>
; /* de-sample to get average voltage */
	lds	r18,ADCconfig+Samples			; Value /= ADCconfig.Samples;
     7f2:	30 e0       	ldi	r19, 0x00	; 0
	ldi	r19, 0x00; 0
     7f4:	40 e0       	ldi	r20, 0x00	; 0
	ldi	r20, 0x00; 0
     7f6:	50 e0       	ldi	r21, 0x00	; 0
	ldi	r21, 0x00; 0
     7f8:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
	ACALL	__udivmodsi4;			R22-25 / R18-21
     7fc:	c9 01       	movw	r24, r18
	movw	r24, r18			;;//   return ((unsigned int)(Value / (1023 * (unsigned long)ADCconfig.Samples)));
     7fe:	1f 91       	pop	r17
	pop	r17;
     800:	08 95       	ret

00000802 <abs_diff>:
    	ret;
     802:	9b 01       	movw	r18, r22
 .endfunc

.func abs_diff
.GLOBAL abs_diff
abs_diff:
	movw	r18, r22
     804:	28 1b       	sub	r18, r24
        sub	r18, r24
     806:	39 0b       	sbc	r19, r25
	sbc	r19, r25
     808:	50 f0       	brcs	.+20     	; 0x81e <is_pl>
	brcs	is_pl		; return v1-v2
     80a:	c9 01       	movw	r24, r18
	movw	r24, r18
     80c:	08 95       	ret

0000080e <vcc_diff>:
	ret			; return v2-v1
     80e:	bc 01       	movw	r22, r24

.func vcc_diff
.GLOBAL vcc_diff
; uint16_t vcc_diff(uint16_t v2)	// computes unsigned_diff(ADCconfig.U_AVCC, v2)
vcc_diff:
	movw	r22, r24
     810:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <ADCconfig+0x4>
	lds	r24, ADCconfig+U_AVCC
     814:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <ADCconfig+0x5>

00000818 <unsigned_diff>:
	lds	r25, ADCconfig+U_AVCC+1
     818:	68 17       	cp	r22, r24
.func unsigned_diff
.GLOBAL unsigned_diff
; uint16_t unsigned_diff(uint16_t v1, uint16_t v2)  // computes v1-v2 if positive, otherwise returns 0

unsigned_diff:
	cp	r22, r24
     81a:	79 07       	cpc	r23, r25
	cpc	r23, r25
     81c:	18 f4       	brcc	.+6      	; 0x824 <no_pl>

0000081e <is_pl>:
	brcc	no_pl
     81e:	86 1b       	sub	r24, r22
is_pl:
	sub	r24, r22
     820:	97 0b       	sbc	r25, r23
	sbc	r25, r23
     822:	08 95       	ret

00000824 <no_pl>:
	ret			; return v1-v2
     824:	80 e0       	ldi	r24, 0x00	; 0
no_pl:
	ldi	r24, 0
     826:	90 e0       	ldi	r25, 0x00	; 0
	ldi	r25, 0
     828:	08 95       	ret

0000082a <wait_for_key_ms>:
;/* wait max_time or previous key press */
;/* max_time zero wait without time limit */
;/* return value: !=0 == key is pressed for xx*10ms, 0 == key is not pressed, time expired */
;uint8_t wait_for_key_ms(int max_time) 
wait_for_key_ms:
        push	r14
     82a:	ef 92       	push	r14
	push	r15
     82c:	ff 92       	push	r15
	push	r16
     82e:	0f 93       	push	r16
        push	r17
     830:	1f 93       	push	r17
 	push	r28		; save registers r28:29
     832:	cf 93       	push	r28
 	push	r29
     834:	df 93       	push	r29
 	movw	r14, r24	; r14:15 = max_time
     836:	7c 01       	movw	r14, r24
;  // if key is pressed, return 1
;  // if max_time == 0 , do not count, wait endless
	
	ldi	r28, 101	; kk = 100
     838:	c5 e6       	ldi	r28, 0x65	; 101

0000083a <wrelease>:
wrelease:
        sbic    _SFR_IO_ADDR(RST_PIN_REG), RST_PIN              ; if((RST_PIN_REG & (1<<RST_PIN)))
     83a:	4f 99       	sbic	0x09, 7	; 9
        rjmp	no_w200
     83c:	03 c0       	rjmp	.+6      	; 0x844 <no_w200>
#if INHIBIT_SLEEP_MODE
	RCALL	wait5ms		; wait5ms();
     83e:	6c df       	rcall	.-296    	; 0x718 <wait5ms>
#else
 	ldi	r24,  1
 	RCALL	sleep_5ms	; wait_about5ms();
#endif
        subi	r28, 1		; kk--;
     840:	c1 50       	subi	r28, 0x01	; 1
        brne	wrelease	; while (kk >= 0)
     842:	d9 f7       	brne	.-10     	; 0x83a <wrelease>

00000844 <no_w200>:
no_w200:
	movw	r28,r14		; count_time = max_time
     844:	e7 01       	movw	r28, r14
	ldi	r16, 0x55	; key_pressed = 0x55;
     846:	05 e5       	ldi	r16, 0x55	; 85
	ldi	r17, 0		; key_cs = 0
     848:	10 e0       	ldi	r17, 0x00	; 0

0000084a <no_cnt>:
 	; wait max_time milliseconds or endless, if zero
no_cnt:
 	sbrc	r29, 7		; while (count_time >= 0) 
     84a:	d7 fd       	sbrc	r29, 7
        rjmp	to_ret
     84c:	1b c0       	rjmp	.+54     	; 0x884 <to_ret>

0000084e <wloop>:
wloop:
#if INHIBIT_SLEEP_MODE
	RCALL	wait10ms	; wait10ms();
     84e:	63 df       	rcall	.-314    	; 0x716 <wait10ms>
#else
 	ldi	r24, 0x02	; 2
 	RCALL	sleep_5ms	; wait_about10ms();
#endif
        add	r16, r16	; key_pressed += key_pressed; // multiply with 2 is shift to left
     850:	00 0f       	add	r16, r16
 	sbis	_SFR_IO_ADDR(RST_PIN_REG), RST_PIN		; if((RST_PIN_REG & (1<<RST_PIN))) {
     852:	4f 9b       	sbis	0x09, 7	; 9
        subi	r16, 0xff	; key_pressed++; //append a 1
     854:	0f 5f       	subi	r16, 0xFF	; 255
        andi	r16, 0x3f	; key_pressed &= 0x3f;
     856:	0f 73       	andi	r16, 0x3F	; 63
	cpi	r16, 0x3f	; if (key_pressed == 0x3f) //63 all bits set
     858:	0f 33       	cpi	r16, 0x3F	; 63
        brne	not_pressed
     85a:	41 f4       	brne	.+16     	; 0x86c <not_pressed>
	cpse	r17, r1		; if (key_cs == 0)
     85c:	11 11       	cpse	r17, r1
        rjmp	no_first
     85e:	02 c0       	rjmp	.+4      	; 0x864 <no_first>
	movw	r28,r14		; count_time = max_time;
     860:	e7 01       	movw	r28, r14
	ldi	r17, 4		; key_cs = 4;
     862:	14 e0       	ldi	r17, 0x04	; 4

00000864 <no_first>:
no_first:
	subi	r17, 0xff	; key_cs++;
     864:	1f 5f       	subi	r17, 0xFF	; 255
        cpi	r17, MAX_CS	; if (key_cs >= MAX_CS)
     866:	16 39       	cpi	r17, 0x96	; 150
	brcs	cnt_loop	;
     868:	28 f0       	brcs	.+10     	; 0x874 <cnt_loop>
        rjmp	to_ret		;  break;
     86a:	0c c0       	rjmp	.+24     	; 0x884 <to_ret>

0000086c <not_pressed>:
not_pressed:
	cpse	r16, r1		; if (( key_pressed == 0) &&
     86c:	01 11       	cpse	r16, r1
        rjmp	cnt_loop
     86e:	02 c0       	rjmp	.+4      	; 0x874 <cnt_loop>
	cpse	r17, r1		;  ( key_cs != 0))
     870:	11 11       	cpse	r17, r1
        rjmp	to_ret		; break;
     872:	08 c0       	rjmp	.+16     	; 0x884 <to_ret>

00000874 <cnt_loop>:

cnt_loop:
 	wdr			; wdt_reset();
     874:	a8 95       	wdr
 	sbiw	r28, 0x00	; if (count_time > 0) 	// count only, if counter > 0
     876:	20 97       	sbiw	r28, 0x00	; 0
 	breq	no_cnt 		; special case zero, don't count
     878:	41 f3       	breq	.-48     	; 0x84a <no_cnt>
 	sbiw	r28, 0x0a	; count_time -= 10;			// 10 ms are done, count down
     87a:	2a 97       	sbiw	r28, 0x0a	; 10
 	brne	no_cnt		; if (count_time == 0) count_time = -1;	// never count to zero, zero is endless!
     87c:	31 f7       	brne	.-52     	; 0x84a <no_cnt>
 	ldi	r28, 0xFF	; count_time = -1
     87e:	cf ef       	ldi	r28, 0xFF	; 255
 	ldi	r29, 0xFF	; 
     880:	df ef       	ldi	r29, 0xFF	; 255
	rjmp	no_cnt
     882:	e3 cf       	rjmp	.-58     	; 0x84a <no_cnt>

00000884 <to_ret>:
to_ret:
        mov	r24, r17	; return(key_cs)
     884:	81 2f       	mov	r24, r17
 	pop	r29		; restore registers r29:28
     886:	df 91       	pop	r29
 	pop	r28
     888:	cf 91       	pop	r28
	pop	r17
     88a:	1f 91       	pop	r17
	pop	r16
     88c:	0f 91       	pop	r16
	pop	r15
     88e:	ff 90       	pop	r15
	pop	r14
     890:	ef 90       	pop	r14
 	ret
     892:	08 95       	ret

00000894 <wait_for_key_5s_line2>:
 	RCALL	lcd_line4	;              //4. row 
 	RCALL	lcd_clear_line	; lcd_clear_line();	// clear the whole line
 	RCALL	lcd_line4	;              //4. row 
#endif
#else
	push	r28
     894:	cf 93       	push	r28
	RCALL	lcd_save_position
     896:	7b dc       	rcall	.-1802   	; 0x18e <lcd_save_position>
	mov	r28, r24		; current_line = lcd_save_position()
     898:	c8 2f       	mov	r28, r24
	lds	r24, last_line_used
     89a:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <last_line_used>
	and	r24, r24
     89e:	88 23       	and	r24, r24
	breq	x83c			; if (last_line_used != 0)
     8a0:	d1 f0       	breq	.+52     	; 0x8d6 <x83c>
	cpi	r24, 1
     8a2:	81 30       	cpi	r24, 0x01	; 1
        brne	x822
     8a4:	51 f4       	brne	.+20     	; 0x8ba <x822>
	cpi	r28, (LCD_LINES-1)
     8a6:	c1 30       	cpi	r28, 0x01	; 1
	brne	x822			; if ((last_line_used == 1) &&(current_line == (LCD_LINES-1)))
     8a8:	41 f4       	brne	.+16     	; 0x8ba <x822>
	ldi	r22, (LCD_LINE_LENGTH -1)
     8aa:	6f e0       	ldi	r22, 0x0F	; 15
	ldi	r24, ((LCD_LINES - 1) * PAGES_PER_LINE)
     8ac:	81 e0       	ldi	r24, 0x01	; 1
	rcall	lcd_set_cursor		; lcd_set_cursor(((LCD_LINES - 1) * PAGES_PER_LINE), (LCD_LINE_LENGTH - 1))
     8ae:	b9 dc       	rcall	.-1678   	; 0x222 <lcd_set_cursor>
	ldi	r24, '+'		; // add a + sign at the last location of screen
     8b0:	8b e2       	ldi	r24, 0x2B	; 43
	rcall	lcd_data		; lcd_data('+')
     8b2:	76 dc       	rcall	.-1812   	; 0x1a0 <lcd_data>
	ldi	r22, (LCD_LINE_LENGTH -1)
     8b4:	6f e0       	ldi	r22, 0x0F	; 15
	ldi	r24, ((LCD_LINES - 1) * PAGES_PER_LINE)
     8b6:	81 e0       	ldi	r24, 0x01	; 1
	rcall	lcd_set_cursor		; lcd_set_cursor(((LCD_LINES - 1) * PAGES_PER_LINE), (LCD_LINE_LENGTH - 1))
     8b8:	b4 dc       	rcall	.-1688   	; 0x222 <lcd_set_cursor>

000008ba <x822>:
	rjmp	x855
	lds	r24, rotary+incre
	cpse	r24, r1
	rjmp	x822
#else
 	ldi	r24, lo8(SHORT_WAIT_TIME)	; 0x88
     8ba:	80 e4       	ldi	r24, 0x40	; 64
 	ldi	r25, hi8(SHORT_WAIT_TIME)	; 0x13
     8bc:	9f e1       	ldi	r25, 0x1F	; 31
        rcall   wait_for_key_ms		;wait_for_key_ms(SHORT_WAIT_TIME);     // wait until time is elapsed or key is pressed
     8be:	b5 df       	rcall	.-150    	; 0x82a <wait_for_key_ms>

000008c0 <x855>:
#endif
x855:
	cpi	r28, (LCD_LINES - 1)       ; (current_line == (LCD_LINES - 1))
     8c0:	c1 30       	cpi	r28, 0x01	; 1
	brne	x83a 
     8c2:	41 f4       	brne	.+16     	; 0x8d4 <x83a>
	lds	r24, last_line_used
     8c4:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <last_line_used>
	cpi	r24, 1
     8c8:	81 30       	cpi	r24, 0x01	; 1
	brne	x83a			; if ((current_line == (LCD_LINES - 1)) && (last_line_used == 1)) 
     8ca:	21 f4       	brne	.+8      	; 0x8d4 <x83a>
        ldi	r24, (LCD_LINES - 1)
     8cc:	81 e0       	ldi	r24, 0x01	; 1
	ldi	r22, 0x00       ; 0
     8ce:	60 e0       	ldi	r22, 0x00	; 0
        rcall   lcd_set_cursor		; lcd_set_cursor((LCD_LINES-1) * PAGES_PER_LINE,0)
     8d0:	a8 dc       	rcall	.-1712   	; 0x222 <lcd_set_cursor>
	rcall	lcd_clear_line
     8d2:	29 dd       	rcall	.-1454   	; 0x326 <lcd_clear_line>

000008d4 <x83a>:
x83a:
	rcall   lcd_restore_position
     8d4:	b0 dc       	rcall	.-1696   	; 0x236 <lcd_restore_position>

000008d6 <x83c>:
x83c:
	pop	r28
     8d6:	cf 91       	pop	r28

#endif
 	ret
     8d8:	08 95       	ret

000008da <RefVoltage>:
 

RefVoltage:

#ifdef AUTO_CAL
 	ldi	r24, lo8(ref_offset)	; 1
     8da:	83 ed       	ldi	r24, 0xD3	; 211
 	ldi	r25, hi8(ref_offset)	; 0
     8dc:	91 e0       	ldi	r25, 0x01	; 1
;; 	ACALL	eeprom_read_word	; eeprom_read_word((uint16_t *)(&ref_offset));
;; 	lds	r18, ref_mv
;; 	lds	r19, ref_mv+1
;; 	add	r18, r24		; referenz =  ref_mv +
;; 	adc	r19, r25
	ACALL	eeprom_read_byte	; eeprom_read_word((uint16_t *)(&ref_offset)); done as two read_byte
     8de:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <eeprom_read_byte>
	mov	r19, r24
     8e2:	38 2f       	mov	r19, r24
	ldi	r24, lo8(ref_offset+1)
     8e4:	84 ed       	ldi	r24, 0xD4	; 212
	ldi	r25, hi8(ref_offset+1)
     8e6:	91 e0       	ldi	r25, 0x01	; 1
	ACALL	eeprom_read_byte
     8e8:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <eeprom_read_byte>
 	lds	r18, ref_mv
     8ec:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <ref_mv>
	add	r18, r19
     8f0:	23 0f       	add	r18, r19
 	lds	r19, ref_mv+1
     8f2:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <ref_mv+0x1>
	adc	r19, r24
     8f6:	38 1f       	adc	r19, r24
	lds	r18, ref_mv
	lds	r19, ref_mv+1
	subi	r18, -REF_C_KORR		; referenz = ref_mv + REF_C_KORR;
	adc	r19, zero_reg
#endif
        sts	ref_mv_offs, r18
     8f8:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <ref_mv_offs>
        sts	ref_mv_offs+1, r19
     8fc:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <ref_mv_offs+0x1>

#ifdef AUTO_RH 
 	ldi	r24, hi8(Ref_Tab_Beginn)	; 3
     900:	83 e0       	ldi	r24, 0x03	; 3
 	cpi	r18, lo8(Ref_Tab_Beginn)	; 232
     902:	28 3e       	cpi	r18, 0xE8	; 232
 	cpc	r19, r24
     904:	38 07       	cpc	r19, r24
 	brcs	ad210e 				; if (referenz >= Ref_Tab_Beginn) 
     906:	20 f0       	brcs	.+8      	; 0x910 <ad210e>
 	movw	r24, r18
     908:	c9 01       	movw	r24, r18
 	subi	r24, lo8(Ref_Tab_Beginn)	; 232 referenz -= Ref_Tab_Beginn;
     90a:	88 5e       	subi	r24, 0xE8	; 232
 	sbci	r25, hi8(Ref_Tab_Beginn)	; 3
     90c:	93 40       	sbci	r25, 0x03	; 3
 	rjmp	ad2112 
     90e:	02 c0       	rjmp	.+4      	; 0x914 <ad2112>

00000910 <ad210e>:
ad210e:
 	ldi	r24, 0x00	; referenz = 0;		// limit to begin of table
     910:	80 e0       	ldi	r24, 0x00	; 0
 	ldi	r25, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0

00000914 <ad2112>:
ad2112:
 	ldi	r22, lo8(Ref_Tab_Abstand)	; 50 tabind = referenz / Ref_Tab_Abstand;
     914:	62 e3       	ldi	r22, 0x32	; 50
 	ldi	r23, hi8(Ref_Tab_Abstand)	; 0
     916:	70 e0       	ldi	r23, 0x00	; 0
 	ACALL	__udivmodhi4
     918:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <__udivmodhi4>
;  r22 = tabind = referenz / Ref_Tab_Abstand;
;  r24 =  tabres = referenz % Ref_Tab_Abstand;
 	cpi	r22, 0x08	; if (tabind > 7) 
     91c:	68 30       	cpi	r22, 0x08	; 8
 	brcs	ad2120 
     91e:	08 f0       	brcs	.+2      	; 0x922 <ad2120>
 	ldi	r22, 0x07	; tabind = 7;		// limit to end of table
     920:	67 e0       	ldi	r22, 0x07	; 7

00000922 <ad2120>:
ad2120:
; // interpolate the table of factors

	LDIZ	RHtab
     922:	e4 e9       	ldi	r30, 0x94	; 148
     924:	f0 e0       	ldi	r31, 0x00	; 0
	add	r30, r22
     926:	e6 0f       	add	r30, r22
	adc	r31, zero_reg
     928:	f1 1d       	adc	r31, r1
	add	r30, r22
     92a:	e6 0f       	add	r30, r22
	adc	r31, zero_reg
     92c:	f1 1d       	adc	r31, r1

 	lpm	r20, Z+		; y1 = pgm_read_word(&RHtab[tabind]);
     92e:	45 91       	lpm	r20, Z+
 	lpm	r21, Z+
     930:	55 91       	lpm	r21, Z+
 	lpm	r18, Z+		; y2 = pgm_read_word(&RHtab[tabind+1]);
     932:	25 91       	lpm	r18, Z+
 	lpm	r19, Z+
     934:	35 91       	lpm	r19, Z+
 	ldi	r22, Ref_Tab_Abstand	; 50
     936:	62 e3       	ldi	r22, 0x32	; 50
 	sub	r22, r24		; tabres = Ref_Tab_Abstand-tabres;
     938:	68 1b       	sub	r22, r24
;  // interpolate the table of factors
;  // RHmultip is the interpolated factor to compute capacity from load time with 470k
;; 	ldi	r23, 0x00	; 0
 	sub	r20, r18	; y1 - y2
     93a:	42 1b       	sub	r20, r18
 #if FLASHEND > 0x1fff
	sbc	r21, r19	; hi8(y1 - y2) is usually allway zero
     93c:	53 0b       	sbc	r21, r19
 #endif
 	mul	r22, r20	; lo8(tabres) * lo8(y1-y2)
     93e:	64 9f       	mul	r22, r20
 	movw	r24, r0		; r24:25 = *
     940:	c0 01       	movw	r24, r0
 #if FLASHEND > 0x1fff
 	mul	r22, r21	; lo8(tabres) * hi8(y1-y2)
     942:	65 9f       	mul	r22, r21
 	add	r25, r0		; r25 + lo8(*)
     944:	90 0d       	add	r25, r0
 #endif
;; 	mul	r23, r20	; hi8(tabres) * lo8(y1*y2) , allways zero
;; 	add	r25, r0		; r25 + lo8(*)

 	eor	r1, r1
     946:	11 24       	eor	r1, r1
 	adiw	r24, (Ref_Tab_Abstand/2)	; 25
     948:	49 96       	adiw	r24, 0x19	; 25
 	ldi	r22, lo8(Ref_Tab_Abstand)	; 50
     94a:	62 e3       	ldi	r22, 0x32	; 50
 	ldi	r23, hi8(Ref_Tab_Abstand)	; 0
     94c:	70 e0       	ldi	r23, 0x00	; 0
 	ACALL	__udivmodhi4	; ((y1 - y2) * tabres + (Ref_Tab_Abstand/2)) / Ref_Tab_Abstand 
     94e:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <__udivmodhi4>
 	add	r22, r18	; + y2
     952:	62 0f       	add	r22, r18
 	adc	r23, r19
     954:	73 1f       	adc	r23, r19
 	sts	RHmultip+1, r23
     956:	70 93 67 01 	sts	0x0167, r23	; 0x800167 <RHmultip+0x1>
 	sts	RHmultip, r22
     95a:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <RHmultip>
	ldi	r23, hi8(DEFAULT_RH_FAKT)
 	sts	RHmultip, r22
 	sts	RHmultip+1, r23
#endif 
#ifdef AUTO_CAL
	ldi	r24, lo8(RefDiff)
     95e:	85 ed       	ldi	r24, 0xD5	; 213
	ldi	r25, hi8(RefDiff)
     960:	91 e0       	ldi	r25, 0x01	; 1
	ACALL	eeprom_read_byte	; (int8_t)eeprom_read_byte((uint8_t *)&RefDiff));
     962:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <eeprom_read_byte>
	eor	r25, r25		; set zero for sign extend
     966:	99 27       	eor	r25, r25
        sbrc	r24, 7			; minus?
     968:	87 fd       	sbrc	r24, 7
	com	r25			; yes, set to 0xff
     96a:	90 95       	com	r25
        lds	r22, ref_mv		; ADCconfig.U_Bandgap = (ref_mv + (int8_t)eeprom_read_byte((uint8_t *)&RefDiff));
     96c:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <ref_mv>
        lds	r23, ref_mv+1
     970:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <ref_mv+0x1>
	add	r24, r22
     974:	86 0f       	add	r24, r22
	adc	r25, r23
     976:	97 1f       	adc	r25, r23
        lds	r25, ref_mv+1
	add	r24, r22
        adc	r25, r23
#endif
#define U_Bandgap 2
        sts	ADCconfig+U_Bandgap+1, r25
     978:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <ADCconfig+0x3>
        sts	ADCconfig+U_Bandgap, r24
     97c:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <ADCconfig+0x2>
	sts	adc_internal_reference+1, r25		; adc_internal_reference = ADCconfig.U_Bandgap;
     980:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <adc_internal_reference+0x1>
	sts	adc_internal_reference, r24
     984:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <adc_internal_reference>


 	ret
     988:	08 95       	ret

0000098a <get_log>:
 .section .text

; // get_log interpolate a table with the function -1000*log(1 - (permil/1000))
; uint16_t get_log(uint16_t permil) {
get_log:
 	push	r28
     98a:	cf 93       	push	r28
 	push	r29
     98c:	df 93       	push	r29

 	ldi	r18, lo8(Log_Tab_Distance)	;0x14
     98e:	24 e1       	ldi	r18, 0x14	; 20
 	ldi	r19, hi8(Log_Tab_Distance)	;0x00	
     990:	30 e0       	ldi	r19, 0x00	; 0
 	movw	r22, r18
     992:	b9 01       	movw	r22, r18
 	call	__udivmodhi4		; tabind = permil / Log_Tab_Distance;	// index to table
     994:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <__udivmodhi4>
 	movw	r26, r24
     998:	dc 01       	movw	r26, r24
;  r26:27 = tabres = permil % Log_Tab_Distance;	// fraction of table distance
;  // interpolate the table of factors
;  y1 = pgm_read_word(&LogTab[tabind]);	// get the lower table value
	LDIZ	LogTab;
     99a:	e6 ea       	ldi	r30, 0xA6	; 166
     99c:	f0 e0       	ldi	r31, 0x00	; 0
        add	r30, r22
     99e:	e6 0f       	add	r30, r22
        adc	r31, r23
     9a0:	f7 1f       	adc	r31, r23
        add	r30, r22
     9a2:	e6 0f       	add	r30, r22
	adc	r31, r23	; &LogTab[tabind]
     9a4:	f7 1f       	adc	r31, r23
 	lpm	r28, Z+		; y1 = pgm_read_word(&LogTab[tabind]);	// get the lower table value
     9a6:	c5 91       	lpm	r28, Z+
 	lpm	r29, Z+
     9a8:	d5 91       	lpm	r29, Z+
 	lpm	r20, Z+		; y2 = pgm_read_word(&LogTab[tabind+1]); // get the higher table value
     9aa:	45 91       	lpm	r20, Z+
 	lpm	r21, Z+
     9ac:	55 91       	lpm	r21, Z+
;  result = ((y2 - y1) * tabres ) / Log_Tab_Distance + y1; // interpolate
 	sub	r20, r28	;  (y2 - y1) 
     9ae:	4c 1b       	sub	r20, r28
	sbc	r21, r29	;  hi8(y2 - y1) 
     9b0:	5d 0b       	sbc	r21, r29
 	mul	r20, r26	; * tabres   (maximum 19)
     9b2:	4a 9f       	mul	r20, r26
 	movw	r24, r0		;  r24:25 =  ((y2 - y1) * tabres )
     9b4:	c0 01       	movw	r24, r0
	mul	r20, r27	; hi8(tabres) 
     9b6:	4b 9f       	mul	r20, r27
	add	r25, r0
     9b8:	90 0d       	add	r25, r0
	mul	r21, r26	; hi8(y2 - Y1) 
     9ba:	5a 9f       	mul	r21, r26
	add	r25, r0
     9bc:	90 0d       	add	r25, r0
 	eor	r1, r1
     9be:	11 24       	eor	r1, r1
 	movw	r22, r18	; Log_Tab_Distance
     9c0:	b9 01       	movw	r22, r18
 	call	__udivmodhi4	;   ((y2 - y1) * tabres ) / Log_Tab_Distance
     9c2:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <__udivmodhi4>
 	add	r22, r28	;  result = ((y2 - y1) * tabres ) / Log_Tab_Distance + y1; // interpolate
     9c6:	6c 0f       	add	r22, r28
 	adc	r23, r29
     9c8:	7d 1f       	adc	r23, r29
 	movw	r24, r22	; return(result);
     9ca:	cb 01       	movw	r24, r22
 	pop	r29
     9cc:	df 91       	pop	r29
 	pop	r28
     9ce:	cf 91       	pop	r28
 	ret
     9d0:	08 95       	ret

000009d2 <search_vak_diode>:

// function search_vak_diode try to find a diode, which has no side connected to the transistor base
// returns 20, if no diode found
uint8_t search_vak_diode() {
    uint8_t ii;
    for (ii=0; ii<NumOfDiodes; ii++) {
     9d2:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <NumOfDiodes>
			if ((diodes.Anode[ii] == _trans->b)
     9d6:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <_trans>
     9da:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <_trans+0x1>
     9de:	ee e7       	ldi	r30, 0x7E	; 126
     9e0:	f1 e0       	ldi	r31, 0x01	; 1
    for (ii=0; ii<NumOfDiodes; ii++) {
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	82 2f       	mov	r24, r18
     9e8:	24 17       	cp	r18, r20
     9ea:	b0 f4       	brcc	.+44     	; 0xa18 <search_vak_diode+0x46>
			if ((diodes.Anode[ii] == _trans->b)
     9ec:	51 91       	ld	r21, Z+
     9ee:	1c 96       	adiw	r26, 0x0c	; 12
     9f0:	9c 91       	ld	r25, X
     9f2:	1c 97       	sbiw	r26, 0x0c	; 12
     9f4:	59 17       	cp	r21, r25
     9f6:	19 f0       	breq	.+6      	; 0x9fe <search_vak_diode+0x2c>
					|| (diodes.Cathode[ii] == _trans->b))
     9f8:	55 81       	ldd	r21, Z+5	; 0x05
     9fa:	95 13       	cpse	r25, r21
     9fc:	03 c0       	rjmp	.+6      	; 0xa04 <search_vak_diode+0x32>
     9fe:	2f 5f       	subi	r18, 0xFF	; 255
     a00:	3f 4f       	sbci	r19, 0xFF	; 255
     a02:	f1 cf       	rjmp	.-30     	; 0x9e6 <search_vak_diode+0x14>
				continue;
       // no side of the diode is connected to the base, this must be the protection diode   
       if (diodes.Voltage[ii] > 1000) break; // Voltage is too high for protection diode
     a04:	22 0f       	add	r18, r18
     a06:	33 1f       	adc	r19, r19
     a08:	f9 01       	movw	r30, r18
     a0a:	e6 57       	subi	r30, 0x76	; 118
     a0c:	fe 4f       	sbci	r31, 0xFE	; 254
     a0e:	20 81       	ld	r18, Z
     a10:	31 81       	ldd	r19, Z+1	; 0x01
     a12:	29 3e       	cpi	r18, 0xE9	; 233
     a14:	33 40       	sbci	r19, 0x03	; 3
     a16:	08 f0       	brcs	.+2      	; 0xa1a <search_vak_diode+0x48>
       return ii;
    }
    return 20;
     a18:	84 e1       	ldi	r24, 0x14	; 20
}
     a1a:	08 95       	ret

00000a1c <init_parts>:

/* init_parts initialize all parts to nothing found */
void init_parts(void) {
  PartFound = PART_NONE;	// no part found
     a1c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <PartFound>
  NumOfDiodes = 0;		// Number of diodes = 0
     a20:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <NumOfDiodes>
  ptrans.count = 0;		// Number of found P type transistors
     a24:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <ptrans+0xf>
  ntrans.count = 0;		// Number of found N type transistors
     a28:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <ntrans+0xf>
  PartMode = PART_MODE_NONE;
     a2c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <PartMode>
  WithReference = 0;		// no precision reference voltage
     a30:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <WithReference>
  ResistorsFound = 0;		// no resistors found
     a34:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <ResistorsFound>
  ResistorChecked[0] = 0;
     a38:	ed e4       	ldi	r30, 0x4D	; 77
     a3a:	f1 e0       	ldi	r31, 0x01	; 1
     a3c:	10 82       	st	Z, r1
  ResistorChecked[1] = 0;
     a3e:	11 82       	std	Z+1, r1	; 0x01
  ResistorChecked[2] = 0;
     a40:	12 82       	std	Z+2, r1	; 0x02
  cap.ca = TP1;
     a42:	e8 e6       	ldi	r30, 0x68	; 104
     a44:	f1 e0       	ldi	r31, 0x01	; 1
     a46:	10 8a       	std	Z+16, r1	; 0x10
  cap.cb = TP3;
     a48:	82 e0       	ldi	r24, 0x02	; 2
     a4a:	81 8b       	std	Z+17, r24	; 0x11
#if FLASHEND > 0x1fff
  inductor_lpre = 0;		// mark as zero
     a4c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <inductor_lpre>
  cap.v_loss = 0;		// set Vloss to zero
     a50:	17 86       	std	Z+15, r1	; 0x0f
     a52:	16 86       	std	Z+14, r1	; 0x0e
#endif
  cap.cval_max = 0;		// set max to zero
     a54:	14 82       	std	Z+4, r1	; 0x04
     a56:	15 82       	std	Z+5, r1	; 0x05
     a58:	16 82       	std	Z+6, r1	; 0x06
     a5a:	17 82       	std	Z+7, r1	; 0x07
  cap.cpre_max = -15;	// set max to fF unit
     a5c:	81 ef       	ldi	r24, 0xF1	; 241
     a5e:	83 8b       	std	Z+19, r24	; 0x13
}
     a60:	08 95       	ret

00000a62 <switch_tester_off>:
  uart_newline();	// MAURO
 #endif
 #if ((LCD_ST_TYPE == 7565) || (LCD_ST_TYPE == 1306))
  lcd_powersave();			// set graphical display to power save mode
 #endif
  ON_PORT &= ~(1<<ON_PIN);		//switch off power
     a62:	5e 98       	cbi	0x0b, 6	; 11
  wait2s();
     a64:	4d de       	rcall	.-870    	; 0x700 <wait2s>
  wait_for_key_ms(0); //never ending loop 
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	df ce       	rjmp	.-578    	; 0x82a <wait_for_key_ms>
}
     a6c:	08 95       	ret

00000a6e <ShortedProbes>:
 *  - 0 if not shorted
 *  - 1 if shorted
 */

uint8_t ShortedProbes(uint8_t Probe1, uint8_t Probe2)
{
     a6e:	1f 93       	push	r17
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	16 2f       	mov	r17, r22
   *  Set up a voltage divider between the two probes:
   *  - Probe1: Rl pull-up
   *  - Probe2: Rl pull-down
   */

  ADC_DDR =  TXD_MSK;		// all-Pins to Input
     a76:	17 b8       	out	0x07, r1	; 7
  ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
     a78:	18 b8       	out	0x08, r1	; 8
  addr = &PinRLRHADCtab[Probe1];
     a7a:	e8 2f       	mov	r30, r24
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	e2 58       	subi	r30, 0x82	; 130
     a80:	ff 4f       	sbci	r31, 0xFF	; 255
  pp = pgm_read_byte(addr);
     a82:	94 91       	lpm	r25, Z
  R_PORT = pp;
     a84:	95 b9       	out	0x05, r25	; 5
  addr += (int8_t)(Probe2-Probe1);
     a86:	26 2f       	mov	r18, r22
     a88:	28 1b       	sub	r18, r24
     a8a:	e2 0f       	add	r30, r18
     a8c:	f1 1d       	adc	r31, r1
     a8e:	27 fd       	sbrc	r18, 7
     a90:	fa 95       	dec	r31
  R_DDR =  pp | pgm_read_byte(addr);	// pgm_read_byte(PinRHtab[Probe1]) | pgm_read_byte(PinRLtab[Probe2]);
     a92:	e4 91       	lpm	r30, Z
     a94:	e9 2b       	or	r30, r25

  /* read voltages */
  U1 = ReadADC(Probe1);
     a96:	e4 b9       	out	0x04, r30	; 4
     a98:	58 de       	rcall	.-848    	; 0x74a <ReadADC>
  U2 = ReadADC(Probe2);
     a9a:	ec 01       	movw	r28, r24
     a9c:	81 2f       	mov	r24, r17
     a9e:	55 de       	rcall	.-854    	; 0x74a <ReadADC>
     aa0:	ac 01       	movw	r20, r24
   */
 #ifndef MAX_UH_DIFF
  #define MAX_UH_DIFF 30
 #endif

  URH = ADCconfig.U_AVCC / 2;
     aa2:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <ADCconfig+0x4>
     aa6:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <ADCconfig+0x5>
     aaa:	36 95       	lsr	r19
     aac:	27 95       	ror	r18
  URH -= ((long)U_VCC * (long)(PIN_RP-PIN_RM)) / (4*(unsigned long)(R_L_VAL+PIN_RM));			// differenz of Pin resistance high (22) and low (20)
     aae:	c9 01       	movw	r24, r18
     ab0:	04 97       	sbiw	r24, 0x04	; 4
  if (((U1 + MAX_UH_DIFF) > URH ) && (U1 < (URH + MAX_UH_DIFF)))
     ab2:	be 01       	movw	r22, r28
     ab4:	62 5e       	subi	r22, 0xE2	; 226
     ab6:	7f 4f       	sbci	r23, 0xFF	; 255
     ab8:	86 17       	cp	r24, r22
     aba:	97 07       	cpc	r25, r23
     abc:	78 f4       	brcc	.+30     	; 0xadc <ShortedProbes+0x6e>
     abe:	26 5e       	subi	r18, 0xE6	; 230
     ac0:	3f 4f       	sbci	r19, 0xFF	; 255
     ac2:	c2 17       	cp	r28, r18
     ac4:	d3 07       	cpc	r29, r19
     ac6:	50 f4       	brcc	.+20     	; 0xadc <ShortedProbes+0x6e>
  {
    if (((U2 + MAX_UH_DIFF) > URH) && (U2 < (URH + MAX_UH_DIFF)))
     ac8:	ba 01       	movw	r22, r20
     aca:	62 5e       	subi	r22, 0xE2	; 226
     acc:	7f 4f       	sbci	r23, 0xFF	; 255
     ace:	86 17       	cp	r24, r22
     ad0:	97 07       	cpc	r25, r23
     ad2:	20 f4       	brcc	.+8      	; 0xadc <ShortedProbes+0x6e>
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	42 17       	cp	r20, r18
     ad8:	53 07       	cpc	r21, r19
     ada:	08 f0       	brcs	.+2      	; 0xade <ShortedProbes+0x70>
  uint8_t           Flag1 = 0;      /* return value */
     adc:	80 e0       	ldi	r24, 0x00	; 0
      Flag1 = 1;
    }
  }

  /* reset port */
  R_DDR = 0;
     ade:	14 b8       	out	0x04, r1	; 4

  return Flag1;
}
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	1f 91       	pop	r17
 *  - 0 if no probes are short-circuited
 *  - number of probe pairs short-circuited (3 = all)
 */

uint8_t AllProbesShorted(void)
{
     ae6:	08 95       	ret

00000ae8 <AllProbesShorted>:
  uint8_t           Flag2;      /* return value */

  /* check all possible combinations */
  Flag2 = ShortedProbes(TP1, TP2);
     ae8:	cf 93       	push	r28
     aea:	61 e0       	ldi	r22, 0x01	; 1
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	bf df       	rcall	.-130    	; 0xa6e <ShortedProbes>
  Flag2 += ShortedProbes(TP1, TP3);
     af0:	c8 2f       	mov	r28, r24
     af2:	62 e0       	ldi	r22, 0x02	; 2
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	bb df       	rcall	.-138    	; 0xa6e <ShortedProbes>
  Flag2 += ShortedProbes(TP2, TP3);
     af8:	c8 0f       	add	r28, r24
     afa:	62 e0       	ldi	r22, 0x02	; 2
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	b7 df       	rcall	.-146    	; 0xa6e <ShortedProbes>

  return Flag2;
}
     b00:	8c 0f       	add	r24, r28
     b02:	cf 91       	pop	r28
     b04:	08 95       	ret

00000b06 <AutoCheck>:
void AutoCheck(uint8_t test_mode) {
     b06:	ae e0       	ldi	r26, 0x0E	; 14
     b08:	b0 e0       	ldi	r27, 0x00	; 0
     b0a:	e9 e8       	ldi	r30, 0x89	; 137
     b0c:	f5 e0       	ldi	r31, 0x05	; 5
     b0e:	0c 94 15 1f 	jmp	0x3e2a	; 0x3e2a <__prologue_saves__+0xc>
if ((test_mode & 0xf0) == 0) {
     b12:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <PartFound>
lcd_clear();
     b16:	80 7f       	andi	r24, 0xF0	; 240
lcd_MEM_string(VERSION_str);	//"Version ..."
     b18:	41 f0       	breq	.+16     	; 0xb2a <AutoCheck+0x24>
     b1a:	93 db       	rcall	.-2266   	; 0x242 <lcd_clear>
     b1c:	8d e4       	ldi	r24, 0x4D	; 77
} /* end AutoCheck */ 
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	ae db       	rcall	.-2212   	; 0x27e <lcd_fix_string>
  if (AllProbesShorted() != 3) return;
     b22:	2e 96       	adiw	r28, 0x0e	; 14
     b24:	ec e0       	ldi	r30, 0x0C	; 12
     b26:	0c 94 31 1f 	jmp	0x3e62	; 0x3e62 <__epilogue_restores__+0xc>
  lcd_clear();
     b2a:	de df       	rcall	.-68     	; 0xae8 <AllProbesShorted>
  lcd_MEM_string(SELFTEST);		// "Selftest mode.."
     b2c:	83 30       	cpi	r24, 0x03	; 3
     b2e:	c9 f7       	brne	.-14     	; 0xb22 <AutoCheck+0x1c>
     b30:	88 db       	rcall	.-2288   	; 0x242 <lcd_clear>
  lcd_line2();
     b32:	80 e0       	ldi	r24, 0x00	; 0
  lcd_data('?');			// wait for key pressed for confirmation
     b34:	91 e0       	ldi	r25, 0x01	; 1
     b36:	a3 db       	rcall	.-2234   	; 0x27e <lcd_fix_string>
     b38:	5c db       	rcall	.-2376   	; 0x1f2 <lcd_line2>
  if (wait_for_key_ms(2000) > 10) goto begin_selftest;	// key is pressed again
     b3a:	8f e3       	ldi	r24, 0x3F	; 63
     b3c:	31 db       	rcall	.-2462   	; 0x1a0 <lcd_data>
     b3e:	80 ed       	ldi	r24, 0xD0	; 208
     b40:	97 e0       	ldi	r25, 0x07	; 7
     b42:	73 de       	rcall	.-794    	; 0x82a <wait_for_key_ms>
     b44:	8b 30       	cpi	r24, 0x0B	; 11
lcd_line2();
     b46:	48 f3       	brcs	.-46     	; 0xb1a <AutoCheck+0x14>
     b48:	54 db       	rcall	.-2392   	; 0x1f2 <lcd_line2>
Calibrate_UR();		// get Reference voltage, Pin resistance
     b4a:	0e 94 07 14 	call	0x280e	; 0x280e <Calibrate_UR>
lcd_MEM2_string(R0_str);		// "R0="
     b4e:	84 e8       	ldi	r24, 0x84	; 132
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	87 db       	rcall	.-2290   	; 0x262 <lcd_pgm_string>
     b54:	60 e0       	ldi	r22, 0x00	; 0
eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[2]), (uint8_t)0);	// clear zero offset
     b56:	8a ec       	ldi	r24, 0xCA	; 202
     b58:	91 e0       	ldi	r25, 0x01	; 1
     b5a:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <eeprom_write_byte>
     b5e:	60 e0       	ldi	r22, 0x00	; 0
eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (uint8_t)0);	// clear zero offset
     b60:	8b ec       	ldi	r24, 0xCB	; 203
     b62:	91 e0       	ldi	r25, 0x01	; 1
     b64:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <eeprom_write_byte>
     b68:	60 e0       	ldi	r22, 0x00	; 0
eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (uint8_t)0);	// clear zero offset
     b6a:	89 ec       	ldi	r24, 0xC9	; 201
     b6c:	91 e0       	ldi	r25, 0x01	; 1
     b6e:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <eeprom_write_byte>
     b72:	60 e0       	ldi	r22, 0x00	; 0
adcmv[0] = GetESR(TP3, TP1);
     b74:	82 e0       	ldi	r24, 0x02	; 2
     b76:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <GetESR>
     b7a:	6c 01       	movw	r12, r24
     b7c:	9a 83       	std	Y+2, r25	; 0x02
     b7e:	89 83       	std	Y+1, r24	; 0x01
     b80:	61 e0       	ldi	r22, 0x01	; 1
adcmv[1] = GetESR(TP3, TP2);
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <GetESR>
     b88:	7c 01       	movw	r14, r24
     b8a:	9c 83       	std	Y+4, r25	; 0x04
     b8c:	8b 83       	std	Y+3, r24	; 0x03
adcmv[2] = GetESR(TP2, TP1);
     b8e:	60 e0       	ldi	r22, 0x00	; 0
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <GetESR>
     b96:	8c 01       	movw	r16, r24
     b98:	9e 83       	std	Y+6, r25	; 0x06
DisplayValue16(adcmv[0],-2,' ',3);
     b9a:	8d 83       	std	Y+5, r24	; 0x05
     b9c:	23 e0       	ldi	r18, 0x03	; 3
     b9e:	40 e2       	ldi	r20, 0x20	; 32
     ba0:	6e ef       	ldi	r22, 0xFE	; 254
     ba2:	c6 01       	movw	r24, r12
     ba4:	94 dd       	rcall	.-1240   	; 0x6ce <DisplayValue16>
DisplayValue16(adcmv[1],-2,' ',3);
     ba6:	23 e0       	ldi	r18, 0x03	; 3
     ba8:	40 e2       	ldi	r20, 0x20	; 32
     baa:	6e ef       	ldi	r22, 0xFE	; 254
     bac:	c7 01       	movw	r24, r14
     bae:	8f dd       	rcall	.-1250   	; 0x6ce <DisplayValue16>
     bb0:	23 e0       	ldi	r18, 0x03	; 3
DisplayValue16(adcmv[2],-2,LCD_CHAR_OMEGA,3);
     bb2:	44 ef       	ldi	r20, 0xF4	; 244
     bb4:	6e ef       	ldi	r22, 0xFE	; 254
     bb6:	c8 01       	movw	r24, r16
     bb8:	8a dd       	rcall	.-1260   	; 0x6ce <DisplayValue16>
     bba:	2a e5       	ldi	r18, 0x5A	; 90
     bbc:	c2 16       	cp	r12, r18
if (adcmv[0] >= 90) {
     bbe:	d1 04       	cpc	r13, r1
     bc0:	24 f0       	brlt	.+8      	; 0xbca <AutoCheck+0xc4>
     bc2:	84 e1       	ldi	r24, 0x14	; 20
     bc4:	90 e0       	ldi	r25, 0x00	; 0
  adcmv[0] = ESR_ZERO;	// set back to default value
     bc6:	9a 83       	std	Y+2, r25	; 0x02
     bc8:	89 83       	std	Y+1, r24	; 0x01
     bca:	69 81       	ldd	r22, Y+1	; 0x01
     bcc:	8a ec       	ldi	r24, 0xCA	; 202
eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[2]), (uint8_t)adcmv[0]);	// fix zero offset
     bce:	91 e0       	ldi	r25, 0x01	; 1
     bd0:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <eeprom_write_byte>
     bd4:	8a e5       	ldi	r24, 0x5A	; 90
     bd6:	e8 16       	cp	r14, r24
if (adcmv[1] >= 90) {
     bd8:	f1 04       	cpc	r15, r1
     bda:	24 f0       	brlt	.+8      	; 0xbe4 <AutoCheck+0xde>
     bdc:	84 e1       	ldi	r24, 0x14	; 20
     bde:	90 e0       	ldi	r25, 0x00	; 0
  adcmv[1] = ESR_ZERO;	// set back to default value
     be0:	9c 83       	std	Y+4, r25	; 0x04
     be2:	8b 83       	std	Y+3, r24	; 0x03
     be4:	6b 81       	ldd	r22, Y+3	; 0x03
     be6:	8b ec       	ldi	r24, 0xCB	; 203
eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (uint8_t)adcmv[1]);	// fix zero offset
     be8:	91 e0       	ldi	r25, 0x01	; 1
     bea:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <eeprom_write_byte>
if (adcmv[2] >= 90) {
     bee:	0a 35       	cpi	r16, 0x5A	; 90
     bf0:	11 05       	cpc	r17, r1
  adcmv[2] = ESR_ZERO;	// set back to default value
     bf2:	24 f0       	brlt	.+8      	; 0xbfc <AutoCheck+0xf6>
     bf4:	84 e1       	ldi	r24, 0x14	; 20
eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (uint8_t)adcmv[2]);	// fix zero offset
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	9e 83       	std	Y+6, r25	; 0x06
     bfa:	8d 83       	std	Y+5, r24	; 0x05
last_line_used = 2;
     bfc:	6d 81       	ldd	r22, Y+5	; 0x05
     bfe:	89 ec       	ldi	r24, 0xC9	; 201
     c00:	91 e0       	ldi	r25, 0x01	; 1
wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
     c02:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <eeprom_write_byte>
     c06:	82 e0       	ldi	r24, 0x02	; 2
  if (AllProbesShorted() == 0) break;
     c08:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <last_line_used>
  lcd_clear_line2();		// clear total line2
     c0c:	43 de       	rcall	.-890    	; 0x894 <wait_for_key_5s_line2>
  lcd_MEM_string(RELPROBE);	// "Release Probes"
     c0e:	18 e7       	ldi	r17, 0x78	; 120
     c10:	6b df       	rcall	.-298    	; 0xae8 <AllProbesShorted>
     c12:	88 23       	and	r24, r24
     c14:	39 f0       	breq	.+14     	; 0xc24 <AutoCheck+0x11e>
  wait_about500ms();
     c16:	ac db       	rcall	.-2216   	; 0x370 <lcd_clear_line2>
     c18:	80 ef       	ldi	r24, 0xF0	; 240
for (ww=0;ww<120;ww++) {
     c1a:	90 e0       	ldi	r25, 0x00	; 0
lcd_clear();
     c1c:	30 db       	rcall	.-2464   	; 0x27e <lcd_fix_string>
     c1e:	72 dd       	rcall	.-1308   	; 0x704 <wait500ms>
lcd_MEM_string(RIHI_str);	// "RiHi="
     c20:	11 50       	subi	r17, 0x01	; 1
     c22:	b1 f7       	brne	.-20     	; 0xc10 <AutoCheck+0x10a>
     c24:	0e db       	rcall	.-2532   	; 0x242 <lcd_clear>
DisplayValue16(RRpinPL,-1,LCD_CHAR_OMEGA,3);
     c26:	86 e4       	ldi	r24, 0x46	; 70
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	29 db       	rcall	.-2478   	; 0x27e <lcd_fix_string>
     c2c:	23 e0       	ldi	r18, 0x03	; 3
     c2e:	44 ef       	ldi	r20, 0xF4	; 244
     c30:	6f ef       	ldi	r22, 0xFF	; 255
     c32:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <pin_rpl>
lcd_line2();
     c36:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <pin_rpl+0x1>
lcd_MEM_string(RILO_str);	// "RiLo="
     c3a:	49 dd       	rcall	.-1390   	; 0x6ce <DisplayValue16>
     c3c:	da da       	rcall	.-2636   	; 0x1f2 <lcd_line2>
     c3e:	8f e3       	ldi	r24, 0x3F	; 63
     c40:	90 e0       	ldi	r25, 0x00	; 0
DisplayValue16(RRpinMI,-1,LCD_CHAR_OMEGA,3);
     c42:	1d db       	rcall	.-2502   	; 0x27e <lcd_fix_string>
     c44:	23 e0       	ldi	r18, 0x03	; 3
     c46:	44 ef       	ldi	r20, 0xF4	; 244
     c48:	6f ef       	ldi	r22, 0xFF	; 255
     c4a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <pin_rmi>
     c4e:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <pin_rmi+0x1>
     c52:	3d dd       	rcall	.-1414   	; 0x6ce <DisplayValue16>
last_line_used = 2;
     c54:	82 e0       	ldi	r24, 0x02	; 2
     c56:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <last_line_used>
wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
     c5a:	1c de       	rcall	.-968    	; 0x894 <wait_for_key_5s_line2>
     c5c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <PartFound>
PartFound = PART_NONE;
     c60:	f0 da       	rcall	.-2592   	; 0x242 <lcd_clear>
lcd_clear();
     c62:	8b e3       	ldi	r24, 0x3B	; 59
     c64:	90 e0       	ldi	r25, 0x00	; 0
lcd_MEM_string(C0_str);			//output "C0 "
     c66:	0b db       	rcall	.-2538   	; 0x27e <lcd_fix_string>
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	0e 94 41 11 	call	0x2282	; 0x2282 <ReadCapacity>
ReadCapacity(TP3, TP1);
     c70:	80 90 70 01 	lds	r8, 0x0170	; 0x800170 <cap+0x8>
     c74:	90 90 71 01 	lds	r9, 0x0171	; 0x800171 <cap+0x9>
adcmv[5] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:3
     c78:	a0 90 72 01 	lds	r10, 0x0172	; 0x800172 <cap+0xa>
     c7c:	b0 90 73 01 	lds	r11, 0x0173	; 0x800173 <cap+0xb>
     c80:	9c 86       	std	Y+12, r9	; 0x0c
     c82:	8b 86       	std	Y+11, r8	; 0x0b
     c84:	61 e0       	ldi	r22, 0x01	; 1
     c86:	82 e0       	ldi	r24, 0x02	; 2
     c88:	0e 94 41 11 	call	0x2282	; 0x2282 <ReadCapacity>
ReadCapacity(TP3, TP2);
     c8c:	c0 90 70 01 	lds	r12, 0x0170	; 0x800170 <cap+0x8>
     c90:	d0 90 71 01 	lds	r13, 0x0171	; 0x800171 <cap+0x9>
adcmv[6] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:3
     c94:	e0 90 72 01 	lds	r14, 0x0172	; 0x800172 <cap+0xa>
     c98:	f0 90 73 01 	lds	r15, 0x0173	; 0x800173 <cap+0xb>
     c9c:	de 86       	std	Y+14, r13	; 0x0e
     c9e:	cd 86       	std	Y+13, r12	; 0x0d
     ca0:	60 e0       	ldi	r22, 0x00	; 0
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	0e 94 41 11 	call	0x2282	; 0x2282 <ReadCapacity>
ReadCapacity(TP2, TP1);
     ca8:	00 91 70 01 	lds	r16, 0x0170	; 0x800170 <cap+0x8>
     cac:	10 91 71 01 	lds	r17, 0x0171	; 0x800171 <cap+0x9>
adcmv[2] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:2
     cb0:	1e 83       	std	Y+6, r17	; 0x06
     cb2:	0d 83       	std	Y+5, r16	; 0x05
     cb4:	62 e0       	ldi	r22, 0x02	; 2
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	0e 94 41 11 	call	0x2282	; 0x2282 <ReadCapacity>
ReadCapacity(TP1, TP3);
     cbc:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <cap+0x8>
     cc0:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <cap+0x9>
adcmv[1] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:1
     cc4:	9c 83       	std	Y+4, r25	; 0x04
     cc6:	8b 83       	std	Y+3, r24	; 0x03
     cc8:	62 e0       	ldi	r22, 0x02	; 2
ReadCapacity(TP2, TP3);
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	0e 94 41 11 	call	0x2282	; 0x2282 <ReadCapacity>
     cd0:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <cap+0x8>
adcmv[4] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:2
     cd4:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <cap+0x9>
     cd8:	9a 87       	std	Y+10, r25	; 0x0a
     cda:	89 87       	std	Y+9, r24	; 0x09
ReadCapacity(TP1, TP2);
     cdc:	61 e0       	ldi	r22, 0x01	; 1
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	0e 94 41 11 	call	0x2282	; 0x2282 <ReadCapacity>
adcmv[0] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:1
     ce4:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <cap+0x8>
     ce8:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <cap+0x9>
     cec:	9a 83       	std	Y+2, r25	; 0x02
     cee:	89 83       	std	Y+1, r24	; 0x01
if (UnCalibrated == 2)
     cf0:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <UnCalibrated>
     cf4:	22 30       	cpi	r18, 0x02	; 2
     cf6:	09 f0       	breq	.+2      	; 0xcfa <AutoCheck+0x1f4>
     cf8:	0c c1       	rjmp	.+536    	; 0xf12 <AutoCheck+0x40c>
  adcmv[3] = adcmv[0] + 2;		// mark as uncalibrated until Cap > 100nF has success
     cfa:	02 96       	adiw	r24, 0x02	; 2
     cfc:	98 87       	std	Y+8, r25	; 0x08
     cfe:	8f 83       	std	Y+7, r24	; 0x07
u2lcd_space(adcmv[5]);	//DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
     d00:	c4 01       	movw	r24, r8
     d02:	7c db       	rcall	.-2312   	; 0x3fc <u2lcd_space>
     d04:	c6 01       	movw	r24, r12
u2lcd_space(adcmv[6]);	//DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
     d06:	7a db       	rcall	.-2316   	; 0x3fc <u2lcd_space>
     d08:	b8 01       	movw	r22, r16
     d0a:	11 0f       	add	r17, r17
DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
     d0c:	88 0b       	sbc	r24, r24
     d0e:	99 0b       	sbc	r25, r25
     d10:	03 e0       	ldi	r16, 0x03	; 3
     d12:	26 e4       	ldi	r18, 0x46	; 70
     d14:	44 ef       	ldi	r20, 0xF4	; 244
     d16:	2e dc       	rcall	.-1956   	; 0x574 <DisplayValue>
     d18:	8e 01       	movw	r16, r28
     d1a:	0f 5f       	subi	r16, 0xFF	; 255
     d1c:	1f 4f       	sbci	r17, 0xFF	; 255
     d1e:	9e 01       	movw	r18, r28
     d20:	21 5f       	subi	r18, 0xF1	; 241
     d22:	3f 4f       	sbci	r19, 0xFF	; 255
     d24:	78 01       	movw	r14, r16
     d26:	f7 01       	movw	r30, r14
if ((adcmv[ww] > 190) || (adcmv[ww] < 10)) goto no_c0save;
     d28:	81 91       	ld	r24, Z+
     d2a:	91 91       	ld	r25, Z+
     d2c:	7f 01       	movw	r14, r30
     d2e:	0a 97       	sbiw	r24, 0x0a	; 10
     d30:	85 3b       	cpi	r24, 0xB5	; 181
for (ww=0;ww<7;ww++) {			//checking loop
     d32:	91 05       	cpc	r25, r1
     d34:	c8 f4       	brcc	.+50     	; 0xd68 <AutoCheck+0x262>
     d36:	2e 17       	cp	r18, r30
     d38:	3f 07       	cpc	r19, r31
     d3a:	a9 f7       	brne	.-22     	; 0xd26 <AutoCheck+0x220>
     d3c:	3c ec       	ldi	r19, 0xCC	; 204
  (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
     d3e:	c3 2e       	mov	r12, r19
     d40:	31 e0       	ldi	r19, 0x01	; 1
     d42:	d3 2e       	mov	r13, r19
     d44:	f8 01       	movw	r30, r16
     d46:	60 81       	ld	r22, Z
     d48:	0e 5f       	subi	r16, 0xFE	; 254
     d4a:	1f 4f       	sbci	r17, 0xFF	; 255
     d4c:	61 5f       	subi	r22, 0xF1	; 241
     d4e:	c6 01       	movw	r24, r12
     d50:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <eeprom_write_byte>
for (ww=0;ww<7;ww++) {
     d54:	ff ef       	ldi	r31, 0xFF	; 255
     d56:	cf 1a       	sub	r12, r31
lcd_line2();
     d58:	df 0a       	sbc	r13, r31
     d5a:	e0 16       	cp	r14, r16
lcd_MEM_string(OK_str);		// output "OK"
     d5c:	f1 06       	cpc	r15, r17
     d5e:	91 f7       	brne	.-28     	; 0xd44 <AutoCheck+0x23e>
     d60:	48 da       	rcall	.-2928   	; 0x1f2 <lcd_line2>
     d62:	8e ed       	ldi	r24, 0xDE	; 222
last_line_used = 2;
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	8b da       	rcall	.-2794   	; 0x27e <lcd_fix_string>
     d68:	82 e0       	ldi	r24, 0x02	; 2
wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
     d6a:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <last_line_used>
lcd_clear();
     d6e:	92 dd       	rcall	.-1244   	; 0x894 <wait_for_key_5s_line2>
     d70:	68 da       	rcall	.-2864   	; 0x242 <lcd_clear>
lcd_testpin(TP1);
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	20 da       	rcall	.-3008   	; 0x1b6 <lcd_testpin>
     d76:	84 e9       	ldi	r24, 0x94	; 148
lcd_MEM_string(CapZeich);	// "-||-"
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	81 da       	rcall	.-2814   	; 0x27e <lcd_fix_string>
     d7c:	82 e0       	ldi	r24, 0x02	; 2
     d7e:	1b da       	rcall	.-3018   	; 0x1b6 <lcd_testpin>
lcd_testpin(TP3);
     d80:	86 e7       	ldi	r24, 0x76	; 118
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	6e da       	rcall	.-2852   	; 0x262 <lcd_pgm_string>
lcd_MEM2_string(MinCap_str);	// " >100nF!"
     d86:	90 e4       	ldi	r25, 0x40	; 64
     d88:	f9 2e       	mov	r15, r25
     d8a:	10 e0       	ldi	r17, 0x00	; 0
     d8c:	2a e0       	ldi	r18, 0x0A	; 10
     d8e:	82 2e       	mov	r8, r18
     d90:	91 2c       	mov	r9, r1
cap_found = 0;
     d92:	a1 2c       	mov	r10, r1
   cap.cval /= 10;
     d94:	b1 2c       	mov	r11, r1
     d96:	42 de       	rcall	.-892    	; 0xa1c <init_parts>
     d98:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <PartFound>
     d9c:	60 e0       	ldi	r22, 0x00	; 0
  init_parts();
     d9e:	82 e0       	ldi	r24, 0x02	; 2
     da0:	0e 94 41 11 	call	0x2282	; 0x2282 <ReadCapacity>
  PartFound = PART_NONE;
     da4:	00 91 7a 01 	lds	r16, 0x017A	; 0x80017a <cap+0x12>
  ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     da8:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <cap>
     dac:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <cap+0x1>
     db0:	40 91 6a 01 	lds	r20, 0x016A	; 0x80016a <cap+0x2>
     db4:	50 91 6b 01 	lds	r21, 0x016B	; 0x80016b <cap+0x3>
     db8:	07 3f       	cpi	r16, 0xF7	; 247
     dba:	0c f4       	brge	.+2      	; 0xdbe <AutoCheck+0x2b8>
     dbc:	b1 c0       	rjmp	.+354    	; 0xf20 <AutoCheck+0x41a>
     dbe:	00 93 7a 01 	sts	0x017A, r16	; 0x80017a <cap+0x12>
  while (cap.cpre < -9) {
     dc2:	20 93 68 01 	sts	0x0168, r18	; 0x800168 <cap>
     dc6:	30 93 69 01 	sts	0x0169, r19	; 0x800169 <cap+0x1>
     dca:	40 93 6a 01 	sts	0x016A, r20	; 0x80016a <cap+0x2>
     dce:	50 93 6b 01 	sts	0x016B, r21	; 0x80016b <cap+0x3>
     dd2:	07 3f       	cpi	r16, 0xF7	; 247
  if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000) &&
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <AutoCheck+0x2d2>
     dd6:	ac c0       	rjmp	.+344    	; 0xf30 <AutoCheck+0x42a>
     dd8:	20 56       	subi	r18, 0x60	; 96
     dda:	31 09       	sbc	r19, r1
     ddc:	41 09       	sbc	r20, r1
     dde:	51 09       	sbc	r21, r1
     de0:	20 39       	cpi	r18, 0x90	; 144
     de2:	35 45       	sbci	r19, 0x55	; 85
     de4:	41 05       	cpc	r20, r1
     de6:	51 05       	cpc	r21, r1
     de8:	08 f0       	brcs	.+2      	; 0xdec <AutoCheck+0x2e6>
     dea:	a2 c0       	rjmp	.+324    	; 0xf30 <AutoCheck+0x42a>
    (load_diff > -150) && (load_diff < 150)) {
     dec:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <load_diff>
     df0:	70 91 7d 01 	lds	r23, 0x017D	; 0x80017d <load_diff+0x1>
     df4:	cb 01       	movw	r24, r22
     df6:	8b 56       	subi	r24, 0x6B	; 107
     df8:	9f 4f       	sbci	r25, 0xFF	; 255
     dfa:	8b 32       	cpi	r24, 0x2B	; 43
     dfc:	91 40       	sbci	r25, 0x01	; 1
     dfe:	08 f0       	brcs	.+2      	; 0xe02 <AutoCheck+0x2fc>
   cap_found++;
     e00:	97 c0       	rjmp	.+302    	; 0xf30 <AutoCheck+0x42a>
  if (cap_found > 4) {
     e02:	1f 5f       	subi	r17, 0xFF	; 255
     e04:	15 30       	cpi	r17, 0x05	; 5
     e06:	08 f4       	brcc	.+2      	; 0xe0a <AutoCheck+0x304>
     (void) eeprom_write_word((uint16_t *)(&ref_offset), load_diff);	// hold zero offset + slew rate dependend offset
     e08:	94 c0       	rjmp	.+296    	; 0xf32 <AutoCheck+0x42c>
     e0a:	83 ed       	ldi	r24, 0xD3	; 211
     e0c:	91 e0       	ldi	r25, 0x01	; 1
     e0e:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <eeprom_write_word>
     lcd_MEM2_string(REF_C_str);	// "REF_C="
     e12:	17 da       	rcall	.-3026   	; 0x242 <lcd_clear>
     e14:	8f e6       	ldi	r24, 0x6F	; 111
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	24 da       	rcall	.-3000   	; 0x262 <lcd_pgm_string>
     i2lcd(load_diff);		// lcd_string(itoa(load_diff, outval, 10));	//output REF_C_KORR
     e1a:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <load_diff>
     e1e:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <load_diff+0x1>
     e22:	d7 da       	rcall	.-2642   	; 0x3d2 <i2lcd>
     RefVoltage();			// new ref_mv_offs and RHmultip
     e24:	5a dd       	rcall	.-1356   	; 0x8da <RefVoltage>
   ADC_PORT =  TXD_VAL;	//ADC-Port 1 to GND
     e26:	18 b8       	out	0x08, r1	; 8
   ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	87 b9       	out	0x07, r24	; 7
   R_DDR = 1<<PIN_RH3;		//Pin 3 over R_H to GND
     e2c:	80 e2       	ldi	r24, 0x20	; 32
     e2e:	84 b9       	out	0x04, r24	; 4
      adcmv[0] = ReadADC(CAP_ADC);
     e30:	82 e0       	ldi	r24, 0x02	; 2
     e32:	8b dc       	rcall	.-1770   	; 0x74a <ReadADC>
     e34:	85 3d       	cpi	r24, 0xD5	; 213
   } while (adcmv[0] > 980);
     e36:	93 40       	sbci	r25, 0x03	; 3
     e38:	dc f7       	brge	.-10     	; 0xe30 <AutoCheck+0x32a>
     e3a:	14 b8       	out	0x04, r1	; 4
   R_DDR = 0;		//all Pins to input 
     e3c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <ADCconfig+0x3>
   ADCconfig.U_Bandgap = 0;	// do not use internal Ref
     e40:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <ADCconfig+0x2>
     e44:	82 e0       	ldi	r24, 0x02	; 2
   adcmv[0] = ReadADC(CAP_ADC);  // get cap voltage with VCC reference
     e46:	81 dc       	rcall	.-1790   	; 0x74a <ReadADC>
     e48:	7c 01       	movw	r14, r24
     e4a:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <adc_internal_reference>
   ADCconfig.U_Bandgap = adc_internal_reference;
     e4e:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <adc_internal_reference+0x1>
     e52:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <ADCconfig+0x3>
     e56:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <ADCconfig+0x2>
     e5a:	82 e0       	ldi	r24, 0x02	; 2
     e5c:	76 dc       	rcall	.-1812   	; 0x74a <ReadADC>
   adcmv[1] = ReadADC(CAP_ADC);	// get cap voltage with internal reference
     e5e:	6c 01       	movw	r12, r24
     e60:	cc 0c       	add	r12, r12
     e62:	dd 1c       	adc	r13, r13
   adcmv[1] += adcmv[1];		// double the value
     e64:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <ADCconfig+0x3>
   ADCconfig.U_Bandgap = 0;	// do not use internal Ref
     e68:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <ADCconfig+0x2>
   adcmv[2] = ReadADC(CAP_ADC);  // get cap voltage with VCC reference
     e6c:	82 e0       	ldi	r24, 0x02	; 2
     e6e:	6d dc       	rcall	.-1830   	; 0x74a <ReadADC>
     e70:	4c 01       	movw	r8, r24
   ADCconfig.U_Bandgap = adc_internal_reference;
     e72:	a0 90 63 01 	lds	r10, 0x0163	; 0x800163 <adc_internal_reference>
     e76:	b0 90 64 01 	lds	r11, 0x0164	; 0x800164 <adc_internal_reference+0x1>
     e7a:	b0 92 2a 01 	sts	0x012A, r11	; 0x80012a <ADCconfig+0x3>
     e7e:	a0 92 29 01 	sts	0x0129, r10	; 0x800129 <ADCconfig+0x2>
   lcd_line2();
     e82:	b7 d9       	rcall	.-3218   	; 0x1f2 <lcd_line2>
     e84:	88 e6       	ldi	r24, 0x68	; 104
   lcd_MEM2_string(REF_R_str);	// "REF_R="
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	ec d9       	rcall	.-3112   	; 0x262 <lcd_pgm_string>
     e8a:	85 ed       	ldi	r24, 0xD5	; 213
   udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
     e8c:	91 e0       	ldi	r25, 0x01	; 1
     e8e:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <eeprom_read_byte>
   udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1])) * adc_internal_reference / adcmv[1])+REF_R_KORR;
     e92:	18 2f       	mov	r17, r24
     e94:	d7 01       	movw	r26, r14
     e96:	a8 0d       	add	r26, r8
     e98:	b9 1d       	adc	r27, r9
     e9a:	ac 19       	sub	r26, r12
     e9c:	bd 09       	sbc	r27, r13
     e9e:	95 01       	movw	r18, r10
     ea0:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <__usmulhisi3>
     ea4:	96 01       	movw	r18, r12
     ea6:	0d 2c       	mov	r0, r13
     ea8:	00 0c       	add	r0, r0
     eaa:	44 0b       	sbc	r20, r20
   udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
     eac:	55 0b       	sbc	r21, r21
     eae:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <__divmodsi4>
   (void) eeprom_write_byte((uint8_t *)(&RefDiff), (uint8_t)udiff2);	// hold offset for true reference Voltage
     eb2:	1d 5f       	subi	r17, 0xFD	; 253
     eb4:	12 0f       	add	r17, r18
     eb6:	61 2f       	mov	r22, r17
     eb8:	85 ed       	ldi	r24, 0xD5	; 213
   i2lcd(udiff2);		// output correction voltage
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <eeprom_write_byte>
     ec0:	81 2f       	mov	r24, r17
     ec2:	01 2e       	mov	r0, r17
   RefVoltage();			// set new ADCconfig.U_Bandgap
     ec4:	00 0c       	add	r0, r0
     ec6:	99 0b       	sbc	r25, r25
   last_line_used = 2;
     ec8:	84 da       	rcall	.-2808   	; 0x3d2 <i2lcd>
     eca:	07 dd       	rcall	.-1522   	; 0x8da <RefVoltage>
     ecc:	82 e0       	ldi	r24, 0x02	; 2
   wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
     ece:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <last_line_used>
   UnCalibrated = 0;		// clear the UnCalibrated Flag
     ed2:	e0 dc       	rcall	.-1600   	; 0x894 <wait_for_key_5s_line2>
   lcd_cursor_off();		// switch cursor off
     ed4:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <UnCalibrated>
   cap_found = eeprom_read_byte((uint8_t *)&c_zero_tab[0]);	// read first capacity zero offset
     ed8:	8c e0       	ldi	r24, 0x0C	; 12
     eda:	7f d9       	rcall	.-3330   	; 0x1da <lcd_command>
     edc:	8c ec       	ldi	r24, 0xCC	; 204
   eeprom_write_byte((uint8_t *)&c_zero_tab[3], cap_found);	// mark as calibrated permanent
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <eeprom_read_byte>
     ee4:	68 2f       	mov	r22, r24
     ee6:	8f ec       	ldi	r24, 0xCF	; 207
ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
     ee8:	91 e0       	ldi	r25, 0x01	; 1
     eea:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <eeprom_write_byte>
lcd_clear();
     eee:	89 e1       	ldi	r24, 0x19	; 25
     ef0:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <ADCconfig>
lcd_MEM_string(VERSION_str);	//"Version ..."
     ef4:	a6 d9       	rcall	.-3252   	; 0x242 <lcd_clear>
     ef6:	8d e4       	ldi	r24, 0x4D	; 77
     ef8:	90 e0       	ldi	r25, 0x00	; 0
lcd_line2();
     efa:	c1 d9       	rcall	.-3198   	; 0x27e <lcd_fix_string>
     efc:	7a d9       	rcall	.-3340   	; 0x1f2 <lcd_line2>
lcd_MEM_string(ATE);		//"Selftest End"
     efe:	87 ee       	ldi	r24, 0xE7	; 231
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	bd d9       	rcall	.-3206   	; 0x27e <lcd_fix_string>
     f04:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <PartFound>
PartFound = PART_NONE;
     f08:	82 e0       	ldi	r24, 0x02	; 2
     last_line_used = 2;
     f0a:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <last_line_used>
     f0e:	c2 dc       	rcall	.-1660   	; 0x894 <wait_for_key_5s_line2>
wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
     f10:	08 ce       	rjmp	.-1008   	; 0xb22 <AutoCheck+0x1c>
     f12:	98 87       	std	Y+8, r25	; 0x08
     f14:	8f 83       	std	Y+7, r24	; 0x07
  adcmv[3] = adcmv[0];			// mark as calibrated, short calibration is finished
     f16:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <UnCalibrated>
  UnCalibrated = 0;			// clear the UnCalibrated Flag
     f1a:	8c e0       	ldi	r24, 0x0C	; 12
     f1c:	5e d9       	rcall	.-3396   	; 0x1da <lcd_command>
  lcd_cursor_off();			// switch cursor off
     f1e:	f0 ce       	rjmp	.-544    	; 0xd00 <AutoCheck+0x1fa>
     f20:	0f 5f       	subi	r16, 0xFF	; 255
     f22:	ca 01       	movw	r24, r20
     f24:	b9 01       	movw	r22, r18
     f26:	a5 01       	movw	r20, r10
   cap.cval /= 10;
     f28:	94 01       	movw	r18, r8
     f2a:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
     f2e:	44 cf       	rjmp	.-376    	; 0xdb8 <AutoCheck+0x2b2>
     f30:	10 e0       	ldi	r17, 0x00	; 0
     f32:	5f d9       	rcall	.-3394   	; 0x1f2 <lcd_line2>
     f34:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <cap>
  lcd_line2();
     f38:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <cap+0x1>
  DisplayValue(cap.cval,cap.cpre,'F',4);
     f3c:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <cap+0x2>
     f40:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <cap+0x3>
     f44:	04 e0       	ldi	r16, 0x04	; 4
     f46:	26 e4       	ldi	r18, 0x46	; 70
     f48:	40 91 7a 01 	lds	r20, 0x017A	; 0x80017a <cap+0x12>
     f4c:	13 db       	rcall	.-2522   	; 0x574 <DisplayValue>
     f4e:	eb d9       	rcall	.-3114   	; 0x326 <lcd_clear_line>
     f50:	dc db       	rcall	.-2120   	; 0x70a <wait200ms>
     f52:	fa 94       	dec	r15
  lcd_clear_line();
     f54:	f1 10       	cpse	r15, r1
     f56:	1f cf       	rjmp	.-450    	; 0xd96 <AutoCheck+0x290>
  wait_about200ms();			// wait additional time
     f58:	ca cf       	rjmp	.-108    	; 0xeee <AutoCheck+0x3e8>

00000f5a <mark_as_uncalibrated>:
     f5a:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <UnCalibrated>
for (ww=0;ww<64;ww++) {
     f5e:	81 11       	cpse	r24, r1
     f60:	0d c0       	rjmp	.+26     	; 0xf7c <mark_as_uncalibrated+0x22>
     f62:	8c ec       	ldi	r24, 0xCC	; 204
void mark_as_uncalibrated( void) {
 uint8_t ii;
 if (!UnCalibrated) {
     f64:	91 e0       	ldi	r25, 0x01	; 1
     f66:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <eeprom_read_byte>
     f6a:	61 e0       	ldi	r22, 0x01	; 1
    // equipment has changed, zero capacity value is too high or zero resistance is too high
    // but the device is marked as Calibrated.
    ii = eeprom_read_byte((uint8_t *)&c_zero_tab[0]);	// read first zero offset
     f6c:	68 0f       	add	r22, r24
     f6e:	8f ec       	ldi	r24, 0xCF	; 207
     f70:	91 e0       	ldi	r25, 0x01	; 1
    ii++;
     f72:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <eeprom_write_byte>
    // make the unused c_zero_tab[3] different to c_zero_tab[0] to mark uncalibrated 
    eeprom_write_byte((uint8_t *)&c_zero_tab[3], ii);	// mark uncalibrated permanent
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <UnCalibrated>
     f7c:	08 95       	ret

00000f7e <GetIr>:
    UnCalibrated = 1;		// set back to uncalibrated
     f7e:	ef 92       	push	r14
     f80:	ff 92       	push	r15
     f82:	0f 93       	push	r16
 }
}
     f84:	1f 93       	push	r17
/* Get residual current in reverse direction of a diode */ 



//=================================================================
void GetIr(uint8_t hipin, uint8_t lopin) {
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	d6 2f       	mov	r29, r22
     f8c:	e8 2f       	mov	r30, r24
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	ef 57       	subi	r30, 0x7F	; 127
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
  ADC_DDR = HiADC | TXD_MSK;		// switch High Pin direct to VCC
  R_PORT = 0;				// switch R-Port to GND
  LoPinR_L = pgm_read_byte(&PinRHRLADCtab[lopin-TP_MIN]);  //R_L mask for LowPin R_L load
#else
  uint8_t LoPinR_L;
  HiADC = pgm_read_byte(&PinRLRHADCtab[hipin-TP_MIN]+3);	// Table of ADC pins including | TXD_VAL
     f94:	e4 91       	lpm	r30, Z
     f96:	e8 b9       	out	0x08, r30	; 8
     f98:	e7 b9       	out	0x07, r30	; 7
     f9a:	15 b8       	out	0x05, r1	; 5
     f9c:	e6 2f       	mov	r30, r22
  ADC_PORT = HiADC;		 	// switch ADC port to high level
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
  ADC_DDR = HiADC | TXD_MSK;		// switch High Pin direct to VCC
     fa0:	e2 58       	subi	r30, 0x82	; 130
  R_PORT = 0;				// switch R-Port to GND
     fa2:	ff 4f       	sbci	r31, 0xFF	; 255
  LoPinR_L = pgm_read_byte(&PinRLRHADCtab[lopin-TP_MIN]);  //R_L mask for LowPin R_L load
     fa4:	e4 91       	lpm	r30, Z
     fa6:	e4 b9       	out	0x04, r30	; 4
     fa8:	ce 2f       	mov	r28, r30
     faa:	cc 0f       	add	r28, r28
     fac:	88 e8       	ldi	r24, 0x88	; 136
  // R_H Pin must always be one pin number higher
#endif
  R_DDR = LoPinR_L;		// switch R_L port for LowPin to output (GND)
     fae:	e8 2e       	mov	r14, r24
     u_res_old = u_res;
     u_res = W20msReadADC(lopin);		// read voltage
#if (((PIN_RL1 + 1) != PIN_RH1) || ((PIN_RL2 + 1) != PIN_RH2) || ((PIN_RL3 + 1) != PIN_RH3))
     R_DDR = pgm_read_byte(&PinRHRLADCtab[lopin-TP_MIN+3]);  //R_H mask for LowPin R_H load
#else
     R_DDR = LoPinR_L + LoPinR_L;		// switch R_H port for LowPin to output (GND)
     fb0:	83 e1       	ldi	r24, 0x13	; 19
     fb2:	f8 2e       	mov	r15, r24
  u_res = U_VCC;
     fb4:	8d 2f       	mov	r24, r29
     fb6:	c6 db       	rcall	.-2164   	; 0x744 <W20msReadADC>
     fb8:	8c 01       	movw	r16, r24
     fba:	c4 b9       	out	0x04, r28	; 4
     u_res = W20msReadADC(lopin);		// read voltage
     fbc:	8e 15       	cp	r24, r14
     fbe:	9f 05       	cpc	r25, r15
     fc0:	f8 f0       	brcs	.+62     	; 0x1000 <GetIr+0x82>
     fc2:	89 2b       	or	r24, r25
     R_DDR = LoPinR_L + LoPinR_L;		// switch R_H port for LowPin to output (GND)
     fc4:	c1 f0       	breq	.+48     	; 0xff6 <GetIr+0x78>
#endif
  } while (u_res < u_res_old);
     fc6:	82 e7       	ldi	r24, 0x72	; 114
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	59 d9       	rcall	.-3406   	; 0x27e <lcd_fix_string>
  if (u_res == 0) return;		// no Output, if no current in reverse direction
     fcc:	d8 01       	movw	r26, r16
     fce:	20 ea       	ldi	r18, 0xA0	; 160
 #define IR_DIGITS 3
  lcd_line4();				// use Line 4 for Ir output
  lcd_MEM_string(Ir_str);		// output text "Ir="
#else
 #define IR_DIGITS 2
  lcd_MEM_string(Ir_str);		// output text "  Ir="
     fd0:	36 e8       	ldi	r19, 0x86	; 134
     fd2:	41 e0       	ldi	r20, 0x01	; 1
     fd4:	50 e0       	ldi	r21, 0x00	; 0
     fd6:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <__muluhisi3>
#ifdef WITH_IRMICRO
  unsigned int ir_micro;
  if (u_res < 2500) {
#endif
     /* R_H_VAL has units of 10 Ohm, u_res has units of mV, ir_nano has units of nA */
     ir_nano = (unsigned long)(u_res * 100000UL) / R_H_VAL;
     fda:	28 e9       	ldi	r18, 0x98	; 152
     fdc:	37 eb       	ldi	r19, 0xB7	; 183
     fde:	40 e0       	ldi	r20, 0x00	; 0
     fe0:	50 e0       	ldi	r21, 0x00	; 0
     fe2:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
     fe6:	c9 01       	movw	r24, r18
     fe8:	22 e0       	ldi	r18, 0x02	; 2
     fea:	41 e4       	ldi	r20, 0x41	; 65
     fec:	67 ef       	ldi	r22, 0xF7	; 247
     fee:	6f db       	rcall	.-2338   	; 0x6ce <DisplayValue16>
     ff0:	17 b8       	out	0x07, r1	; 7
     ff2:	18 b8       	out	0x08, r1	; 8
     DisplayValue16(ir_nano,-9,'A',2);	// output two digits of current with nA units
     ff4:	14 b8       	out	0x04, r1	; 4
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	e6 e0       	ldi	r30, 0x06	; 6
     ffc:	0c 94 37 1f 	jmp	0x3e6e	; 0x3e6e <__epilogue_restores__+0x18>
     ir_micro = (unsigned long)(u_res * 10000UL) / RR680MI;
     DisplayValue16(ir_micro,-6,'A',IR_DIGITS);	// output 2 or 3 digits of current in uA units
  }
#endif
  ADC_DDR = TXD_MSK;			// switch off
  ADC_PORT = TXD_VAL;			// switch off
    1000:	78 01       	movw	r14, r16
  R_DDR = 0;				// switch off current
    1002:	d8 cf       	rjmp	.-80     	; 0xfb4 <GetIr+0x36>

00001004 <Battery_check>:

//	  Calibrate_UR();		// get Ref Voltages and Pin resistance
//        lcd_line1();			// Cursor to 1. row, column 1
	  
#ifdef BAT_CHECK
void Battery_check(void) {
    1004:	0f 93       	push	r16
    1006:	1f 93       	push	r17
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
 uint16_t bat_voltage;
 uint16_t bat_adc;
  // Battery check is selected
  ReadADC(TPBAT);	//Dummy-Readout
    100c:	85 e0       	ldi	r24, 0x05	; 5
    100e:	9d db       	rcall	.-2246   	; 0x74a <ReadADC>
  bat_adc = W5msReadADC(TPBAT); 	//with 5V reference
    1010:	85 e0       	ldi	r24, 0x05	; 5
    1012:	9a db       	rcall	.-2252   	; 0x748 <W5msReadADC>
    1014:	8c 01       	movw	r16, r24
  // A good result can be get with multiply by 4 and divide by 10 (about 0.75%).
  #if BAT_NUMERATOR <= (0xffff/U_VCC)
	  bat_voltage = (bat_adc*BAT_NUMERATOR)/BAT_DENOMINATOR + BAT_OUT;
  #else
   #if (BAT_NUMERATOR == 133) && (BAT_DENOMINATOR == 33)
	  bat_voltage = (bat_adc*4)+BAT_OUT;		// usually output only 2 digits
    1016:	ec 01       	movw	r28, r24
    1018:	cc 0f       	add	r28, r28
    101a:	dd 1f       	adc	r29, r29
    101c:	cc 0f       	add	r28, r28
    101e:	dd 1f       	adc	r29, r29
    1020:	ca 56       	subi	r28, 0x6A	; 106
    1022:	df 4f       	sbci	r29, 0xFF	; 255
   #else
	  bat_voltage = ((unsigned long)bat_adc*BAT_NUMERATOR)/BAT_DENOMINATOR + BAT_OUT;
   #endif
  #endif
  #if FLASHEND > 0x1fff
          DC_Pwr_mode = 0;
    1024:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <DC_Pwr_mode>
   #ifdef DC_PWR
          if ((bat_voltage < 900) || (bat_voltage > DC_PWR))
   #else
          if (bat_voltage < 900) 
    1028:	c4 38       	cpi	r28, 0x84	; 132
    102a:	83 e0       	ldi	r24, 0x03	; 3
    102c:	d8 07       	cpc	r29, r24
    102e:	60 f4       	brcc	.+24     	; 0x1048 <Battery_check+0x44>
   #endif
          {
             // no battery present, don't check,
	     lcd_MEM_string(DC_Pwr_Mode_str);	// "DC Pwr Mode"
    1030:	82 ed       	ldi	r24, 0xD2	; 210
    1032:	90 e0       	ldi	r25, 0x00	; 0
             lcd_clear_line();			// clear to end of line
    1034:	24 d9       	rcall	.-3512   	; 0x27e <lcd_fix_string>
    1036:	77 d9       	rcall	.-3346   	; 0x326 <lcd_clear_line>
             DC_Pwr_mode = 1;
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <DC_Pwr_mode>
     lcd_MEM_string(BatWeak);		//Battery weak
  } else { // Battery-voltage OK
     lcd_MEM_string(OK_str); 		// "OK"
  }
  lcd_clear_line();			// clear to end of line
};
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	1f 91       	pop	r17
    1044:	0f 91       	pop	r16
         lcd_MEM_string(Bat_str);		//output: "Bat. "
    1046:	08 95       	ret
    1048:	81 ee       	ldi	r24, 0xE1	; 225
	 Display_mV(bat_voltage,2);		// Display 2 Digits of this 10mV units
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	18 d9       	rcall	.-3536   	; 0x27e <lcd_fix_string>
    104e:	62 e0       	ldi	r22, 0x02	; 2
    1050:	ce 01       	movw	r24, r28
         lcd_space();
    1052:	48 db       	rcall	.-2416   	; 0x6e4 <Display_mV>
    1054:	b3 d8       	rcall	.-3738   	; 0x1bc <lcd_space>
  if (bat_adc <  WARN_LEVEL) {
    1056:	0a 3f       	cpi	r16, 0xFA	; 250
    1058:	86 e0       	ldi	r24, 0x06	; 6
    105a:	18 07       	cpc	r17, r24
     if(bat_adc < POOR_LEVEL) {	
    105c:	78 f4       	brcc	.+30     	; 0x107c <Battery_check+0x78>
	lcd_MEM_string(BatEmpty);	//Battery empty!
    105e:	03 33       	cpi	r16, 0x33	; 51
    1060:	16 40       	sbci	r17, 0x06	; 6
    1062:	38 f4       	brcc	.+14     	; 0x1072 <Battery_check+0x6e>
        lcd_clear_line();			// clear to end of line
    1064:	89 e5       	ldi	r24, 0x59	; 89
    1066:	91 e0       	ldi	r25, 0x01	; 1
	wait_about5s();			// Let time to read the "empty" message
    1068:	0a d9       	rcall	.-3564   	; 0x27e <lcd_fix_string>
    106a:	5d d9       	rcall	.-3398   	; 0x326 <lcd_clear_line>
        switch_tester_off();		// switch power off
    106c:	46 db       	rcall	.-2420   	; 0x6fa <wait5s>
    106e:	f9 dc       	rcall	.-1550   	; 0xa62 <switch_tester_off>
	return;
    1070:	e6 cf       	rjmp	.-52     	; 0x103e <Battery_check+0x3a>
     lcd_MEM_string(BatWeak);		//Battery weak
    1072:	80 e6       	ldi	r24, 0x60	; 96
    1074:	91 e0       	ldi	r25, 0x01	; 1
     lcd_MEM_string(OK_str); 		// "OK"
    1076:	03 d9       	rcall	.-3578   	; 0x27e <lcd_fix_string>
    1078:	56 d9       	rcall	.-3412   	; 0x326 <lcd_clear_line>
  lcd_clear_line();			// clear to end of line
    107a:	e1 cf       	rjmp	.-62     	; 0x103e <Battery_check+0x3a>
    107c:	8e ed       	ldi	r24, 0xDE	; 222
    107e:	90 e0       	ldi	r25, 0x00	; 0
     lcd_MEM_string(OK_str); 		// "OK"
    1080:	fa cf       	rjmp	.-12     	; 0x1076 <Battery_check+0x72>

00001082 <CheckPins>:
    1082:	a9 e1       	ldi	r26, 0x19	; 25
    1084:	b0 e0       	ldi	r27, 0x00	; 0
}
#endif

//******************************************************************
void CheckPins(uint8_t HighPin, uint8_t LowPin, uint8_t TristatePin)
  {
    1086:	e7 e4       	ldi	r30, 0x47	; 71
    1088:	f8 e0       	ldi	r31, 0x08	; 8
    108a:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <__prologue_saves__>
    108e:	88 8f       	std	Y+24, r24	; 0x18
    1090:	69 8f       	std	Y+25, r22	; 0x19
    1092:	24 2e       	mov	r2, r20
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
    1094:	a8 95       	wdr
  addr = &PinRLRHADCtab[LowPin-TP_MIN];		// Address of combined RL / RH / ADC pin table
    1096:	09 8d       	ldd	r16, Y+25	; 0x19
    1098:	e0 2f       	mov	r30, r16
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	e2 58       	subi	r30, 0x82	; 130
    109e:	ff 4f       	sbci	r31, 0xFF	; 255
  LoPinRL = pgm_read_byte(addr);		// instruction for LowPin R_L
    10a0:	14 91       	lpm	r17, Z
    10a2:	1d 87       	std	Y+13, r17	; 0x0d
#if FLASHEND > 0x1fff
 #if (((PIN_RL1 + 1) != PIN_RH1) || ((PIN_RL2 + 1) != PIN_RH2) || ((PIN_RL3 + 1) != PIN_RH3))
  addr += 3;			// address of PinRHtab[LowPin]
  LoPinRH = pgm_read_byte(addr);		// instruction for LowPin R_H
 #else
  LoPinRH = LoPinRL + LoPinRL;				// instruction for LowPin R_H
    10a4:	11 0f       	add	r17, r17
    10a6:	1f 8b       	std	Y+23, r17	; 0x17
 #endif
  addr += 3;			// address of PinADCtab[LowPin]
    10a8:	33 96       	adiw	r30, 0x03	; 3
  addr += 6;			// address of PinADCtab[LowPin]
 #else
  addr += 3;			// address of PinADCtab[LowPin], table PinRHtab is missing
 #endif
#endif
  LoADCp = pgm_read_byte(addr);		// instruction for ADC Low-Pin, including | TXD_VAL
    10aa:	04 91       	lpm	r16, Z
    10ac:	09 83       	std	Y+1, r16	; 0x01

  addr = &PinRLRHADCtab[TristatePin-TP_MIN];
    10ae:	e4 2f       	mov	r30, r20
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	e2 58       	subi	r30, 0x82	; 130
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
  TriPinRL = pgm_read_byte(addr);	// instruction for TristatePin R_L
    10b6:	94 90       	lpm	r9, Z
  TriPinRH = pgm_read_byte(addr);	// instruction for TristatePin R_H
#else
  TriPinRH = TriPinRL + TriPinRL;			// instruction for TristatePin R_H
#endif
#ifdef SHOW_R_DS
  addr += 3;			// address of PinADCtab[TristatePin]
    10b8:	33 96       	adiw	r30, 0x03	; 3
  TriADCp = pgm_read_byte(addr);	// instruction for ADC Tristate-Pin, including | TXD_VAL
    10ba:	14 91       	lpm	r17, Z
#endif

  addr = &PinRLRHADCtab[HighPin-TP_MIN];
    10bc:	e8 2f       	mov	r30, r24
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	e2 58       	subi	r30, 0x82	; 130
    10c2:	ff 4f       	sbci	r31, 0xFF	; 255
  HiPinRL = pgm_read_byte(addr);		// instruction for HighPin R_L
    10c4:	84 90       	lpm	r8, Z
#if (((PIN_RL1 + 1) != PIN_RH1) || ((PIN_RL2 + 1) != PIN_RH2) || ((PIN_RL3 + 1) != PIN_RH3))
  addr += 3;			// address of PinRHtab[HighPin]
  HiPinRH = pgm_read_byte(addr);		// instruction for HighPin R_H
#else
  HiPinRH = HiPinRL + HiPinRL;				// instruction for HighPin R_H
    10c6:	08 2d       	mov	r16, r8
    10c8:	00 0f       	add	r16, r16
    10ca:	0e 87       	std	Y+14, r16	; 0x0e
#endif
  addr += 3;			// address of PinADCtab[HighPin]
    10cc:	33 96       	adiw	r30, 0x03	; 3
  HiADCp = pgm_read_byte(addr);		// instruction for ADC High-Pin, including | TXD_VAL 
    10ce:	34 90       	lpm	r3, Z
  }
#else
  // first try the common emitter circuit for P-Channel type
     uint16_t v_change_n;
     uint16_t v_change_p;
  R_PORT = TriPinRL;			//resistor-Port TriState to 1
    10d0:	95 b8       	out	0x05, r9	; 5
  R_DDR = LoPinRL | TriPinRL;		// resistor-Port Low-Pin to 0
    10d2:	0d 85       	ldd	r16, Y+13	; 0x0d
    10d4:	09 29       	or	r16, r9
    10d6:	0f 83       	std	Y+7, r16	; 0x07
    10d8:	04 b9       	out	0x04, r16	; 4
  ADC_DDR = HiADCm;		//High-Pin to output
    10da:	37 b8       	out	0x07, r3	; 7
  ADC_PORT = HiADCp;		//High-Pin fix to Vcc
    10dc:	38 b8       	out	0x08, r3	; 8
  //for some MOSFET the gate (TristatePin) must be discharged
  adc.vCEs = W5msReadADC(LowPin);	// lp1 is the voltage at 680 Ohm with + Gate
    10de:	89 8d       	ldd	r24, Y+25	; 0x19
    10e0:	33 db       	rcall	.-2458   	; 0x748 <W5msReadADC>
    10e2:	7c 01       	movw	r14, r24
 #ifdef WITH_PUT
  R_PORT = TriPinRL | TriPinRH;
  R_DDR = LoPinRL | TriPinRH;           
  adc.lp_otrh = W5msReadADC(LowPin);	//read voltage of Low-Pin  , with tri-state ping to plus via RH; prevents accidental triggering of PUT
 #endif
  R_DDR = LoPinRL;		// resistor-Port Low-Pin to 0
    10e4:	0d 85       	ldd	r16, Y+13	; 0x0d
    10e6:	04 b9       	out	0x04, r16	; 4
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin  , without Gate current (+)
    10e8:	89 8d       	ldd	r24, Y+25	; 0x19
    10ea:	2e db       	rcall	.-2468   	; 0x748 <W5msReadADC>
    10ec:	8a 83       	std	Y+2, r24	; 0x02
    10ee:	09 2f       	mov	r16, r25
  R_DDR = 0;
    10f0:	14 b8       	out	0x04, r1	; 4
  wait10ms();	 			// release all current (clear TRIAC and Thyristor)
    10f2:	11 db       	rcall	.-2526   	; 0x716 <wait10ms>
    10f4:	15 b8       	out	0x05, r1	; 5
  R_PORT = 0;
    10f6:	2f 81       	ldd	r18, Y+7	; 0x07
  R_DDR = LoPinRL | TriPinRL;		// start current again
    10f8:	24 b9       	out	0x04, r18	; 4
  adc.lp2 = W5msReadADC(LowPin);	// lp2 is the voltage at 680 Ohm with - Gate
    10fa:	89 8d       	ldd	r24, Y+25	; 0x19
    10fc:	25 db       	rcall	.-2486   	; 0x748 <W5msReadADC>
  v_change_p = abs_diff(adc.lp2, adc.vCEs);
    10fe:	b7 01       	movw	r22, r14
    1100:	80 db       	rcall	.-2304   	; 0x802 <abs_diff>
    1102:	5c 01       	movw	r10, r24
    1104:	39 81       	ldd	r19, Y+1	; 0x01
     // switch to common emitter for NPN or N-channel FET
     ADC_DDR = LoADCm;		//Low-Pin to output
    1106:	37 b9       	out	0x07, r19	; 7
    1108:	18 b8       	out	0x08, r1	; 8
     ADC_PORT = TXD_VAL;		//Low-Pin fix to GND
    110a:	49 2d       	mov	r20, r9
     R_PORT = HiPinRL | TriPinRL;
    110c:	48 29       	or	r20, r8
    110e:	4b 83       	std	Y+3, r20	; 0x03
     R_DDR = HiPinRL | TriPinRL;	// resistor-Port High-Pin and TriState-Pin to 1
    1110:	45 b9       	out	0x05, r20	; 5
     adc.hp1 = vcc_diff(W5msReadADC(HighPin));		// voltage at 680 Ohm with + Gate
    1112:	44 b9       	out	0x04, r20	; 4
    1114:	88 8d       	ldd	r24, Y+24	; 0x18
    1116:	18 db       	rcall	.-2512   	; 0x748 <W5msReadADC>
    1118:	7a db       	rcall	.-2316   	; 0x80e <vcc_diff>
     R_PORT = 0;			// clear Thyristor
    111a:	6c 01       	movw	r12, r24
     wait10ms();				// release all current (clear TRIAC and Thyristor)
    111c:	15 b8       	out	0x05, r1	; 5
     R_PORT = HiPinRL;			//resistor-Port High-Pin to +, TriState to 0
     adc.hp2 = vcc_diff(W5msReadADC(HighPin));	// voltage at 680 Ohm with - Gate
    111e:	fb da       	rcall	.-2570   	; 0x716 <wait10ms>
    1120:	85 b8       	out	0x05, r8	; 5
    1122:	88 8d       	ldd	r24, Y+24	; 0x18
    1124:	11 db       	rcall	.-2526   	; 0x748 <W5msReadADC>
    1126:	73 db       	rcall	.-2330   	; 0x80e <vcc_diff>
     R_DDR = HiPinRL;			// resistor-Port High-Pin to 1, TriState open
    1128:	3c 01       	movw	r6, r24
     adc.hp3 = vcc_diff(W5msReadADC(HighPin)); // voltage at 680 Ohm with open Gate
    112a:	84 b8       	out	0x04, r8	; 4
    112c:	88 8d       	ldd	r24, Y+24	; 0x18
    112e:	0c db       	rcall	.-2536   	; 0x748 <W5msReadADC>
    1130:	6e db       	rcall	.-2340   	; 0x80e <vcc_diff>
    1132:	2c 01       	movw	r4, r24
    1134:	b3 01       	movw	r22, r6
     v_change_n = abs_diff(adc.hp1, adc.hp2);
    1136:	c6 01       	movw	r24, r12
    1138:	64 db       	rcall	.-2360   	; 0x802 <abs_diff>
    113a:	80 32       	cpi	r24, 0x20	; 32
    113c:	a1 e0       	ldi	r26, 0x01	; 1
  } else {
     // if ((adc.vCEs+288) > adc.lp2) goto checkDiode;	// no significant change
     if (abs_diff(adc.lp2, adc.vCEs) < 288) goto checkDiode;    // no significant change
  }
#endif
  if ((v_change_n < 288)  && (v_change_p < 288)) goto checkDiode; // no significant change
    113e:	9a 07       	cpc	r25, r26
    1140:	30 f4       	brcc	.+12     	; 0x114e <CheckPins+0xcc>
    1142:	b0 e2       	ldi	r27, 0x20	; 32
    1144:	ab 16       	cp	r10, r27
    1146:	b1 e0       	ldi	r27, 0x01	; 1
    1148:	bb 06       	cpc	r11, r27
    114a:	08 f4       	brcc	.+2      	; 0x114e <CheckPins+0xcc>
    114c:	a2 c5       	rjmp	.+2884   	; 0x1c92 <CheckPins+0xc10>
    114e:	a6 0c       	add	r10, r6
    1150:	b7 1c       	adc	r11, r7
//  if ((v_change_n+150) > (v_change_p + adc.hp3))
  if ((adc.hp2 + v_change_p) < (adc.vCEs + v_change_n))
    1152:	8e 0d       	add	r24, r14
    1154:	9f 1d       	adc	r25, r15
    1156:	a8 16       	cp	r10, r24
    1158:	b9 06       	cpc	r11, r25
    115a:	18 f0       	brcs	.+6      	; 0x1162 <CheckPins+0xe0>
    115c:	37 01       	movw	r6, r14
    115e:	4a 80       	ldd	r4, Y+2	; 0x02
  adc.vCEs = W5msReadADC(LowPin);	// lp1 is the voltage at 680 Ohm with + Gate
    1160:	50 2e       	mov	r5, r16
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin  , without Gate current (+)
    1162:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <ntrans+0xf>
  // a TRIAC is marked as two transistors at least (2 or 3)
  // both of NPN transistors (normal and inverse) are found, if ntrans.count == 2
  // both of PNP transistors (normal and inverse) are found, if ptrans.count == 2
  // If Transistor with protection diode is checked, all results are found,
  // if ntrans.count == 1 and ptrans.count == 1
  if ((ntrans.count + ptrans.count) > 1) {
    1166:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <ptrans+0xf>
    116a:	82 0f       	add	r24, r18
    116c:	99 27       	eor	r25, r25
    116e:	99 1f       	adc	r25, r25
    1170:	02 97       	sbiw	r24, 0x02	; 2
    1172:	4c f0       	brlt	.+18     	; 0x1186 <CheckPins+0x104>
    1174:	21 30       	cpi	r18, 0x01	; 1
    1176:	09 f0       	breq	.+2      	; 0x117a <CheckPins+0xf8>
     // all transistors found, no more search is needed
     // but TRIAC can be detected as NPNp with same pins as PNPn
     if (!((ntrans.count == 1) && (ntrans.b == ptrans.b))) {
    1178:	cb c4       	rjmp	.+2454   	; 0x1b10 <CheckPins+0xa8e>
    117a:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <ntrans+0xc>
    117e:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <ptrans+0xc>
    1182:	98 13       	cpse	r25, r24
    1184:	c5 c4       	rjmp	.+2442   	; 0x1b10 <CheckPins+0xa8e>
    1186:	b9 2c       	mov	r11, r9
    1188:	bb 0c       	add	r11, r11
  TriPinRH = TriPinRL + TriPinRL;			// instruction for TristatePin R_H
    118a:	ad 84       	ldd	r10, Y+13	; 0x0d
    118c:	ab 28       	or	r10, r11
    118e:	0b 2d       	mov	r16, r11
    1190:	08 29       	or	r16, r8
    1192:	0a 83       	std	Y+2, r16	; 0x02
    1194:	24 e7       	ldi	r18, 0x74	; 116
    1196:	62 16       	cp	r6, r18
  // Additional checking of adc.lp1 will prevent to detect a PNP as P-JFET.
//  if((PartMode <= PART_MODE_P_JFET) && (adc.lp_otr > 455)  && (adc.vCEs > 455))
  
//  if((adc.lp_otr > 455)  && (adc.vCEs > 455))
//  if((adc.vCEs > 115)  && ((adc.vCEs+100) > adc.lp_otr))
  if((adc.vCEs > 115)  && ((adc.vCEs+adc.vCEs+20) > adc.lp_otr))
    1198:	71 04       	cpc	r7, r1
    119a:	08 f4       	brcc	.+2      	; 0x119e <CheckPins+0x11c>
    119c:	05 c1       	rjmp	.+522    	; 0x13a8 <CheckPins+0x326>
    119e:	c3 01       	movw	r24, r6
    11a0:	0a 96       	adiw	r24, 0x0a	; 10
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	48 16       	cp	r4, r24
    11a8:	59 06       	cpc	r5, r25
    11aa:	08 f0       	brcs	.+2      	; 0x11ae <CheckPins+0x12c>
     {  //there is more than 650uA current without TristatePin current 
     // can be JFET or D-FET
     //Test if N-JFET or if self-conducting N-MOSFET
#ifdef EXACT_OTR
     ADC_DDR = HiADCm;		//High-Pin to output
    11ac:	fd c0       	rjmp	.+506    	; 0x13a8 <CheckPins+0x326>
     ADC_PORT = HiADCp;		//High-Pin fix to Vcc
    11ae:	37 b8       	out	0x07, r3	; 7
#endif
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
    11b0:	38 b8       	out	0x08, r3	; 8
     adc.lp1 = W10msReadADC(LowPin);	//measure voltage at the assumed Source 
    11b2:	a4 b8       	out	0x04, r10	; 4
    11b4:	89 8d       	ldd	r24, Y+25	; 0x19
    11b6:	c7 da       	rcall	.-2674   	; 0x746 <W10msReadADC>
    11b8:	7c 01       	movw	r14, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
    11ba:	82 2d       	mov	r24, r2
    11bc:	c6 da       	rcall	.-2676   	; 0x74a <ReadADC>
    11be:	6c 01       	movw	r12, r24
    11c0:	b5 b8       	out	0x05, r11	; 5
     R_PORT = TriPinRH;			//switch R_H for Tristate-Pin (probably Gate) to VCC
    11c2:	89 8d       	ldd	r24, Y+25	; 0x19
     adc.lp2 = W10msReadADC(LowPin);	//measure voltage at the assumed Source again
    11c4:	c0 da       	rcall	.-2688   	; 0x746 <W10msReadADC>
    11c6:	97 01       	movw	r18, r14
     lcd_line3();
     mVOut(adc.vCEs);
     mVOut(adc.lp_otr);
#endif
     //If it is a self-conducting MOSFET or JFET, then must be: adc.lp2 > adc.lp1 
     if(adc.lp2>(adc.lp1+599)) {
    11c8:	29 5a       	subi	r18, 0xA9	; 169
    11ca:	3d 4f       	sbci	r19, 0xFD	; 253
    11cc:	18 b8       	out	0x08, r1	; 8
        //measure voltage at the  Gate, differ between MOSFET and JFET
        ADC_PORT = TXD_VAL;
    11ce:	09 81       	ldd	r16, Y+1	; 0x01
        ADC_DDR = LoADCm;	//Low-Pin fix to GND
    11d0:	07 b9       	out	0x07, r16	; 7
    11d2:	0a 81       	ldd	r16, Y+2	; 0x02
        R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
    11d4:	04 b9       	out	0x04, r16	; 4
    11d6:	05 b9       	out	0x05, r16	; 5
        R_PORT = TriPinRH | HiPinRL;	//switch R_L for High-Pin to VCC
    11d8:	28 17       	cp	r18, r24
     if(adc.lp2>(adc.lp1+599)) {
    11da:	39 07       	cpc	r19, r25
    11dc:	08 f0       	brcs	.+2      	; 0x11e0 <CheckPins+0x15e>
    11de:	6b c0       	rjmp	.+214    	; 0x12b6 <CheckPins+0x234>
    11e0:	82 2d       	mov	r24, r2
        adc.lp2 = W10msReadADC(TristatePin); //read voltage of assumed Gate 
    11e2:	b1 da       	rcall	.-2718   	; 0x746 <W10msReadADC>
    11e4:	88 34       	cpi	r24, 0x48	; 72
#if DebugOut == 5
        lcd_data('N');
#endif
        if(adc.lp2>3911) {  //MOSFET
    11e6:	9f 40       	sbci	r25, 0x0F	; 15
    11e8:	08 f4       	brcc	.+2      	; 0x11ec <CheckPins+0x16a>
    11ea:	60 c0       	rjmp	.+192    	; 0x12ac <CheckPins+0x22a>
    11ec:	85 e0       	ldi	r24, 0x05	; 5
           PartFound = PART_FET;	//N-Kanal-MOSFET
    11ee:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <PartFound>
    11f2:	82 e2       	ldi	r24, 0x22	; 34
           PartMode = PART_MODE_MOS|N_CHANNEL|D_MODE; //Depletion-MOSFET
    11f4:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <PartMode>
#if DebugOut == 5
        lcd_data('D');
#endif
        } else {  //JFET (pn-passage between Gate and Source is conducting )
           PartFound = PART_FET;	//N-Kanal-JFET
           PartMode = PART_MODE_JFET|N_CHANNEL|D_MODE;
    11f8:	f0 92 40 01 	sts	0x0140, r15	; 0x800140 <ntrans+0x5>
#if DebugOut == 5
        lcd_space();
#endif
//      if ((PartReady == 0) || (adc.lp1 > ntrans.uBE)) 
//      there is no way to find out the right Source / Drain
        ntrans.uBE = adc.lp1;
    11fc:	e0 92 3f 01 	sts	0x013F, r14	; 0x80013f <ntrans+0x4>
    1200:	b6 01       	movw	r22, r12
        ntrans.gthvoltage = unsigned_diff(adc.lp1, adc.tp1);	//voltage GS (Source - Gate)
    1202:	c7 01       	movw	r24, r14
    1204:	09 db       	rcall	.-2542   	; 0x818 <unsigned_diff>
    1206:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <ntrans+0xb>
    120a:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <ntrans+0xa>
    120e:	97 01       	movw	r18, r14
    1210:	a0 e1       	ldi	r26, 0x10	; 16
        ntrans.current = (unsigned int)(((unsigned long)adc.lp1 * 10000) / RR680MI); // Id 1uA
    1212:	b7 e2       	ldi	r27, 0x27	; 39
    1214:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <__umulhisi3>
    1218:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <resis680mi>
    121c:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <resis680mi+0x1>
    1220:	50 e0       	ldi	r21, 0x00	; 0
    1222:	40 e0       	ldi	r20, 0x00	; 0
    1224:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    1228:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <ntrans+0x7>
    122c:	20 93 41 01 	sts	0x0141, r18	; 0x800141 <ntrans+0x6>
#ifdef SHOW_ICE
 // Test for cutoff Voltage, idea from Pieter-Tjerk
        R_DDR = LoPinRH | TriPinRH;
    1230:	0f 89       	ldd	r16, Y+23	; 0x17
    1232:	b0 2a       	or	r11, r16
	R_PORT = 0;			// Low + Tristate Pin with 470k to 0V
    1234:	b4 b8       	out	0x04, r11	; 4
	ADC_DDR = HiADCm;
    1236:	15 b8       	out	0x05, r1	; 5
	ADC_PORT = HiADCp;		// High Pin to VCC
    1238:	37 b8       	out	0x07, r3	; 7
	ntrans.ice0 = unsigned_diff(W10msReadADC(LowPin), ReadADC(TristatePin)); // Gate-Source Voltage
    123a:	38 b8       	out	0x08, r3	; 8
    123c:	82 2d       	mov	r24, r2
    123e:	85 da       	rcall	.-2806   	; 0x74a <ReadADC>
    1240:	7c 01       	movw	r14, r24
    1242:	89 8d       	ldd	r24, Y+25	; 0x19
    1244:	80 da       	rcall	.-2816   	; 0x746 <W10msReadADC>
    1246:	b7 01       	movw	r22, r14
    1248:	e7 da       	rcall	.-2610   	; 0x818 <unsigned_diff>
    124a:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <ntrans+0x9>
    124e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <ntrans+0x8>
           }
           ntrans.uBE = i16;
        }
 #endif
 #ifdef SHOW_R_DS
    if ((PartMode&0x0f) != PART_MODE_JFET)
    1252:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <PartMode>
    1256:	8f 70       	andi	r24, 0x0F	; 15
         {
            // For depletion MOSFET we try to put the Gate to the same level as Source.
            // The source level is higher than 0V because of the Port output resistance and current.
            // When the Drain-Source resistance is low, we can get nearly the same voltage increase
            // at the Gate with current from the 680 Ohm Port (RL).
            ADC_PORT = TXD_VAL;
    1258:	84 30       	cpi	r24, 0x04	; 4
            ADC_DDR = LoADCm | TriADCp;	//Low-Pin and Tristate-Pin fix to GND
    125a:	11 f1       	breq	.+68     	; 0x12a0 <CheckPins+0x21e>
    125c:	18 b8       	out	0x08, r1	; 8
    125e:	09 81       	ldd	r16, Y+1	; 0x01
//            R_DDR = TriPinRL | HiPinRL;	// L-Resistor High-Pin and Tristate-Pin to output
            R_DDR =  HiPinRL;	// L-Resistor High-Pin and Tristate-Pin to output
    1260:	10 2b       	or	r17, r16
            R_PORT = TriPinRL | HiPinRL;	//switch R_L for High-Pin and Tristate-Pin to VCC
    1262:	17 b9       	out	0x07, r17	; 7
    1264:	84 b8       	out	0x04, r8	; 4
            adc.hp2 = W5msReadADC(HighPin);	//measure the voltage at the Drain  
    1266:	1b 81       	ldd	r17, Y+3	; 0x03
    1268:	15 b9       	out	0x05, r17	; 5
    126a:	88 8d       	ldd	r24, Y+24	; 0x18
    126c:	6d da       	rcall	.-2854   	; 0x748 <W5msReadADC>
            adc.rhp = vcc_diff(adc.hp2);	// voltage at the Drain resistor
    126e:	7c 01       	movw	r14, r24
    1270:	ce da       	rcall	.-2660   	; 0x80e <vcc_diff>
    1272:	8c 01       	movw	r16, r24
            adc.lp2 = ReadADC(LowPin);		// voltage at the Source 
    1274:	89 8d       	ldd	r24, Y+25	; 0x19
    1276:	69 da       	rcall	.-2862   	; 0x74a <ReadADC>
    1278:	c0 90 17 01 	lds	r12, 0x0117	; 0x800117 <resis680pl>
            ntrans.uBE = RR680PL * (unsigned long)unsigned_diff(adc.hp2, adc.lp2) / adc.rhp; // DS resistance in 0.1 OHm
    127c:	d0 90 18 01 	lds	r13, 0x0118	; 0x800118 <resis680pl+0x1>
    1280:	bc 01       	movw	r22, r24
    1282:	c7 01       	movw	r24, r14
    1284:	c9 da       	rcall	.-2670   	; 0x818 <unsigned_diff>
    1286:	96 01       	movw	r18, r12
    1288:	dc 01       	movw	r26, r24
    128a:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <__umulhisi3>
    128e:	98 01       	movw	r18, r16
    1290:	50 e0       	ldi	r21, 0x00	; 0
    1292:	40 e0       	ldi	r20, 0x00	; 0
    1294:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    1298:	30 93 40 01 	sts	0x0140, r19	; 0x800140 <ntrans+0x5>
    129c:	20 93 3f 01 	sts	0x013F, r18	; 0x80013f <ntrans+0x4>
            while (ADCSRA&(1<<ADSC));	// wait until ADC finished
            tmp16 += ADCW;		// add result of ADC
         }
         tmp16 *= 4;	//is equal to 44 * ADCW
         ntrans.gthvoltage = tmp16/ 9;	//scale to mV
         ntrans.count++;		// count FET as two to accelerate  searching
    12a0:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <ntrans+0xf>
    12a4:	8f 5f       	subi	r24, 0xFF	; 255
    12a6:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <ntrans+0xf>
           PartFound = PART_FET;	//N-Kanal-JFET
    12aa:	c4 c2       	rjmp	.+1416   	; 0x1834 <CheckPins+0x7b2>
    12ac:	85 e0       	ldi	r24, 0x05	; 5
           PartMode = PART_MODE_JFET|N_CHANNEL|D_MODE;
    12ae:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <PartFound>
     adc.hp1 = W10msReadADC(HighPin);	//measure voltage at assumed Source 
    12b2:	84 e2       	ldi	r24, 0x24	; 36
    12b4:	9f cf       	rjmp	.-194    	; 0x11f4 <CheckPins+0x172>
    12b6:	88 8d       	ldd	r24, Y+24	; 0x18
    12b8:	46 da       	rcall	.-2932   	; 0x746 <W10msReadADC>
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
    12ba:	7c 01       	movw	r14, r24
    12bc:	82 2d       	mov	r24, r2
    12be:	45 da       	rcall	.-2934   	; 0x74a <ReadADC>
     R_PORT = HiPinRL;			//switch R_H for Tristate-Pin (assumed Gate) to GND
    12c0:	6c 01       	movw	r12, r24
     adc.hp2 = W10msReadADC(HighPin);	//read voltage at assumed Source again
    12c2:	85 b8       	out	0x05, r8	; 5
    12c4:	88 8d       	ldd	r24, Y+24	; 0x18
    12c6:	3f da       	rcall	.-2946   	; 0x746 <W10msReadADC>
     if(adc.hp1>(adc.hp2+599)) {
    12c8:	89 5a       	subi	r24, 0xA9	; 169
    12ca:	9d 4f       	sbci	r25, 0xFD	; 253
    12cc:	8e 15       	cp	r24, r14
    12ce:	9f 05       	cpc	r25, r15
    12d0:	08 f0       	brcs	.+2      	; 0x12d4 <CheckPins+0x252>
        ADC_PORT = HiADCp;	//switch High-Pin directly to VCC
    12d2:	1e c4       	rjmp	.+2108   	; 0x1b10 <CheckPins+0xa8e>
        ADC_DDR = HiADCm;	//switch High-Pin to output
    12d4:	38 b8       	out	0x08, r3	; 8
        adc.tp2 = W10msReadADC(TristatePin); //read voltage at the assumed Gate 
    12d6:	37 b8       	out	0x07, r3	; 7
    12d8:	82 2d       	mov	r24, r2
    12da:	35 da       	rcall	.-2966   	; 0x746 <W10msReadADC>
        if(adc.tp2<977) { 		//MOSFET
    12dc:	81 3d       	cpi	r24, 0xD1	; 209
    12de:	93 40       	sbci	r25, 0x03	; 3
    12e0:	08 f0       	brcs	.+2      	; 0x12e4 <CheckPins+0x262>
    12e2:	5d c0       	rjmp	.+186    	; 0x139e <CheckPins+0x31c>
           PartFound = PART_FET;	//P-Kanal-MOSFET
    12e4:	85 e0       	ldi	r24, 0x05	; 5
    12e6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <PartFound>
           PartMode = PART_MODE_MOS|P_CHANNEL|D_MODE; //Depletion-MOSFET
    12ea:	82 e3       	ldi	r24, 0x32	; 50
           PartMode = PART_MODE_JFET|P_CHANNEL|D_MODE;
    12ec:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <PartMode>
        ptrans.gthvoltage = unsigned_diff(adc.tp1, adc.hp1);	//voltage GS (Gate - Source)
    12f0:	b7 01       	movw	r22, r14
    12f2:	c6 01       	movw	r24, r12
    12f4:	91 da       	rcall	.-2782   	; 0x818 <unsigned_diff>
    12f6:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <ptrans+0xb>
    12fa:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <ptrans+0xa>
        ptrans.current = (unsigned int)(((unsigned long)vcc_diff(adc.hp1) * 10000) / RR680PL); // Id 1uA
    12fe:	c7 01       	movw	r24, r14
    1300:	86 da       	rcall	.-2804   	; 0x80e <vcc_diff>
    1302:	9c 01       	movw	r18, r24
    1304:	a0 e1       	ldi	r26, 0x10	; 16
    1306:	b7 e2       	ldi	r27, 0x27	; 39
    1308:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <__umulhisi3>
    130c:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <resis680pl>
    1310:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <resis680pl+0x1>
    1314:	50 e0       	ldi	r21, 0x00	; 0
    1316:	40 e0       	ldi	r20, 0x00	; 0
    1318:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    131c:	30 93 5a 01 	sts	0x015A, r19	; 0x80015a <ptrans+0x7>
    1320:	20 93 59 01 	sts	0x0159, r18	; 0x800159 <ptrans+0x6>
        ADC_DDR = LoADCm;		//switch Low-Pin (assumed Drain) direct to GND,
    1324:	18 b8       	out	0x08, r1	; 8
        R_DDR = TriPinRH | HiPinRH;	//High-Pin to output
    1326:	09 81       	ldd	r16, Y+1	; 0x01
    1328:	07 b9       	out	0x07, r16	; 7
    132a:	0e 85       	ldd	r16, Y+14	; 0x0e
        R_PORT = TriPinRH | HiPinRH;	//High-Pin and Tristate-Pin across R_H to Vcc
    132c:	b0 2a       	or	r11, r16
        ptrans.ice0 = unsigned_diff(W10msReadADC(TristatePin), ReadADC(HighPin));	//measure voltage at assumed Source 
    132e:	b4 b8       	out	0x04, r11	; 4
    1330:	b5 b8       	out	0x05, r11	; 5
    1332:	88 8d       	ldd	r24, Y+24	; 0x18
    1334:	0a da       	rcall	.-3052   	; 0x74a <ReadADC>
    1336:	7c 01       	movw	r14, r24
    1338:	82 2d       	mov	r24, r2
    133a:	05 da       	rcall	.-3062   	; 0x746 <W10msReadADC>
    133c:	b7 01       	movw	r22, r14
    133e:	6c da       	rcall	.-2856   	; 0x818 <unsigned_diff>
    1340:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <ptrans+0x9>
    1344:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <ptrans+0x8>
    if ((PartMode&0x0f) != PART_MODE_JFET)
    1348:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <PartMode>
    134c:	8f 70       	andi	r24, 0x0F	; 15
    134e:	84 30       	cpi	r24, 0x04	; 4
    1350:	01 f1       	breq	.+64     	; 0x1392 <CheckPins+0x310>
            ADC_PORT = HiADCp | TriADCp;	//switch High-Pin and Tristate-Pin to VCC
    1352:	13 29       	or	r17, r3
    1354:	18 b9       	out	0x08, r17	; 8
            ADC_DDR = HiADCm | TriADCp;		//switch High-Pin and Tristate-Pin to output
    1356:	17 b9       	out	0x07, r17	; 7
            R_PORT = 0;			// switch R-Ports to 0
    1358:	15 b8       	out	0x05, r1	; 5
            R_DDR = TriPinRL | HiPinRL;	// L-Resistor High-Pin and Tristate-Pin to output
    135a:	1b 81       	ldd	r17, Y+3	; 0x03
    135c:	14 b9       	out	0x04, r17	; 4
            adc.hp2 = W5msReadADC(HighPin);	//measure the voltage at the Source  
    135e:	88 8d       	ldd	r24, Y+24	; 0x18
    1360:	f3 d9       	rcall	.-3098   	; 0x748 <W5msReadADC>
    1362:	6c 01       	movw	r12, r24
    1364:	89 8d       	ldd	r24, Y+25	; 0x19
            adc.lp1 = ReadADC(LowPin);		// voltage at the Drain 
    1366:	f1 d9       	rcall	.-3102   	; 0x74a <ReadADC>
    1368:	8c 01       	movw	r16, r24
    136a:	e0 90 10 01 	lds	r14, 0x0110	; 0x800110 <resis680mi>
            ptrans.uBE = RR680MI * (unsigned long)unsigned_diff(adc.hp2, adc.lp1) / adc.lp1; // DS resistance in 0.1 OHm
    136e:	f0 90 11 01 	lds	r15, 0x0111	; 0x800111 <resis680mi+0x1>
    1372:	bc 01       	movw	r22, r24
    1374:	c6 01       	movw	r24, r12
    1376:	50 da       	rcall	.-2912   	; 0x818 <unsigned_diff>
    1378:	97 01       	movw	r18, r14
    137a:	dc 01       	movw	r26, r24
    137c:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <__umulhisi3>
    1380:	98 01       	movw	r18, r16
    1382:	50 e0       	ldi	r21, 0x00	; 0
    1384:	40 e0       	ldi	r20, 0x00	; 0
    1386:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    138a:	30 93 58 01 	sts	0x0158, r19	; 0x800158 <ptrans+0x5>
    138e:	20 93 57 01 	sts	0x0157, r18	; 0x800157 <ptrans+0x4>
           ptrans.count++;		// count FET as two for accelerate searching
    1392:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <ptrans+0xf>
    1396:	8f 5f       	subi	r24, 0xFF	; 255
    1398:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <ptrans+0xf>
           PartFound = PART_FET;	//P-Kanal-JFET
    139c:	05 c1       	rjmp	.+522    	; 0x15a8 <CheckPins+0x526>
    139e:	85 e0       	ldi	r24, 0x05	; 5
    13a0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <PartFound>
           PartMode = PART_MODE_JFET|P_CHANNEL|D_MODE;
    13a4:	84 e3       	ldi	r24, 0x34	; 52
  ADC_PORT = TXD_VAL;
    13a6:	a2 cf       	rjmp	.-188    	; 0x12ec <CheckPins+0x26a>
  ADC_DDR = LoADCm;			// Collector direct to GND
    13a8:	18 b8       	out	0x08, r1	; 8
    13aa:	09 81       	ldd	r16, Y+1	; 0x01
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
    13ac:	07 b9       	out	0x07, r16	; 7
  R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
    13ae:	85 b8       	out	0x05, r8	; 5
    13b0:	1a 81       	ldd	r17, Y+2	; 0x02
  adc.hp1 = W5msReadADC(HighPin);
    13b2:	14 b9       	out	0x04, r17	; 4
    13b4:	88 8d       	ldd	r24, Y+24	; 0x18
    13b6:	c8 d9       	rcall	.-3184   	; 0x748 <W5msReadADC>
    13b8:	9a 87       	std	Y+10, r25	; 0x0a
    13ba:	89 87       	std	Y+9, r24	; 0x09
  adc.rhp = vcc_diff(adc.hp1);	// voltage at the Emitter resistor
    13bc:	28 da       	rcall	.-2992   	; 0x80e <vcc_diff>
    13be:	6c 01       	movw	r12, r24
    13c0:	82 2d       	mov	r24, r2
  adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
    13c2:	c3 d9       	rcall	.-3194   	; 0x74a <ReadADC>
    13c4:	9e 83       	std	Y+6, r25	; 0x06
    13c6:	8d 83       	std	Y+5, r24	; 0x05
    13c8:	72 01       	movw	r14, r4
    13ca:	24 e6       	ldi	r18, 0x64	; 100
  if (adc.rhp > (100+adc.lp_otr)) {
    13cc:	e2 0e       	add	r14, r18
    13ce:	f1 1c       	adc	r15, r1
    13d0:	b2 01       	movw	r22, r4
     tmp16 = unsigned_diff(adc.rhp, adc.lp_otr);	// subtract residual current
    13d2:	c6 01       	movw	r24, r12
    13d4:	ec 14       	cp	r14, r12
  if (adc.rhp > (100+adc.lp_otr)) {
    13d6:	fd 04       	cpc	r15, r13
    13d8:	08 f0       	brcs	.+2      	; 0x13dc <CheckPins+0x35a>
    13da:	e8 c0       	rjmp	.+464    	; 0x15ac <CheckPins+0x52a>
     tmp16 = unsigned_diff(adc.rhp, adc.lp_otr);	// subtract residual current
    13dc:	1d da       	rcall	.-3014   	; 0x818 <unsigned_diff>
    13de:	8c 01       	movw	r16, r24
    13e0:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <resis680pl>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
    13e4:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <resis680pl+0x1>
    13e8:	50 e0       	ldi	r21, 0x00	; 0
     c_hfe = ((unsigned long)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 10000) / 
    13ea:	40 e0       	ldi	r20, 0x00	; 0
    13ec:	60 e8       	ldi	r22, 0x80	; 128
    13ee:	71 ea       	ldi	r23, 0xA1	; 161
    13f0:	83 e0       	ldi	r24, 0x03	; 3
    13f2:	9c e1       	ldi	r25, 0x1C	; 28
    13f4:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    13f8:	d8 01       	movw	r26, r16
     c_hfe = (unsigned long)((unsigned long)unsigned_diff(tmp16, adc.tp1) * 100) / adc.tp1;
    13fa:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <__muluhisi3>
    13fe:	0d 81       	ldd	r16, Y+5	; 0x05
    1400:	1e 81       	ldd	r17, Y+6	; 0x06
    1402:	98 01       	movw	r18, r16
    1404:	50 e0       	ldi	r21, 0x00	; 0
    1406:	40 e0       	ldi	r20, 0x00	; 0
    1408:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    140c:	2b 8b       	std	Y+19, r18	; 0x13
    140e:	3c 8b       	std	Y+20, r19	; 0x14
  R_DDR = 0;			//all Resistor Ports to Input
    1410:	4d 8b       	std	Y+21, r20	; 0x15
  R_PORT = 0;			//switch all resistor ports to GND
    1412:	5e 8b       	std	Y+22, r21	; 0x16
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
    1414:	14 b8       	out	0x04, r1	; 4
  ADC_DDR = HiADCm;		//switch High-Pin to output
    1416:	15 b8       	out	0x05, r1	; 5
  wait_about5ms();
    1418:	38 b8       	out	0x08, r3	; 8
    141a:	37 b8       	out	0x07, r3	; 7
     R_DDR = LoPinRL | TriPinRL;	//switch R_L port for Tristate-Pin to output (GND), for Test of PNP
    141c:	7d d9       	rcall	.-3334   	; 0x718 <wait5ms>
    141e:	1f 81       	ldd	r17, Y+7	; 0x07
     adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin
    1420:	14 b9       	out	0x04, r17	; 4
    1422:	89 8d       	ldd	r24, Y+25	; 0x19
    1424:	91 d9       	rcall	.-3294   	; 0x748 <W5msReadADC>
     if(adc.lp1 > 3422) {
    1426:	8f 35       	cpi	r24, 0x5F	; 95
    1428:	9d 40       	sbci	r25, 0x0D	; 13
    142a:	08 f4       	brcc	.+2      	; 0x142e <CheckPins+0x3ac>
    142c:	58 c1       	rjmp	.+688    	; 0x16de <CheckPins+0x65c>
        R_DDR = LoPinRL | TriPinRH;	//switch R_H port for Tristate-Pin (Base) to output (GND)
    142e:	a4 b8       	out	0x04, r10	; 4
        adc.lp1 = W10msReadADC(LowPin);	//measure voltage at LowPin (assumed Collector)
    1430:	89 8d       	ldd	r24, Y+25	; 0x19
    1432:	89 d9       	rcall	.-3310   	; 0x746 <W10msReadADC>
    1434:	8c 01       	movw	r16, r24
    1436:	82 2d       	mov	r24, r2
        adc.tp2 = ReadADC(TristatePin);	//measure voltage at TristatePin (Base) 
    1438:	88 d9       	rcall	.-3312   	; 0x74a <ReadADC>
    143a:	98 8b       	std	Y+16, r25	; 0x10
    143c:	8f 87       	std	Y+15, r24	; 0x0f
    143e:	88 8d       	ldd	r24, Y+24	; 0x18
    1440:	84 d9       	rcall	.-3320   	; 0x74a <ReadADC>
        adc.hp2 = ReadADC(HighPin);	//measure voltage at HighPin (assumed Emitter)
    1442:	9a 8b       	std	Y+18, r25	; 0x12
    1444:	89 8b       	std	Y+17, r24	; 0x11
    1446:	8f 85       	ldd	r24, Y+15	; 0x0f
    1448:	98 89       	ldd	r25, Y+16	; 0x10
    144a:	81 3d       	cpi	r24, 0xD1	; 209
        if(adc.tp2 > 2000) {
    144c:	97 40       	sbci	r25, 0x07	; 7
    144e:	08 f4       	brcc	.+2      	; 0x1452 <CheckPins+0x3d0>
    1450:	d9 c0       	rjmp	.+434    	; 0x1604 <CheckPins+0x582>
    1452:	84 e0       	ldi	r24, 0x04	; 4
    1454:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <PartFound>
           PartFound = PART_TRANSISTOR;
    1458:	8d e0       	ldi	r24, 0x0D	; 13
    145a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <PartMode>
           PartMode = PART_MODE_PNP;
    145e:	78 01       	movw	r14, r16
    1460:	40 16       	cp	r4, r16
    1462:	51 06       	cpc	r5, r17
              tmp16 -= adc.lp_otr;
    1464:	10 f4       	brcc	.+4      	; 0x146a <CheckPins+0x3e8>
           if (tmp16 > adc.lp_otr) {
    1466:	e4 18       	sub	r14, r4
    1468:	f5 08       	sbc	r15, r5
    146a:	80 90 10 01 	lds	r8, 0x0110	; 0x800110 <resis680mi>
              tmp16 -= adc.lp_otr;
    146e:	90 90 11 01 	lds	r9, 0x0111	; 0x800111 <resis680mi+0x1>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
    1472:	b1 2c       	mov	r11, r1
    1474:	a1 2c       	mov	r10, r1
    1476:	60 e8       	ldi	r22, 0x80	; 128
    1478:	71 ea       	ldi	r23, 0xA1	; 161
    147a:	83 e0       	ldi	r24, 0x03	; 3
           e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 10000) / 
    147c:	9c e1       	ldi	r25, 0x1C	; 28
    147e:	a5 01       	movw	r20, r10
    1480:	94 01       	movw	r18, r8
    1482:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    1486:	d7 01       	movw	r26, r14
    1488:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <__muluhisi3>
    148c:	ef 85       	ldd	r30, Y+15	; 0x0f
    148e:	f8 89       	ldd	r31, Y+16	; 0x10
    1490:	9f 01       	movw	r18, r30
              (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
    1492:	50 e0       	ldi	r21, 0x00	; 0
    1494:	40 e0       	ldi	r20, 0x00	; 0
    1496:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
           e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 10000) / 
    149a:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <ptrans+0xf>
           if ((ptrans.count == 0) || (e_hfe > ptrans.hfe)){
    149e:	88 23       	and	r24, r24
    14a0:	71 f0       	breq	.+28     	; 0x14be <CheckPins+0x43c>
    14a2:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <ptrans>
    14a6:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <ptrans+0x1>
    14aa:	a0 91 55 01 	lds	r26, 0x0155	; 0x800155 <ptrans+0x2>
    14ae:	b0 91 56 01 	lds	r27, 0x0156	; 0x800156 <ptrans+0x3>
    14b2:	82 17       	cp	r24, r18
    14b4:	93 07       	cpc	r25, r19
    14b6:	a4 07       	cpc	r26, r20
    14b8:	b5 07       	cpc	r27, r21
    14ba:	08 f0       	brcs	.+2      	; 0x14be <CheckPins+0x43c>
    14bc:	8e c0       	rjmp	.+284    	; 0x15da <CheckPins+0x558>
    14be:	20 93 53 01 	sts	0x0153, r18	; 0x800153 <ptrans>
              ptrans.hfe = e_hfe;				// hFE with common emitter
    14c2:	30 93 54 01 	sts	0x0154, r19	; 0x800154 <ptrans+0x1>
    14c6:	40 93 55 01 	sts	0x0155, r20	; 0x800155 <ptrans+0x2>
    14ca:	50 93 56 01 	sts	0x0156, r21	; 0x800156 <ptrans+0x3>
    14ce:	98 01       	movw	r18, r16
    14d0:	a0 e1       	ldi	r26, 0x10	; 16
              ptrans.current = (unsigned int)(((unsigned long)adc.lp1 * 10000) / RR680MI); // Ic 1uA
    14d2:	b7 e2       	ldi	r27, 0x27	; 39
    14d4:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <__umulhisi3>
    14d8:	a5 01       	movw	r20, r10
    14da:	94 01       	movw	r18, r8
    14dc:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    14e0:	30 93 5a 01 	sts	0x015A, r19	; 0x80015a <ptrans+0x7>
    14e4:	20 93 59 01 	sts	0x0159, r18	; 0x800159 <ptrans+0x6>
    14e8:	6f 85       	ldd	r22, Y+15	; 0x0f
              ptrans.uBE = unsigned_diff(adc.hp2, adc.tp2);	// Base Emitter Voltage
    14ea:	78 89       	ldd	r23, Y+16	; 0x10
    14ec:	89 89       	ldd	r24, Y+17	; 0x11
    14ee:	9a 89       	ldd	r25, Y+18	; 0x12
    14f0:	93 d9       	rcall	.-3290   	; 0x818 <unsigned_diff>
    14f2:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <ptrans+0x5>
    14f6:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <ptrans+0x4>
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	40 91 53 01 	lds	r20, 0x0153	; 0x800153 <ptrans>
           if (c_hfe > ptrans.hfe)  // trans.hfe is allready e_hfe or last c_hFE
    1500:	50 91 54 01 	lds	r21, 0x0154	; 0x800154 <ptrans+0x1>
    1504:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <ptrans+0x2>
    1508:	70 91 56 01 	lds	r23, 0x0156	; 0x800156 <ptrans+0x3>
    150c:	0b 89       	ldd	r16, Y+19	; 0x13
    150e:	1c 89       	ldd	r17, Y+20	; 0x14
    1510:	2d 89       	ldd	r18, Y+21	; 0x15
    1512:	3e 89       	ldd	r19, Y+22	; 0x16
    1514:	40 17       	cp	r20, r16
    1516:	51 07       	cpc	r21, r17
    1518:	62 07       	cpc	r22, r18
    151a:	73 07       	cpc	r23, r19
    151c:	08 f0       	brcs	.+2      	; 0x1520 <CheckPins+0x49e>
    151e:	5f c0       	rjmp	.+190    	; 0x15de <CheckPins+0x55c>
    1520:	00 93 53 01 	sts	0x0153, r16	; 0x800153 <ptrans>
              ptrans.hfe = c_hfe;		// c_hfe is the best
    1524:	10 93 54 01 	sts	0x0154, r17	; 0x800154 <ptrans+0x1>
    1528:	20 93 55 01 	sts	0x0155, r18	; 0x800155 <ptrans+0x2>
    152c:	30 93 56 01 	sts	0x0156, r19	; 0x800156 <ptrans+0x3>
    1530:	6d 81       	ldd	r22, Y+5	; 0x05
    1532:	7e 81       	ldd	r23, Y+6	; 0x06
              ptrans.uBE = unsigned_diff(adc.hp1, adc.tp1);	// Base Emitter Voltage common collector
    1534:	89 85       	ldd	r24, Y+9	; 0x09
    1536:	9a 85       	ldd	r25, Y+10	; 0x0a
    1538:	6f d9       	rcall	.-3362   	; 0x818 <unsigned_diff>
    153a:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <ptrans+0x5>
    153e:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <ptrans+0x4>
    1542:	96 01       	movw	r18, r12
    1544:	a0 e1       	ldi	r26, 0x10	; 16
    1546:	b7 e2       	ldi	r27, 0x27	; 39
              ptrans.current = (unsigned int)(((unsigned long)adc.rhp * 10000) / RR680PL); // Ie 1uA
    1548:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <__umulhisi3>
    154c:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <resis680pl>
    1550:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <resis680pl+0x1>
    1554:	50 e0       	ldi	r21, 0x00	; 0
    1556:	40 e0       	ldi	r20, 0x00	; 0
    1558:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    155c:	20 5f       	subi	r18, 0xF0	; 240
              ptrans.current += 10000;		// current at emitter!
    155e:	38 4d       	sbci	r19, 0xD8	; 216
    1560:	30 93 5a 01 	sts	0x015A, r19	; 0x80015a <ptrans+0x7>
    1564:	20 93 59 01 	sts	0x0159, r18	; 0x800159 <ptrans+0x6>
              ptrans.ice0 = (unsigned int)(((unsigned long)adc.lp_otr * 10000) / RR680MI); // ICE0 1uA
    1568:	c0 90 10 01 	lds	r12, 0x0110	; 0x800110 <resis680mi>
    156c:	d0 90 11 01 	lds	r13, 0x0111	; 0x800111 <resis680mi+0x1>
    1570:	f1 2c       	mov	r15, r1
    1572:	e1 2c       	mov	r14, r1
    1574:	92 01       	movw	r18, r4
    1576:	a0 e1       	ldi	r26, 0x10	; 16
    1578:	b7 e2       	ldi	r27, 0x27	; 39
    157a:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <__umulhisi3>
    157e:	a7 01       	movw	r20, r14
    1580:	96 01       	movw	r18, r12
    1582:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    1586:	30 93 5c 01 	sts	0x015C, r19	; 0x80015c <ptrans+0x9>
              ptrans.ices = (unsigned int)(((unsigned long)adc.vCEs * 10000) / RR680MI); // ICEs 1uA
    158a:	20 93 5b 01 	sts	0x015B, r18	; 0x80015b <ptrans+0x8>
    158e:	93 01       	movw	r18, r6
    1590:	a0 e1       	ldi	r26, 0x10	; 16
    1592:	b7 e2       	ldi	r27, 0x27	; 39
    1594:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <__umulhisi3>
    1598:	a7 01       	movw	r20, r14
    159a:	96 01       	movw	r18, r12
    159c:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    15a0:	30 93 5e 01 	sts	0x015E, r19	; 0x80015e <ptrans+0xb>
    15a4:	20 93 5d 01 	sts	0x015D, r18	; 0x80015d <ptrans+0xa>
     tmp16 = unsigned_diff(adc.rhp, adc.lp_otr);
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	1b c0       	rjmp	.+54     	; 0x15e2 <CheckPins+0x560>
    15ac:	35 d9       	rcall	.-3478   	; 0x818 <unsigned_diff>
     R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
    15ae:	8c 01       	movw	r16, r24
    15b0:	2b 81       	ldd	r18, Y+3	; 0x03
     adc.hp1 = W5msReadADC(HighPin);	// voltage at the Emitter resistor
    15b2:	24 b9       	out	0x04, r18	; 4
    15b4:	88 8d       	ldd	r24, Y+24	; 0x18
    15b6:	c8 d8       	rcall	.-3696   	; 0x748 <W5msReadADC>
    15b8:	9a 87       	std	Y+10, r25	; 0x0a
    15ba:	89 87       	std	Y+9, r24	; 0x09
     adc.rhp = vcc_diff(adc.hp1);	// voltage at the Emitter resistor
    15bc:	28 d9       	rcall	.-3504   	; 0x80e <vcc_diff>
    15be:	6c 01       	movw	r12, r24
    15c0:	82 2d       	mov	r24, r2
     adc.tp1 = ReadADC(TristatePin);	// voltage at the base resistor (RL)
    15c2:	c3 d8       	rcall	.-3706   	; 0x74a <ReadADC>
    15c4:	9e 83       	std	Y+6, r25	; 0x06
    15c6:	8d 83       	std	Y+5, r24	; 0x05
    15c8:	bc 01       	movw	r22, r24
    15ca:	c8 01       	movw	r24, r16
     c_hfe = (unsigned long)((unsigned long)unsigned_diff(tmp16, adc.tp1) * 100) / adc.tp1;
    15cc:	25 d9       	rcall	.-3510   	; 0x818 <unsigned_diff>
    15ce:	9c 01       	movw	r18, r24
    15d0:	a4 e6       	ldi	r26, 0x64	; 100
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <__umulhisi3>
    15d8:	12 cf       	rjmp	.-476    	; 0x13fe <CheckPins+0x37c>
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	8f cf       	rjmp	.-226    	; 0x14fc <CheckPins+0x47a>
    15de:	81 11       	cpse	r24, r1
           update_pins = 0;		// only update pins, if hFE is higher or Thyristor 
    15e0:	c3 cf       	rjmp	.-122    	; 0x1568 <CheckPins+0x4e6>
    15e2:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <ptrans+0xf>
           if (update_pins != 0) {
    15e6:	9f 5f       	subi	r25, 0xFF	; 255
//---------------------------------------------------------------------------
savePresult:
#if DebugOut == 5
 lcd_data('P');
#endif
 ptrans.count++;
    15e8:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <ptrans+0xf>
    15ec:	88 23       	and	r24, r24
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <CheckPins+0x570>
    15f0:	45 c3       	rjmp	.+1674   	; 0x1c7c <CheckPins+0xbfa>
 if (update_pins != 0) {
    15f2:	20 92 5f 01 	sts	0x015F, r2	; 0x80015f <ptrans+0xc>
    15f6:	09 8d       	ldd	r16, Y+25	; 0x19
    ptrans.b = TristatePin;	// save Pin-constellation
    15f8:	00 93 60 01 	sts	0x0160, r16	; 0x800160 <ptrans+0xd>
    ptrans.c = LowPin;
    15fc:	18 8d       	ldd	r17, Y+24	; 0x18
    15fe:	10 93 61 01 	sts	0x0161, r17	; 0x800161 <ptrans+0xe>
    ptrans.e = HighPin;
    1602:	3c c3       	rjmp	.+1656   	; 0x1c7c <CheckPins+0xbfa>
    1604:	21 e6       	ldi	r18, 0x61	; 97
    1606:	42 16       	cp	r4, r18
        if((adc.lp_otr < 97) && (adc.lp1 > 2000)) {
    1608:	51 04       	cpc	r5, r1
    160a:	08 f0       	brcs	.+2      	; 0x160e <CheckPins+0x58c>
    160c:	68 c0       	rjmp	.+208    	; 0x16de <CheckPins+0x65c>
    160e:	01 3d       	cpi	r16, 0xD1	; 209
    1610:	37 e0       	ldi	r19, 0x07	; 7
    1612:	13 07       	cpc	r17, r19
    1614:	08 f4       	brcc	.+2      	; 0x1618 <CheckPins+0x596>
    1616:	63 c0       	rjmp	.+198    	; 0x16de <CheckPins+0x65c>
    1618:	85 e0       	ldi	r24, 0x05	; 5
    161a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <PartFound>
           PartFound = PART_FET;		//P-Kanal-MOSFET is found (Basis/Gate moves not to VCC)
    161e:	82 e1       	ldi	r24, 0x12	; 18
    1620:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <PartMode>
           PartMode = PART_MODE_MOS|P_CHANNEL|E_MODE;
    1624:	c8 01       	movw	r24, r16
    1626:	86 50       	subi	r24, 0x06	; 6
           if (adc.hp2 > (adc.lp1+250)) {
    1628:	9f 4f       	sbci	r25, 0xFF	; 255
    162a:	a9 89       	ldd	r26, Y+17	; 0x11
    162c:	ba 89       	ldd	r27, Y+18	; 0x12
    162e:	8a 17       	cp	r24, r26
    1630:	9b 07       	cpc	r25, r27
    1632:	08 f0       	brcs	.+2      	; 0x1636 <CheckPins+0x5b4>
    1634:	3e c0       	rjmp	.+124    	; 0x16b2 <CheckPins+0x630>
    1636:	83 e1       	ldi	r24, 0x13	; 19
    1638:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <PartMode>
              PartMode = PART_MODE_IGBT|P_CHANNEL|E_MODE;
    163c:	09 81       	ldd	r16, Y+1	; 0x01
    163e:	07 70       	andi	r16, 0x07	; 7
           PinMSK = LoADCm & 7;
    1640:	c0 2e       	mov	r12, r16
    1642:	82 2d       	mov	r24, r2
    1644:	80 64       	ori	r24, 0x40	; 64
       	   ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
    1646:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    164a:	fb e0       	ldi	r31, 0x0B	; 11
    164c:	df 2e       	mov	r13, r31
    164e:	ee 24       	eor	r14, r14
    1650:	e3 94       	inc	r14
       	   tmp16 = 1;			// round up ((1*4)/9)
    1652:	f1 2c       	mov	r15, r1
    1654:	0f ef       	ldi	r16, 0xFF	; 255
    1656:	13 e0       	ldi	r17, 0x03	; 3
      	      tmp16 += (1023 - ADCW);	// Add Tristatepin-Voltage
    1658:	a8 95       	wdr
       	      wdt_reset();
    165a:	61 e0       	ldi	r22, 0x01	; 1
       	      ChargePin10ms(TriPinRL,1);
    165c:	89 2d       	mov	r24, r9
    165e:	36 d5       	rcall	.+2668   	; 0x20cc <ChargePin10ms>
    1660:	a4 b8       	out	0x04, r10	; 4
    1662:	86 b1       	in	r24, 0x06	; 6
                R_DDR = LoPinRL | TriPinRH;		//switch R_H for Tristate-Pin (Basis) to GND
    1664:	8c 21       	and	r24, r12
       	      while (!(ADC_PIN&PinMSK));		// Wait, until the MOSFET switches and Drain moves to VCC
    1666:	e9 f3       	breq	.-6      	; 0x1662 <CheckPins+0x5e0>
    1668:	2d 85       	ldd	r18, Y+13	; 0x0d
    166a:	24 b9       	out	0x04, r18	; 4
       	      R_DDR = LoPinRL;
    166c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
       	      ADCSRA |= (1<<ADSC);		// Start Conversion
    1670:	80 64       	ori	r24, 0x40	; 64
    1672:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1676:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
       	      while (ADCSRA&(1<<ADSC));		// wait
    167a:	86 fd       	sbrc	r24, 6
    167c:	fc cf       	rjmp	.-8      	; 0x1676 <CheckPins+0x5f4>
    167e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      	      tmp16 += (1023 - ADCW);	// Add Tristatepin-Voltage
    1682:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1686:	d8 01       	movw	r26, r16
    1688:	a8 1b       	sub	r26, r24
    168a:	b9 0b       	sbc	r27, r25
    168c:	ea 0e       	add	r14, r26
    168e:	fb 1e       	adc	r15, r27
       	   for(ii=0;ii<11;ii++) {
    1690:	da 94       	dec	r13
           tmp16 *= 4;		// is equal to 44*ADCW
    1692:	d1 10       	cpse	r13, r1
    1694:	e1 cf       	rjmp	.-62     	; 0x1658 <CheckPins+0x5d6>
    1696:	c7 01       	movw	r24, r14
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
           ptrans.gthvoltage = tmp16 / 9;		// gives resolution in mV
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	69 e0       	ldi	r22, 0x09	; 9
    16a2:	70 e0       	ldi	r23, 0x00	; 0
    16a4:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <__udivmodhi4>
    16a8:	70 93 5e 01 	sts	0x015E, r23	; 0x80015e <ptrans+0xb>
    16ac:	60 93 5d 01 	sts	0x015D, r22	; 0x80015d <ptrans+0xa>
              ptrans.uBE = RR680MI * (unsigned long)unsigned_diff(adc.hp2, adc.lp1) / adc.lp1; // DS resistance in 0.1 OHm
    16b0:	70 ce       	rjmp	.-800    	; 0x1392 <CheckPins+0x310>
    16b2:	e0 90 10 01 	lds	r14, 0x0110	; 0x800110 <resis680mi>
    16b6:	f0 90 11 01 	lds	r15, 0x0111	; 0x800111 <resis680mi+0x1>
    16ba:	b8 01       	movw	r22, r16
    16bc:	89 89       	ldd	r24, Y+17	; 0x11
    16be:	9a 89       	ldd	r25, Y+18	; 0x12
    16c0:	ab d8       	rcall	.-3754   	; 0x818 <unsigned_diff>
    16c2:	97 01       	movw	r18, r14
    16c4:	dc 01       	movw	r26, r24
    16c6:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <__umulhisi3>
    16ca:	98 01       	movw	r18, r16
    16cc:	50 e0       	ldi	r21, 0x00	; 0
    16ce:	40 e0       	ldi	r20, 0x00	; 0
    16d0:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    16d4:	30 93 58 01 	sts	0x0158, r19	; 0x800158 <ptrans+0x5>
    R_DDR = LoPinRL | TriPinRH;
    16d8:	20 93 57 01 	sts	0x0157, r18	; 0x800157 <ptrans+0x4>
    adc.lp1 = W5msReadADC(LowPin);
    16dc:	af cf       	rjmp	.-162    	; 0x163c <CheckPins+0x5ba>
    16de:	a4 b8       	out	0x04, r10	; 4
    16e0:	b5 b8       	out	0x05, r11	; 5
    16e2:	89 8d       	ldd	r24, Y+25	; 0x19
    adc.tp1 = ReadADC(TristatePin);	// voltage at the Base 
    16e4:	31 d8       	rcall	.-3998   	; 0x748 <W5msReadADC>
    16e6:	5c 01       	movw	r10, r24
    16e8:	82 2d       	mov	r24, r2
    16ea:	2f d8       	rcall	.-4002   	; 0x74a <ReadADC>
    16ec:	9e 83       	std	Y+6, r25	; 0x06
    adc.rtp = vcc_diff(adc.tp1);	// voltage at Base resistor
    16ee:	8d 83       	std	Y+5, r24	; 0x05
    16f0:	8e d8       	rcall	.-3812   	; 0x80e <vcc_diff>
    16f2:	8c 01       	movw	r16, r24
    if (adc.lp1 > (100+adc.lp_otr)) {
    16f4:	ea 14       	cp	r14, r10
    16f6:	fb 04       	cpc	r15, r11
    16f8:	08 f0       	brcs	.+2      	; 0x16fc <CheckPins+0x67a>
    16fa:	9e c0       	rjmp	.+316    	; 0x1838 <CheckPins+0x7b6>
       tmp16 = unsigned_diff(adc.lp1, adc.lp_otr);
    16fc:	b2 01       	movw	r22, r4
    16fe:	c5 01       	movw	r24, r10
    1700:	8b d8       	rcall	.-3818   	; 0x818 <unsigned_diff>
    1702:	7c 01       	movw	r14, r24
    1704:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <resis680mi>
              (unsigned int)RR680MI)) / (unsigned int)adc.rtp;	
    1708:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <resis680mi+0x1>
    170c:	50 e0       	ldi	r21, 0x00	; 0
    170e:	40 e0       	ldi	r20, 0x00	; 0
    1710:	60 e8       	ldi	r22, 0x80	; 128
       c_hfe = ((unsigned long)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 10000) / 
    1712:	71 ea       	ldi	r23, 0xA1	; 161
    1714:	83 e0       	ldi	r24, 0x03	; 3
    1716:	9c e1       	ldi	r25, 0x1C	; 28
    1718:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    171c:	d7 01       	movw	r26, r14
    171e:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <__muluhisi3>
    1722:	98 01       	movw	r18, r16
       c_hfe = (unsigned long)((unsigned long)unsigned_diff(tmp16, adc.rtp) * 100) / adc.rtp;
    1724:	50 e0       	ldi	r21, 0x00	; 0
    1726:	40 e0       	ldi	r20, 0x00	; 0
    1728:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    172c:	29 87       	std	Y+9, r18	; 0x09
    172e:	3a 87       	std	Y+10, r19	; 0x0a
    1730:	4b 87       	std	Y+11, r20	; 0x0b
    1732:	5c 87       	std	Y+12, r21	; 0x0c
    1734:	19 81       	ldd	r17, Y+1	; 0x01
    ADC_DDR = LoADCm;		//Low-Pin to output 0V
    1736:	17 b9       	out	0x07, r17	; 7
    1738:	18 b8       	out	0x08, r1	; 8
    ADC_PORT = TXD_VAL;			//switch Low-Pin to GND
    173a:	0b 81       	ldd	r16, Y+3	; 0x03
    R_DDR = TriPinRL | HiPinRL;		//RL port for High-Pin and Tristate-Pin to output
    173c:	04 b9       	out	0x04, r16	; 4
    173e:	05 b9       	out	0x05, r16	; 5
    R_PORT = TriPinRL | HiPinRL;	//RL port for High-Pin and Tristate-Pin to Vcc
    1740:	88 8d       	ldd	r24, Y+24	; 0x18
    adc.hp1 = W5msReadADC(HighPin);	//measure voltage at High-Pin  (Collector)
    1742:	02 d8       	rcall	.-4092   	; 0x748 <W5msReadADC>
    1744:	7c 01       	movw	r14, r24
    1746:	82 2d       	mov	r24, r2
    1748:	00 d8       	rcall	.-4096   	; 0x74a <ReadADC>
    adc.tp2 = ReadADC(TristatePin);	//voltage of gate
    174a:	98 87       	std	Y+8, r25	; 0x08
    174c:	8f 83       	std	Y+7, r24	; 0x07
    174e:	89 8d       	ldd	r24, Y+25	; 0x19
    1750:	0e 94 a5 03 	call	0x74a	; 0x74a <ReadADC>
    adc.lp2 = ReadADC(LowPin);		//voltage of Cathode
    1754:	6c 01       	movw	r12, r24
    1756:	10 e3       	ldi	r17, 0x30	; 48
    if(adc.hp1 < 4400)    /* limit for opto-coupler with low hFE */
    1758:	e1 16       	cp	r14, r17
    175a:	11 e1       	ldi	r17, 0x11	; 17
    175c:	f1 06       	cpc	r15, r17
    175e:	08 f0       	brcs	.+2      	; 0x1762 <CheckPins+0x6e0>
    1760:	d5 c1       	rjmp	.+938    	; 0x1b0c <CheckPins+0xa8a>
    1762:	85 b8       	out	0x05, r8	; 5
       R_PORT = HiPinRL;
    1764:	88 8d       	ldd	r24, Y+24	; 0x18
       adc.hp4 = W5msReadADC(HighPin);  //read voltage with switched back base
    1766:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
    176a:	98 8b       	std	Y+16, r25	; 0x10
    176c:	8f 87       	std	Y+15, r24	; 0x0f
    176e:	84 b8       	out	0x04, r8	; 4
       R_DDR = HiPinRL;			// base to input
    1770:	88 8d       	ldd	r24, Y+24	; 0x18
       adc.hp3 = W5msReadADC(HighPin);	//read voltage at High-Pin (probably Anode) again
    1772:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
    1776:	8c 01       	movw	r16, r24
    1778:	15 b8       	out	0x05, r1	; 5
       R_PORT = 0;			//switch R_L for High-Pin (probably Anode) to GND (turn off)
    177a:	0e 94 8c 03 	call	0x718	; 0x718 <wait5ms>
       wait_about5ms();
    177e:	85 b8       	out	0x05, r8	; 5
       R_PORT = HiPinRL;		//switch R_L for High-Pin (probably Anode) again to VCC
    1780:	88 8d       	ldd	r24, Y+24	; 0x18
       adc.hp2 = W5msReadADC(HighPin);	//measure voltage at the High-Pin (probably Anode) again
    1782:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
    1786:	00 34       	cpi	r16, 0x40	; 64
       if((adc.hp3 < 1600) && (adc.hp2 > 4400)
    1788:	16 40       	sbci	r17, 0x06	; 6
    178a:	08 f0       	brcs	.+2      	; 0x178e <CheckPins+0x70c>
    178c:	73 c0       	rjmp	.+230    	; 0x1874 <CheckPins+0x7f2>
    178e:	81 33       	cpi	r24, 0x31	; 49
    1790:	91 41       	sbci	r25, 0x11	; 17
    1792:	08 f4       	brcc	.+2      	; 0x1796 <CheckPins+0x714>
    1794:	6f c0       	rjmp	.+222    	; 0x1874 <CheckPins+0x7f2>
    1796:	c7 01       	movw	r24, r14
           && ((adc.hp1+150) > adc.hp4)
    1798:	8a 56       	subi	r24, 0x6A	; 106
    179a:	9f 4f       	sbci	r25, 0xFF	; 255
    179c:	0f 85       	ldd	r16, Y+15	; 0x0f
    179e:	18 89       	ldd	r17, Y+16	; 0x10
    17a0:	08 17       	cp	r16, r24
    17a2:	19 07       	cpc	r17, r25
    17a4:	08 f0       	brcs	.+2      	; 0x17a8 <CheckPins+0x726>
    17a6:	66 c0       	rjmp	.+204    	; 0x1874 <CheckPins+0x7f2>
    17a8:	86 e0       	ldi	r24, 0x06	; 6
          PartFound = PART_THYRISTOR;
    17aa:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <PartFound>
    17ae:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <ntrans+0xf>
          ntrans.count++;		// mark as two N-type transistors
    17b2:	8f 5f       	subi	r24, 0xFF	; 255
    17b4:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <ntrans+0xf>
    17b8:	b6 01       	movw	r22, r12
          ntrans.uBE = unsigned_diff(adc.tp2, adc.lp2);	// Gate - Cathode Voltage 
    17ba:	8f 81       	ldd	r24, Y+7	; 0x07
    17bc:	98 85       	ldd	r25, Y+8	; 0x08
    17be:	2c d8       	rcall	.-4008   	; 0x818 <unsigned_diff>
    17c0:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <ntrans+0x5>
    17c4:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <ntrans+0x4>
    17c8:	b6 01       	movw	r22, r12
    17ca:	c7 01       	movw	r24, r14
          ntrans.gthvoltage = unsigned_diff(adc.hp1, adc.lp2);	// Anode-Cathode Voltage
    17cc:	25 d8       	rcall	.-4022   	; 0x818 <unsigned_diff>
    17ce:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <ntrans+0xb>
    17d2:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <ntrans+0xa>
    17d6:	14 b8       	out	0x04, r1	; 4
    17d8:	15 b8       	out	0x05, r1	; 5
    17da:	19 81       	ldd	r17, Y+1	; 0x01
          R_DDR = 0;
    17dc:	18 b9       	out	0x08, r17	; 8
          R_PORT = 0;
    17de:	0e 94 8c 03 	call	0x718	; 0x718 <wait5ms>
          ADC_PORT = LoADCp;	//Low-Pin fix to VCC
    17e2:	84 b8       	out	0x04, r8	; 4
          wait_about5ms();
    17e4:	88 8d       	ldd	r24, Y+24	; 0x18
    17e6:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
          if(W5msReadADC(HighPin) > 244) {
    17ea:	85 3f       	cpi	r24, 0xF5	; 245
    17ec:	91 05       	cpc	r25, r1
    17ee:	10 f5       	brcc	.+68     	; 0x1834 <CheckPins+0x7b2>
    17f0:	0b 81       	ldd	r16, Y+3	; 0x03
    17f2:	04 b9       	out	0x04, r16	; 4
    17f4:	82 2d       	mov	r24, r2
          R_DDR = HiPinRL | TriPinRL;	//switch R_L port for TristatePin (Gate) to output (GND) => Triac should be triggered 
    17f6:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
          if(W5msReadADC(TristatePin) < 977) {
    17fa:	81 3d       	cpi	r24, 0xD1	; 209
    17fc:	93 40       	sbci	r25, 0x03	; 3
    17fe:	d0 f0       	brcs	.+52     	; 0x1834 <CheckPins+0x7b2>
    1800:	88 8d       	ldd	r24, Y+24	; 0x18
    1802:	0e 94 a5 03 	call	0x74a	; 0x74a <ReadADC>
          if(ReadADC(HighPin) < 733) {
    1806:	8d 3d       	cpi	r24, 0xDD	; 221
    1808:	92 40       	sbci	r25, 0x02	; 2
    180a:	a0 f0       	brcs	.+40     	; 0x1834 <CheckPins+0x7b2>
    180c:	84 b8       	out	0x04, r8	; 4
    180e:	88 8d       	ldd	r24, Y+24	; 0x18
    1810:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
          if(W5msReadADC(HighPin) < 733) {
    1814:	8d 3d       	cpi	r24, 0xDD	; 221
    1816:	92 40       	sbci	r25, 0x02	; 2
    1818:	68 f0       	brcs	.+26     	; 0x1834 <CheckPins+0x7b2>
    181a:	85 b8       	out	0x05, r8	; 5
    181c:	0e 94 8c 03 	call	0x718	; 0x718 <wait5ms>
          R_PORT = HiPinRL;		//switch R_L port for HighPin to VCC => switch off holding current 
    1820:	15 b8       	out	0x05, r1	; 5
          wait_about5ms();
    1822:	88 8d       	ldd	r24, Y+24	; 0x18
    1824:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
          if(W5msReadADC(HighPin) > 244) {
    1828:	85 3f       	cpi	r24, 0xF5	; 245
    182a:	91 05       	cpc	r25, r1
    182c:	18 f4       	brcc	.+6      	; 0x1834 <CheckPins+0x7b2>
    182e:	87 e0       	ldi	r24, 0x07	; 7
    1830:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <PartFound>
          PartFound = PART_TRIAC;
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	f4 c0       	rjmp	.+488    	; 0x1a20 <CheckPins+0x99e>
    1838:	0f 81       	ldd	r16, Y+7	; 0x07
  update_pins = 1;			// if a part is found, always update the pins
    183a:	04 b9       	out	0x04, r16	; 4
    183c:	95 b8       	out	0x05, r9	; 5
      R_DDR = LoPinRL | TriPinRL;
    183e:	89 8d       	ldd	r24, Y+25	; 0x19
    1840:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
      adc.lp1 = W5msReadADC(LowPin);	// voltage at Emitter resistor
    1844:	5c 01       	movw	r10, r24
    1846:	82 2d       	mov	r24, r2
    1848:	0e 94 a5 03 	call	0x74a	; 0x74a <ReadADC>
      adc.tp1 = ReadADC(TristatePin);	// voltage at the Base 
    184c:	9e 83       	std	Y+6, r25	; 0x06
    184e:	8d 83       	std	Y+5, r24	; 0x05
    1850:	0e 94 07 04 	call	0x80e	; 0x80e <vcc_diff>
    1854:	8c 01       	movw	r16, r24
      adc.rtp = vcc_diff(adc.tp1);	// voltage at Base resistor
    1856:	c5 01       	movw	r24, r10
    1858:	4a 14       	cp	r4, r10
    185a:	5b 04       	cpc	r5, r11
          tmp16 -= adc.lp_otr;
    185c:	10 f4       	brcc	.+4      	; 0x1862 <CheckPins+0x7e0>
       if (tmp16 > adc.lp_otr) {
    185e:	84 19       	sub	r24, r4
    1860:	95 09       	sbc	r25, r5
    1862:	b8 01       	movw	r22, r16
          tmp16 -= adc.lp_otr;
    1864:	0e 94 0c 04 	call	0x818	; 0x818 <unsigned_diff>
       c_hfe = (unsigned long)((unsigned long)unsigned_diff(tmp16, adc.rtp) * 100) / adc.rtp;
    1868:	9c 01       	movw	r18, r24
    186a:	a4 e6       	ldi	r26, 0x64	; 100
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <__umulhisi3>
    1872:	57 cf       	rjmp	.-338    	; 0x1722 <CheckPins+0x6a0>
    1874:	09 81       	ldd	r16, Y+1	; 0x01
    1876:	07 b9       	out	0x07, r16	; 7
    1878:	94 b8       	out	0x04, r9	; 4
      ADC_DDR = LoADCm;	//Low-Pin to output 0V
    187a:	95 b8       	out	0x05, r9	; 5
    187c:	0e 94 8c 03 	call	0x718	; 0x718 <wait5ms>
      R_PORT = TriPinRL;	//R_L port of Tristate-Pin (Basis) to VCC
    1880:	1a 81       	ldd	r17, Y+2	; 0x02
      wait_about5ms();			// load gate capacitor
    1882:	14 b9       	out	0x04, r17	; 4
    1884:	15 b9       	out	0x05, r17	; 5
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
    1886:	88 8d       	ldd	r24, Y+24	; 0x18
    1888:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
      adc.hp2 = W5msReadADC(HighPin);	//measure the voltage at the collector  
    188c:	7c 01       	movw	r14, r24
    188e:	0e 94 07 04 	call	0x80e	; 0x80e <vcc_diff>
    1892:	8c 01       	movw	r16, r24
      adc.rhp = vcc_diff(adc.hp2);	// voltage at the collector resistor
    1894:	82 2d       	mov	r24, r2
    1896:	0e 94 a5 03 	call	0x74a	; 0x74a <ReadADC>
      adc.tp2 = ReadADC(TristatePin);	//measure the voltage at the base 
    189a:	9c 83       	std	Y+4, r25	; 0x04
    189c:	8b 83       	std	Y+3, r24	; 0x03
    189e:	0e 94 07 04 	call	0x80e	; 0x80e <vcc_diff>
    18a2:	98 87       	std	Y+8, r25	; 0x08
      adc.rtp = vcc_diff(adc.tp2);	// voltage at the base resistor
    18a4:	8f 83       	std	Y+7, r24	; 0x07
    18a6:	89 8d       	ldd	r24, Y+25	; 0x19
    18a8:	0e 94 a5 03 	call	0x74a	; 0x74a <ReadADC>
      adc.lp2 = ReadADC(LowPin);
    18ac:	6c 01       	movw	r12, r24
    18ae:	2f 81       	ldd	r18, Y+7	; 0x07
    18b0:	38 85       	ldd	r19, Y+8	; 0x08
    18b2:	2e 3f       	cpi	r18, 0xFE	; 254
      if(adc.rtp > 2557) {		// Basis-voltage R_H is low enough
    18b4:	39 40       	sbci	r19, 0x09	; 9
    18b6:	08 f4       	brcc	.+2      	; 0x18ba <CheckPins+0x838>
    18b8:	c4 c0       	rjmp	.+392    	; 0x1a42 <CheckPins+0x9c0>
    18ba:	84 e0       	ldi	r24, 0x04	; 4
    18bc:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <PartFound>
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
    18c0:	8c e0       	ldi	r24, 0x0C	; 12
    18c2:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <PartMode>
         PartMode = PART_MODE_NPN;
    18c6:	b2 01       	movw	r22, r4
    18c8:	c8 01       	movw	r24, r16
    18ca:	0e 94 0c 04 	call	0x818	; 0x818 <unsigned_diff>
         tmp16 = unsigned_diff(adc.rhp, adc.lp_otr);	// subtract residual current
    18ce:	7c 01       	movw	r14, r24
    18d0:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <resis680pl>
    18d4:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <resis680pl+0x1>
              (unsigned int)RR680PL)) / (unsigned int)adc.rtp;	
    18d8:	50 e0       	ldi	r21, 0x00	; 0
    18da:	40 e0       	ldi	r20, 0x00	; 0
    18dc:	60 e8       	ldi	r22, 0x80	; 128
    18de:	71 ea       	ldi	r23, 0xA1	; 161
    18e0:	83 e0       	ldi	r24, 0x03	; 3
         e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 10000) / 
    18e2:	9c e1       	ldi	r25, 0x1C	; 28
    18e4:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    18e8:	d7 01       	movw	r26, r14
    18ea:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <__muluhisi3>
    18ee:	af 81       	ldd	r26, Y+7	; 0x07
    18f0:	b8 85       	ldd	r27, Y+8	; 0x08
    18f2:	9d 01       	movw	r18, r26
              (unsigned int)RR680PL)) / (unsigned int)adc.rtp;	
    18f4:	50 e0       	ldi	r21, 0x00	; 0
    18f6:	40 e0       	ldi	r20, 0x00	; 0
    18f8:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    18fc:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <ntrans+0xf>
         e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 10000) / 
    1900:	88 23       	and	r24, r24
         if ((ntrans.count == 0) || (e_hfe > ntrans.hfe)){
    1902:	71 f0       	breq	.+28     	; 0x1920 <CheckPins+0x89e>
    1904:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <ntrans>
    1908:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <ntrans+0x1>
    190c:	a0 91 3d 01 	lds	r26, 0x013D	; 0x80013d <ntrans+0x2>
    1910:	b0 91 3e 01 	lds	r27, 0x013E	; 0x80013e <ntrans+0x3>
    1914:	82 17       	cp	r24, r18
    1916:	93 07       	cpc	r25, r19
    1918:	a4 07       	cpc	r26, r20
    191a:	b5 07       	cpc	r27, r21
    191c:	08 f0       	brcs	.+2      	; 0x1920 <CheckPins+0x89e>
    191e:	7c c0       	rjmp	.+248    	; 0x1a18 <CheckPins+0x996>
    1920:	20 93 3b 01 	sts	0x013B, r18	; 0x80013b <ntrans>
    1924:	30 93 3c 01 	sts	0x013C, r19	; 0x80013c <ntrans+0x1>
            ntrans.hfe = e_hfe;
    1928:	40 93 3d 01 	sts	0x013D, r20	; 0x80013d <ntrans+0x2>
    192c:	50 93 3e 01 	sts	0x013E, r21	; 0x80013e <ntrans+0x3>
    1930:	b6 01       	movw	r22, r12
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	9c 81       	ldd	r25, Y+4	; 0x04
            ntrans.uBE = unsigned_diff(adc.tp2, adc.lp2);
    1936:	0e 94 0c 04 	call	0x818	; 0x818 <unsigned_diff>
    193a:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <ntrans+0x5>
    193e:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <ntrans+0x4>
    1942:	98 01       	movw	r18, r16
    1944:	a0 e1       	ldi	r26, 0x10	; 16
    1946:	b7 e2       	ldi	r27, 0x27	; 39
            ntrans.current = (unsigned int)(((unsigned long)adc.rhp * 10000) / RR680PL); // Ic 1uA
    1948:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <__umulhisi3>
    194c:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <resis680pl>
    1950:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <resis680pl+0x1>
    1954:	50 e0       	ldi	r21, 0x00	; 0
    1956:	40 e0       	ldi	r20, 0x00	; 0
    1958:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    195c:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <ntrans+0x7>
    1960:	20 93 41 01 	sts	0x0141, r18	; 0x800141 <ntrans+0x6>
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	40 91 3b 01 	lds	r20, 0x013B	; 0x80013b <ntrans>
            update_pins = 1;
    196a:	50 91 3c 01 	lds	r21, 0x013C	; 0x80013c <ntrans+0x1>
          if (c_hfe >  ntrans.hfe)
    196e:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <ntrans+0x2>
    1972:	70 91 3e 01 	lds	r23, 0x013E	; 0x80013e <ntrans+0x3>
    1976:	09 85       	ldd	r16, Y+9	; 0x09
    1978:	1a 85       	ldd	r17, Y+10	; 0x0a
    197a:	2b 85       	ldd	r18, Y+11	; 0x0b
    197c:	3c 85       	ldd	r19, Y+12	; 0x0c
    197e:	40 17       	cp	r20, r16
    1980:	51 07       	cpc	r21, r17
    1982:	62 07       	cpc	r22, r18
    1984:	73 07       	cpc	r23, r19
    1986:	08 f0       	brcs	.+2      	; 0x198a <CheckPins+0x908>
    1988:	49 c0       	rjmp	.+146    	; 0x1a1c <CheckPins+0x99a>
    198a:	00 93 3b 01 	sts	0x013B, r16	; 0x80013b <ntrans>
    198e:	10 93 3c 01 	sts	0x013C, r17	; 0x80013c <ntrans+0x1>
            ntrans.hfe = c_hfe;
    1992:	20 93 3d 01 	sts	0x013D, r18	; 0x80013d <ntrans+0x2>
    1996:	30 93 3e 01 	sts	0x013E, r19	; 0x80013e <ntrans+0x3>
    199a:	b5 01       	movw	r22, r10
    199c:	8d 81       	ldd	r24, Y+5	; 0x05
    199e:	9e 81       	ldd	r25, Y+6	; 0x06
            ntrans.uBE = unsigned_diff(adc.tp1, adc.lp1);
    19a0:	0e 94 0c 04 	call	0x818	; 0x818 <unsigned_diff>
    19a4:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <ntrans+0x5>
    19a8:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <ntrans+0x4>
    19ac:	95 01       	movw	r18, r10
    19ae:	a0 e1       	ldi	r26, 0x10	; 16
    19b0:	b7 e2       	ldi	r27, 0x27	; 39
            ntrans.current = (unsigned int)(((unsigned long)adc.lp1 * 10000) / RR680MI); // Ie 1uA
    19b2:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <__umulhisi3>
    19b6:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <resis680mi>
    19ba:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <resis680mi+0x1>
    19be:	50 e0       	ldi	r21, 0x00	; 0
    19c0:	40 e0       	ldi	r20, 0x00	; 0
    19c2:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    19c6:	20 5f       	subi	r18, 0xF0	; 240
    19c8:	38 4d       	sbci	r19, 0xD8	; 216
    19ca:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <ntrans+0x7>
            ntrans.current += 10000;	// mark current at emitter!
    19ce:	20 93 41 01 	sts	0x0141, r18	; 0x800141 <ntrans+0x6>
    19d2:	92 01       	movw	r18, r4
    19d4:	a0 e1       	ldi	r26, 0x10	; 16
    19d6:	b7 e2       	ldi	r27, 0x27	; 39
            ntrans.ice0 = (unsigned int)(((unsigned long)adc.lp_otr * 10000) / RR680MI); // ICE0 0.01mA
    19d8:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <__umulhisi3>
    19dc:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <resis680mi>
    19e0:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <resis680mi+0x1>
    19e4:	50 e0       	ldi	r21, 0x00	; 0
    19e6:	40 e0       	ldi	r20, 0x00	; 0
    19e8:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    19ec:	30 93 44 01 	sts	0x0144, r19	; 0x800144 <ntrans+0x9>
    19f0:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <ntrans+0x8>
    19f4:	93 01       	movw	r18, r6
    19f6:	a0 e1       	ldi	r26, 0x10	; 16
    19f8:	b7 e2       	ldi	r27, 0x27	; 39
            ntrans.ices = (unsigned int)(((unsigned long)adc.vCEs * 10000) / RR680PL); // ICEs 0.01mA
    19fa:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <__umulhisi3>
    19fe:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <resis680pl>
    1a02:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <resis680pl+0x1>
    1a06:	50 e0       	ldi	r21, 0x00	; 0
    1a08:	40 e0       	ldi	r20, 0x00	; 0
    1a0a:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    1a0e:	30 93 46 01 	sts	0x0146, r19	; 0x800146 <ntrans+0xb>
    1a12:	20 93 45 01 	sts	0x0145, r18	; 0x800145 <ntrans+0xa>
    1a16:	0e cf       	rjmp	.-484    	; 0x1834 <CheckPins+0x7b2>
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	a5 cf       	rjmp	.-182    	; 0x1966 <CheckPins+0x8e4>
    1a1c:	81 11       	cpse	r24, r1
         update_pins = 0;		// only update pins, if better hFE
    1a1e:	d9 cf       	rjmp	.-78     	; 0x19d2 <CheckPins+0x950>
    1a20:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <ntrans+0xf>
         if (update_pins != 0) {
    1a24:	9f 5f       	subi	r25, 0xFF	; 255
//---------------------------------------------------------------------------
saveNresult:
#if DebugOut == 5
 lcd_data('N');
#endif
 ntrans.count++;
    1a26:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <ntrans+0xf>
    1a2a:	88 23       	and	r24, r24
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <CheckPins+0x9ae>
 if (update_pins != 0) {
    1a2e:	26 c1       	rjmp	.+588    	; 0x1c7c <CheckPins+0xbfa>
    1a30:	20 92 47 01 	sts	0x0147, r2	; 0x800147 <ntrans+0xc>
    ntrans.b = TristatePin;	// save Pin-constellation
    1a34:	08 8d       	ldd	r16, Y+24	; 0x18
    1a36:	00 93 48 01 	sts	0x0148, r16	; 0x800148 <ntrans+0xd>
    ntrans.c = HighPin;
    1a3a:	19 8d       	ldd	r17, Y+25	; 0x19
    1a3c:	10 93 49 01 	sts	0x0149, r17	; 0x800149 <ntrans+0xe>
    ntrans.e = LowPin;
    1a40:	1d c1       	rjmp	.+570    	; 0x1c7c <CheckPins+0xbfa>
    1a42:	21 e6       	ldi	r18, 0x61	; 97
    1a44:	42 16       	cp	r4, r18
      if((adc.lp_otr < 97) && (adc.rhp > 3400)) {
    1a46:	51 04       	cpc	r5, r1
    1a48:	08 f0       	brcs	.+2      	; 0x1a4c <CheckPins+0x9ca>
    1a4a:	60 c0       	rjmp	.+192    	; 0x1b0c <CheckPins+0xa8a>
    1a4c:	09 34       	cpi	r16, 0x49	; 73
    1a4e:	3d e0       	ldi	r19, 0x0D	; 13
    1a50:	13 07       	cpc	r17, r19
    1a52:	08 f4       	brcc	.+2      	; 0x1a56 <CheckPins+0x9d4>
    1a54:	5b c0       	rjmp	.+182    	; 0x1b0c <CheckPins+0xa8a>
    1a56:	85 e0       	ldi	r24, 0x05	; 5
    1a58:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <PartFound>
         PartFound = PART_FET;	//N-Kanal-MOSFET is found (Basis/Gate will Not be pulled down)
    1a5c:	82 e0       	ldi	r24, 0x02	; 2
    1a5e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <PartMode>
         PartMode = PART_MODE_MOS|N_CHANNEL|E_MODE;
    1a62:	c6 01       	movw	r24, r12
    1a64:	86 50       	subi	r24, 0x06	; 6
         if (adc.hp2 > (250+adc.lp2)) {
    1a66:	9f 4f       	sbci	r25, 0xFF	; 255
    1a68:	8e 15       	cp	r24, r14
    1a6a:	9f 05       	cpc	r25, r15
    1a6c:	c8 f5       	brcc	.+114    	; 0x1ae0 <CheckPins+0xa5e>
    1a6e:	83 e0       	ldi	r24, 0x03	; 3
    1a70:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <PartMode>
            PartMode = PART_MODE_IGBT|N_CHANNEL|E_MODE;
    1a74:	43 2d       	mov	r20, r3
    1a76:	47 70       	andi	r20, 0x07	; 7
         PinMSK = HiADCm & 7;
    1a78:	34 2e       	mov	r3, r20
    1a7a:	82 2d       	mov	r24, r2
    1a7c:	80 64       	ori	r24, 0x40	; 64
         ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
    1a7e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1a82:	7b e0       	ldi	r23, 0x0B	; 11
    1a84:	f7 2e       	mov	r15, r23
    1a86:	01 e0       	ldi	r16, 0x01	; 1
    1a88:	10 e0       	ldi	r17, 0x00	; 0
         tmp16 = 1;			// round up ((1*4)/9)
    1a8a:	a8 95       	wdr
    1a8c:	60 e0       	ldi	r22, 0x00	; 0
            wdt_reset();
    1a8e:	89 2d       	mov	r24, r9
            ChargePin10ms(TriPinRL,0);	// discharge Gate 10ms with RL 
    1a90:	1d d3       	rcall	.+1594   	; 0x20cc <ChargePin10ms>
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	84 b9       	out	0x04, r24	; 4
    1a96:	85 b9       	out	0x05, r24	; 5
            R_DDR = HiPinRL | TriPinRH;	// slowly charge Gate 
    1a98:	86 b1       	in	r24, 0x06	; 6
    1a9a:	83 21       	and	r24, r3
            R_PORT = HiPinRL | TriPinRH;
    1a9c:	e9 f7       	brne	.-6      	; 0x1a98 <CheckPins+0xa16>
            while ((ADC_PIN&PinMSK));	// Wait, until the MOSFET switch and Drain moved to low 
    1a9e:	84 b8       	out	0x04, r8	; 4
    1aa0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
            R_DDR = HiPinRL;		// switch off current
    1aa4:	80 64       	ori	r24, 0x40	; 64
            ADCSRA |= (1<<ADSC);		// start ADC conversion
    1aa6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1aaa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1aae:	86 fd       	sbrc	r24, 6
            while (ADCSRA&(1<<ADSC));	// wait until ADC finished
    1ab0:	fc cf       	rjmp	.-8      	; 0x1aaa <CheckPins+0xa28>
    1ab2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1ab6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
            tmp16 += ADCW;		// add result of ADC
    1aba:	08 0f       	add	r16, r24
    1abc:	19 1f       	adc	r17, r25
    1abe:	fa 94       	dec	r15
    1ac0:	f1 10       	cpse	r15, r1
    1ac2:	e3 cf       	rjmp	.-58     	; 0x1a8a <CheckPins+0xa08>
    1ac4:	c8 01       	movw	r24, r16
         for(ii=0;ii<11;ii++) {
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
         tmp16 *= 4;	//is equal to 44 * ADCW
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	69 e0       	ldi	r22, 0x09	; 9
    1ad0:	70 e0       	ldi	r23, 0x00	; 0
    1ad2:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <__udivmodhi4>
         ntrans.gthvoltage = tmp16/ 9;	//scale to mV
    1ad6:	70 93 46 01 	sts	0x0146, r23	; 0x800146 <ntrans+0xb>
    1ada:	60 93 45 01 	sts	0x0145, r22	; 0x800145 <ntrans+0xa>
    1ade:	e0 cb       	rjmp	.-2112   	; 0x12a0 <CheckPins+0x21e>
    1ae0:	a0 90 17 01 	lds	r10, 0x0117	; 0x800117 <resis680pl>
    1ae4:	b0 90 18 01 	lds	r11, 0x0118	; 0x800118 <resis680pl+0x1>
            ntrans.uBE = RR680PL * (unsigned long)unsigned_diff(adc.hp2, adc.lp2) / adc.rhp; // DS resistance in 0.1 OHm
    1ae8:	b6 01       	movw	r22, r12
    1aea:	c7 01       	movw	r24, r14
    1aec:	0e 94 0c 04 	call	0x818	; 0x818 <unsigned_diff>
    1af0:	95 01       	movw	r18, r10
    1af2:	dc 01       	movw	r26, r24
    1af4:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <__umulhisi3>
    1af8:	98 01       	movw	r18, r16
    1afa:	50 e0       	ldi	r21, 0x00	; 0
    1afc:	40 e0       	ldi	r20, 0x00	; 0
    1afe:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    1b02:	30 93 40 01 	sts	0x0140, r19	; 0x800140 <ntrans+0x5>
    1b06:	20 93 3f 01 	sts	0x013F, r18	; 0x80013f <ntrans+0x4>
    1b0a:	b4 cf       	rjmp	.-152    	; 0x1a74 <CheckPins+0x9f2>
    1b0c:	17 b8       	out	0x07, r1	; 7
   ADC_DDR = TXD_MSK;		// switch all ADC-Ports to input
    1b0e:	18 b8       	out	0x08, r1	; 8
   ADC_PORT = TXD_VAL;		// switch all ADC-Ports to 0 (no Pull up)
    1b10:	14 b8       	out	0x04, r1	; 4
  R_DDR = 0;			//switch off resistor current
    1b12:	15 b8       	out	0x05, r1	; 5
  R_PORT = 0;
    1b14:	17 b8       	out	0x07, r1	; 7
  ADC_DDR = TXD_MSK;		// switch ADC ports to input
    1b16:	97 ec       	ldi	r25, 0xC7	; 199
  if (adc.lp_otr < 455) {
    1b18:	49 16       	cp	r4, r25
    1b1a:	91 e0       	ldi	r25, 0x01	; 1
    1b1c:	59 06       	cpc	r5, r25
    1b1e:	08 f4       	brcc	.+2      	; 0x1b22 <CheckPins+0xaa0>
    1b20:	d2 c0       	rjmp	.+420    	; 0x1cc6 <CheckPins+0xc44>
    1b22:	18 b8       	out	0x08, r1	; 8
  ADC_PORT = TXD_VAL;
    1b24:	0e 85       	ldd	r16, Y+14	; 0x0e
  R_DDR = HiPinRH;              // enable resistor from HiPin to ground during the upcoming discharge, so if there's some leakage in the circuit (e.g., via protection diodes) this can't upset the discharge test
    1b26:	04 b9       	out	0x04, r16	; 4
    1b28:	18 ec       	ldi	r17, 0xC8	; 200
    1b2a:	09 81       	ldd	r16, Y+1	; 0x01
     ADC_DDR = LoADCm | HiADCm; // discharge by short of Low and High side
    1b2c:	03 29       	or	r16, r3
    1b2e:	07 b9       	out	0x07, r16	; 7
    1b30:	0e 94 8c 03 	call	0x718	; 0x718 <wait5ms>
     wait_about5ms();		// Low and Highpin to GND for discharge
    1b34:	29 81       	ldd	r18, Y+1	; 0x01
     ADC_DDR = LoADCm;		// switch only Low-Pin fix to GND
    1b36:	27 b9       	out	0x07, r18	; 7
    1b38:	88 8d       	ldd	r24, Y+24	; 0x18
     adc.hp1 = ReadADC(HighPin); // read voltage at High-Pin
    1b3a:	0e 94 a5 03 	call	0x74a	; 0x74a <ReadADC>
    1b3e:	42 97       	sbiw	r24, 0x12	; 18
     if (adc.hp1 < (150/8)) break;
    1b40:	10 f0       	brcs	.+4      	; 0x1b46 <CheckPins+0xac4>
    1b42:	11 50       	subi	r17, 0x01	; 1
    1b44:	a1 f7       	brne	.-24     	; 0x1b2e <CheckPins+0xaac>
  for (ii=0;ii<200;ii++) {
    1b46:	0e 85       	ldd	r16, Y+14	; 0x0e
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
    1b48:	04 b9       	out	0x04, r16	; 4
    1b4a:	05 b9       	out	0x05, r16	; 5
  R_PORT = HiPinRH;
    1b4c:	61 e0       	ldi	r22, 0x01	; 1
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
    1b4e:	89 2d       	mov	r24, r9
    1b50:	bd d2       	rcall	.+1402   	; 0x20cc <ChargePin10ms>
    1b52:	88 8d       	ldd	r24, Y+24	; 0x18
  adc.hp2 = W5msReadADC(HighPin); 		// GND--|<--HP--R_H--VCC
    1b54:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
    1b58:	5c 01       	movw	r10, r24
    1b5a:	1f 89       	ldd	r17, Y+23	; 0x17
  R_DDR = LoPinRH;
    1b5c:	14 b9       	out	0x04, r17	; 4
    1b5e:	15 b8       	out	0x05, r1	; 5
  R_PORT = 0;
    1b60:	37 b8       	out	0x07, r3	; 7
  ADC_DDR = HiADCm;		// switch High-Pin fix to VCC
    1b62:	38 b8       	out	0x08, r3	; 8
  ADC_PORT = HiADCp;
    1b64:	60 e0       	ldi	r22, 0x00	; 0
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
    1b66:	89 2d       	mov	r24, r9
    1b68:	b1 d2       	rcall	.+1378   	; 0x20cc <ChargePin10ms>
    1b6a:	89 8d       	ldd	r24, Y+25	; 0x19
    1b6c:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
  adc.hp3 = vcc_diff(W5msReadADC(LowPin)); // GND--R_H--LP--|<--VCC
    1b70:	0e 94 07 04 	call	0x80e	; 0x80e <vcc_diff>
    1b74:	7c 01       	movw	r14, r24
    1b76:	0d 85       	ldd	r16, Y+13	; 0x0d
    1b78:	04 b9       	out	0x04, r16	; 4
  R_DDR = LoPinRL;
    1b7a:	89 8d       	ldd	r24, Y+25	; 0x19
    1b7c:	0e 94 a5 03 	call	0x74a	; 0x74a <ReadADC>
  adc.hp1 = unsigned_diff(W5msReadADC(HighPin), ReadADC(LowPin)); // GND--R_L--LP--|<--VCC
    1b80:	8c 01       	movw	r16, r24
    1b82:	88 8d       	ldd	r24, Y+24	; 0x18
    1b84:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
    1b88:	b8 01       	movw	r22, r16
    1b8a:	0e 94 0c 04 	call	0x818	; 0x818 <unsigned_diff>
    1b8e:	6c 01       	movw	r12, r24
    1b90:	89 8d       	ldd	r24, Y+25	; 0x19
    1b92:	0e 94 a5 03 	call	0x74a	; 0x74a <ReadADC>
  adc.lp_otr = unsigned_diff(W5msReadADC(HighPin), ReadADC(LowPin)); // GND--R_L--LP--|<--VCC
    1b96:	8c 01       	movw	r16, r24
    1b98:	88 8d       	ldd	r24, Y+24	; 0x18
    1b9a:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
    1b9e:	b8 01       	movw	r22, r16
    1ba0:	0e 94 0c 04 	call	0x818	; 0x818 <unsigned_diff>
    1ba4:	96 01       	movw	r18, r12
    1ba6:	2c 5e       	subi	r18, 0xEC	; 236
  if (adc.lp_otr > (adc.hp1+20))
    1ba8:	3f 4f       	sbci	r19, 0xFF	; 255
    1baa:	28 17       	cp	r18, r24
    1bac:	39 07       	cpc	r19, r25
    1bae:	08 f4       	brcc	.+2      	; 0x1bb2 <CheckPins+0xb30>
    1bb0:	65 c0       	rjmp	.+202    	; 0x1c7c <CheckPins+0xbfa>
    1bb2:	18 b8       	out	0x08, r1	; 8
    1bb4:	19 81       	ldd	r17, Y+1	; 0x01
  ADC_PORT = TXD_VAL;
    1bb6:	17 b9       	out	0x07, r17	; 7
  ADC_DDR = LoADCm;		// switch only Low-Pin fix to GND
    1bb8:	84 b8       	out	0x04, r8	; 4
    1bba:	85 b8       	out	0x05, r8	; 5
  R_DDR = HiPinRL;		//switch R_L port for High-Pin output (VCC)
    1bbc:	61 e0       	ldi	r22, 0x01	; 1
  R_PORT = HiPinRL;
    1bbe:	89 2d       	mov	r24, r9
  ChargePin10ms(TriPinRL,1);	//discharge for P-Kanal-MOSFET gate
    1bc0:	85 d2       	rcall	.+1290   	; 0x20cc <ChargePin10ms>
    1bc2:	89 8d       	ldd	r24, Y+25	; 0x19
    1bc4:	0e 94 a5 03 	call	0x74a	; 0x74a <ReadADC>
  adc.lp_otr = unsigned_diff(W5msReadADC(HighPin), ReadADC(LowPin)); // GND--|<--HP--R_L--VCC
    1bc8:	8c 01       	movw	r16, r24
    1bca:	88 8d       	ldd	r24, Y+24	; 0x18
    1bcc:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
    1bd0:	b8 01       	movw	r22, r16
    1bd2:	0e 94 0c 04 	call	0x818	; 0x818 <unsigned_diff>
    1bd6:	8c 01       	movw	r16, r24
    1bd8:	c8 16       	cp	r12, r24
    1bda:	d9 06       	cpc	r13, r25
    1bdc:	08 f0       	brcs	.+2      	; 0x1be0 <CheckPins+0xb5e>
  if(adc.lp_otr > adc.hp1) {
    1bde:	5c c0       	rjmp	.+184    	; 0x1c98 <CheckPins+0xc16>
    1be0:	2e 85       	ldd	r18, Y+14	; 0x0e
    1be2:	24 b9       	out	0x04, r18	; 4
    1be4:	25 b9       	out	0x05, r18	; 5
      R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
    1be6:	88 8d       	ldd	r24, Y+24	; 0x18
    1be8:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
      adc.hp2 = W5msReadADC(HighPin); 		// GND--|<--HP--R_H--VCC
    1bec:	9c 01       	movw	r18, r24
    1bee:	75 01       	movw	r14, r10
    1bf0:	08 3e       	cpi	r16, 0xE8	; 232
    1bf2:	43 e0       	ldi	r20, 0x03	; 3
      adc.hp3 = adc.hp2;
    1bf4:	14 07       	cpc	r17, r20
  if (adc.hp1 < 1000) tmp16 = adc.hp1/100;
    1bf6:	08 f0       	brcs	.+2      	; 0x1bfa <CheckPins+0xb78>
    1bf8:	5f c0       	rjmp	.+190    	; 0x1cb8 <CheckPins+0xc36>
    1bfa:	c8 01       	movw	r24, r16
    1bfc:	64 e6       	ldi	r22, 0x64	; 100
    1bfe:	70 e0       	ldi	r23, 0x00	; 0
    1c00:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <__udivmodhi4>
    1c04:	c8 01       	movw	r24, r16
    1c06:	87 59       	subi	r24, 0x97	; 151
    1c08:	91 09       	sbc	r25, r1
  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp2 < adc.hp1) && (adc.hp1 > (adc.hp3+volt_dif)) && (adc.hp3 > tmp16))
    1c0a:	89 38       	cpi	r24, 0x89	; 137
    1c0c:	91 41       	sbci	r25, 0x11	; 17
    1c0e:	08 f0       	brcs	.+2      	; 0x1c12 <CheckPins+0xb90>
    1c10:	5a c0       	rjmp	.+180    	; 0x1cc6 <CheckPins+0xc44>
    1c12:	20 17       	cp	r18, r16
    1c14:	31 07       	cpc	r19, r17
    1c16:	08 f0       	brcs	.+2      	; 0x1c1a <CheckPins+0xb98>
    1c18:	56 c0       	rjmp	.+172    	; 0x1cc6 <CheckPins+0xc44>
    1c1a:	c7 01       	movw	r24, r14
    1c1c:	43 e0       	ldi	r20, 0x03	; 3
    1c1e:	96 95       	lsr	r25
  volt_dif = adc.hp3/8;
    1c20:	87 95       	ror	r24
    1c22:	4a 95       	dec	r20
    1c24:	e1 f7       	brne	.-8      	; 0x1c1e <CheckPins+0xb9c>
    1c26:	89 3c       	cpi	r24, 0xC9	; 201
    1c28:	91 05       	cpc	r25, r1
    1c2a:	10 f0       	brcs	.+4      	; 0x1c30 <CheckPins+0xbae>
  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp2 < adc.hp1) && (adc.hp1 > (adc.hp3+volt_dif)) && (adc.hp3 > tmp16))
    1c2c:	88 ec       	ldi	r24, 0xC8	; 200
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	8e 0d       	add	r24, r14
    1c32:	9f 1d       	adc	r25, r15
    1c34:	80 17       	cp	r24, r16
    1c36:	91 07       	cpc	r25, r17
    1c38:	08 f0       	brcs	.+2      	; 0x1c3c <CheckPins+0xbba>
    1c3a:	45 c0       	rjmp	.+138    	; 0x1cc6 <CheckPins+0xc44>
    1c3c:	6e 15       	cp	r22, r14
    1c3e:	7f 05       	cpc	r23, r15
    1c40:	08 f0       	brcs	.+2      	; 0x1c44 <CheckPins+0xbc2>
    1c42:	41 c0       	rjmp	.+130    	; 0x1cc6 <CheckPins+0xc44>
    1c44:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <PartFound>
     if(PartFound < PART_DIODE) {
    1c48:	83 30       	cpi	r24, 0x03	; 3
    1c4a:	18 f4       	brcc	.+6      	; 0x1c52 <CheckPins+0xbd0>
    1c4c:	83 e0       	ldi	r24, 0x03	; 3
    1c4e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <PartFound>
        PartFound = PART_DIODE;	//mark for diode only, if no other component is found
    1c52:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <NumOfDiodes>
     diodes.Anode[NumOfDiodes] = HighPin;
    1c56:	82 2f       	mov	r24, r18
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	e2 58       	subi	r30, 0x82	; 130
    1c5e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c60:	b8 8d       	ldd	r27, Y+24	; 0x18
    1c62:	b0 83       	st	Z, r27
    1c64:	39 8d       	ldd	r19, Y+25	; 0x19
     diodes.Cathode[NumOfDiodes] = LowPin;
    1c66:	36 83       	std	Z+6, r19	; 0x06
    1c68:	88 0f       	add	r24, r24
     diodes.Voltage[NumOfDiodes] = adc.hp1;	// voltage in Millivolt 
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	e6 57       	subi	r30, 0x76	; 118
    1c70:	fe 4f       	sbci	r31, 0xFE	; 254
    1c72:	11 83       	std	Z+1, r17	; 0x01
    1c74:	00 83       	st	Z, r16
    1c76:	2f 5f       	subi	r18, 0xFF	; 255
     NumOfDiodes++;
    1c78:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <NumOfDiodes>
    1c7c:	17 b8       	out	0x07, r1	; 7
  ADC_DDR = TXD_MSK;		// all ADC-Pins Input
    1c7e:	18 b8       	out	0x08, r1	; 8
  ADC_PORT = TXD_VAL;		// all ADC outputs to Ground, keine Pull up
    1c80:	14 b8       	out	0x04, r1	; 4
  R_DDR = 0;			// all resistor-outputs to Input
    1c82:	15 b8       	out	0x05, r1	; 5
  R_PORT = 0;			// all resistor-outputs to Ground, no Pull up
    1c84:	8e e2       	ldi	r24, 0x2E	; 46
  lcd_data('.');		// report advance (suggested by Pieter-Tjerk)
    1c86:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_data>
    1c8a:	69 96       	adiw	r28, 0x19	; 25
 }
 goto clean_ports;

} // end CheckPins()
    1c8c:	e2 e1       	ldi	r30, 0x12	; 18
    1c8e:	0c 94 2b 1f 	jmp	0x3e56	; 0x3e56 <__epilogue_restores__>
    1c92:	4a 80       	ldd	r4, Y+2	; 0x02
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin  , without Gate current (+)
    1c94:	50 2e       	mov	r5, r16
    1c96:	3c cf       	rjmp	.-392    	; 0x1b10 <CheckPins+0xa8e>
    1c98:	0f 89       	ldd	r16, Y+23	; 0x17
      R_DDR = LoPinRH;
    1c9a:	04 b9       	out	0x04, r16	; 4
    1c9c:	15 b8       	out	0x05, r1	; 5
      R_PORT = 0;
    1c9e:	37 b8       	out	0x07, r3	; 7
      ADC_DDR = HiADCm;		// switch High-Pin fix to VCC
    1ca0:	38 b8       	out	0x08, r3	; 8
      ADC_PORT = HiADCp;
    1ca2:	60 e0       	ldi	r22, 0x00	; 0
      ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
    1ca4:	89 2d       	mov	r24, r9
    1ca6:	12 d2       	rcall	.+1060   	; 0x20cc <ChargePin10ms>
    1ca8:	89 8d       	ldd	r24, Y+25	; 0x19
    1caa:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
      adc.hp2 = vcc_diff(W5msReadADC(LowPin)); // GND--R_H--LP--|<--VCC
    1cae:	0e 94 07 04 	call	0x80e	; 0x80e <vcc_diff>
    1cb2:	9c 01       	movw	r18, r24
    1cb4:	86 01       	movw	r16, r12
    1cb6:	9c cf       	rjmp	.-200    	; 0x1bf0 <CheckPins+0xb6e>
    1cb8:	b8 01       	movw	r22, r16
    1cba:	54 e0       	ldi	r21, 0x04	; 4
  else                tmp16 = adc.hp1/16;
    1cbc:	76 95       	lsr	r23
    1cbe:	67 95       	ror	r22
    1cc0:	5a 95       	dec	r21
    1cc2:	e1 f7       	brne	.-8      	; 0x1cbc <CheckPins+0xc3a>
    1cc4:	9f cf       	rjmp	.-194    	; 0x1c04 <CheckPins+0xb82>
    1cc6:	69 8d       	ldd	r22, Y+25	; 0x19
    1cc8:	88 8d       	ldd	r24, Y+24	; 0x18
  GetResistance(HighPin, LowPin);
    1cca:	01 d0       	rcall	.+2      	; 0x1cce <GetResistance>
    1ccc:	d7 cf       	rjmp	.-82     	; 0x1c7c <CheckPins+0xbfa>

00001cce <GetResistance>:
#include <stdlib.h>
#include "Transistortester.h"

//******************************************************************
void GetResistance(uint8_t HighPin, uint8_t LowPin)
  {
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	a0 e0       	ldi	r26, 0x00	; 0
    1cd2:	ed e6       	ldi	r30, 0x6D	; 109
    1cd4:	fe e0       	ldi	r31, 0x0E	; 14
    1cd6:	0c 94 11 1f 	jmp	0x3e22	; 0x3e22 <__prologue_saves__+0x4>
    1cda:	c8 2f       	mov	r28, r24
    1cdc:	d6 2f       	mov	r29, r22
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
    1cde:	a8 95       	wdr
  addr = &PinRLRHADCtab[LowPin-TP_MIN];		// address of the combined RL / RH / ADC pin table
    1ce0:	86 2f       	mov	r24, r22
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	e2 58       	subi	r30, 0x82	; 130
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
  LoPinRL = pgm_read_byte(addr);		// instruction for LowPin R_L
    1cea:	54 90       	lpm	r5, Z
  addr += 3;			// address of PinRHtab[LowPin]
  LoPinRH = pgm_read_byte(addr);		// instruction for LowPin R_H
#else
  LoPinRH = (LoPinRL + LoPinRL);
#endif
  addr += 3;			// address of PinADCtab[LowPin]
    1cec:	33 96       	adiw	r30, 0x03	; 3
  LoADCp = pgm_read_byte(addr);		// instruction for ADC Low-Pin, including | TXD_VAL
    1cee:	24 91       	lpm	r18, Z

  addr = &PinRLRHADCtab[HighPin-TP_MIN];
    1cf0:	4c 2f       	mov	r20, r28
    1cf2:	50 e0       	ldi	r21, 0x00	; 0
    1cf4:	fa 01       	movw	r30, r20
    1cf6:	e2 58       	subi	r30, 0x82	; 130
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
  HiPinRL = pgm_read_byte(addr);		// instruction for HighPin R_L
    1cfa:	14 91       	lpm	r17, Z
  addr += 3;			// address of PinRLtab[HighPin]
  HiPinRH = pgm_read_byte(addr);		// instruction for HighPin R_H
#else
  HiPinRH = (HiPinRL + HiPinRL);
#endif
  addr += 3;			// address of PinADCtab[HighPin]
    1cfc:	33 96       	adiw	r30, 0x03	; 3
  HiADCp = pgm_read_byte(addr);		// instruction for ADC High-Pin, including | TXD_VAL
    1cfe:	04 91       	lpm	r16, Z

//##########################################################################################
// Search for resistors
//##########################################################################################
  if ((ptrans.count  + ntrans.count) > 0) {
    1d00:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <ptrans+0xf>
    1d04:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <ntrans+0xf>
    1d08:	63 0f       	add	r22, r19
    1d0a:	77 27       	eor	r23, r23
    1d0c:	77 1f       	adc	r23, r23
    1d0e:	67 2b       	or	r22, r23
    1d10:	09 f0       	breq	.+2      	; 0x1d14 <GetResistance+0x46>
    1d12:	58 c0       	rjmp	.+176    	; 0x1dc4 <GetResistance+0xf6>
     return;	// no resistors are searched, if transistors are detected
  }
  resnum = (LowPin - TP_MIN + HighPin - TP_MIN - 1);	// resistor-Number 0:1 = 0, 0:2 = 1, 1:2 = 2
  // resistor measurement
  wdt_reset();
    1d14:	a8 95       	wdr
// U_SCALE can be set to 4 for better resolution of ReadADC result
#if U_SCALE != 1
  ADCconfig.U_AVCC = (adc_vcc_reference * U_SCALE);	// scale to higher resolution, mV scale is not required
    1d16:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <adc_vcc_reference>
    1d1a:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <adc_vcc_reference+0x1>
    1d1e:	66 0f       	add	r22, r22
    1d20:	77 1f       	adc	r23, r23
    1d22:	66 0f       	add	r22, r22
    1d24:	77 1f       	adc	r23, r23
    1d26:	70 93 2c 01 	sts	0x012C, r23	; 0x80012c <ADCconfig+0x5>
    1d2a:	60 93 2b 01 	sts	0x012B, r22	; 0x80012b <ADCconfig+0x4>
  ADCconfig.U_Bandgap = (adc_internal_reference * U_SCALE);
    1d2e:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <adc_internal_reference>
    1d32:	70 91 64 01 	lds	r23, 0x0164	; 0x800164 <adc_internal_reference+0x1>
    1d36:	66 0f       	add	r22, r22
    1d38:	77 1f       	adc	r23, r23
    1d3a:	66 0f       	add	r22, r22
    1d3c:	77 1f       	adc	r23, r23
    1d3e:	70 93 2a 01 	sts	0x012A, r23	; 0x80012a <ADCconfig+0x3>
    1d42:	60 93 29 01 	sts	0x0129, r22	; 0x800129 <ADCconfig+0x2>
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = R_ANZ_MESS;	// switch to special number of repetitions
    1d46:	3e eb       	ldi	r19, 0xBE	; 190
    1d48:	30 93 27 01 	sts	0x0127, r19	; 0x800127 <ADCconfig>
#endif
  #define MAX_REPEAT (700 / (5 + R_ANZ_MESS/8))
#if FLASHEND > 0x1fff
  for (ii=0; ii<NumOfDiodes; ii++) {
    1d4c:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <NumOfDiodes>
    1d50:	ee e7       	ldi	r30, 0x7E	; 126
    1d52:	f1 e0       	ldi	r31, 0x01	; 1
    1d54:	30 e0       	ldi	r19, 0x00	; 0
     // never search a resistor at the same place, where a diode is detected
     if ((diodes.Anode[ii] + diodes.Cathode[ii]) ==  (HighPin + LowPin)) goto testend;
    1d56:	84 0f       	add	r24, r20
    1d58:	95 1f       	adc	r25, r21
  for (ii=0; ii<NumOfDiodes; ii++) {
    1d5a:	63 13       	cpse	r22, r19
    1d5c:	38 c0       	rjmp	.+112    	; 0x1dce <GetResistance+0x100>
  }
#endif
  ADC_PORT = TXD_VAL;
    1d5e:	18 b8       	out	0x08, r1	; 8
  ADC_DDR = LoADCp | TXD_MSK;		//switch Low-Pin to output (GND)
    1d60:	27 b9       	out	0x07, r18	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    1d62:	14 b9       	out	0x04, r17	; 4
  R_PORT = HiPinRL;	
    1d64:	15 b9       	out	0x05, r17	; 5
    1d66:	b8 e1       	ldi	r27, 0x18	; 24
    1d68:	bb 2e       	mov	r11, r27
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
    1d6a:	d1 2c       	mov	r13, r1
    1d6c:	c1 2c       	mov	r12, r1
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
    1d6e:	8d 2f       	mov	r24, r29
    1d70:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
    1d74:	78 2e       	mov	r7, r24
    1d76:	69 2e       	mov	r6, r25
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    1d78:	8c 2f       	mov	r24, r28
    1d7a:	0e 94 a5 03 	call	0x74a	; 0x74a <ReadADC>
    1d7e:	7c 01       	movw	r14, r24
     udiff = adc.hp1 - adc.hp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    1d80:	8c 19       	sub	r24, r12
    1d82:	9d 09       	sbc	r25, r13
    1d84:	97 ff       	sbrs	r25, 7
    1d86:	03 c0       	rjmp	.+6      	; 0x1d8e <GetResistance+0xc0>
    1d88:	91 95       	neg	r25
    1d8a:	81 95       	neg	r24
    1d8c:	91 09       	sbc	r25, r1
    1d8e:	03 97       	sbiw	r24, 0x03	; 3
    1d90:	0c f4       	brge	.+2      	; 0x1d94 <GetResistance+0xc6>
    1d92:	5a c1       	rjmp	.+692    	; 0x2048 <GetResistance+0x37a>
     adc.hp2 = adc.hp1;
     wdt_reset();
    1d94:	a8 95       	wdr
    1d96:	ba 94       	dec	r11
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    1d98:	67 01       	movw	r12, r14
  for (ii=1;ii<MAX_REPEAT;ii++) {
    1d9a:	b1 10       	cpse	r11, r1
    1d9c:	e8 cf       	rjmp	.-48     	; 0x1d6e <GetResistance+0xa0>
        } // end  ResistorChecked[] != 0
     }	/* end if (PartFound < PART_TRANSISTOR) */
  }
  testend:			// end of resistor measurement
#if U_SCALE != 1
  ADCconfig.U_AVCC = adc_vcc_reference;	// scale to higher resolution, mV scale is not required
    1d9e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <adc_vcc_reference>
    1da2:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <adc_vcc_reference+0x1>
    1da6:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <ADCconfig+0x5>
    1daa:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <ADCconfig+0x4>
  ADCconfig.U_Bandgap = adc_internal_reference;	// set back to normal resolution
    1dae:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <adc_internal_reference>
    1db2:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <adc_internal_reference+0x1>
    1db6:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <ADCconfig+0x3>
    1dba:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <ADCconfig+0x2>
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = ANZ_MESS;		// switch back to standard number of repetition
    1dbe:	89 e1       	ldi	r24, 0x19	; 25
    1dc0:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <ADCconfig>
#endif

  return;
} // end GetResistance()
    1dc4:	cd b7       	in	r28, 0x3d	; 61
    1dc6:	de b7       	in	r29, 0x3e	; 62
    1dc8:	e0 e1       	ldi	r30, 0x10	; 16
    1dca:	0c 94 2d 1f 	jmp	0x3e5a	; 0x3e5a <__epilogue_restores__+0x4>
     if ((diodes.Anode[ii] + diodes.Cathode[ii]) ==  (HighPin + LowPin)) goto testend;
    1dce:	51 91       	ld	r21, Z+
    1dd0:	45 81       	ldd	r20, Z+5	; 0x05
    1dd2:	45 0f       	add	r20, r21
    1dd4:	55 27       	eor	r21, r21
    1dd6:	55 1f       	adc	r21, r21
    1dd8:	48 17       	cp	r20, r24
    1dda:	59 07       	cpc	r21, r25
    1ddc:	01 f3       	breq	.-64     	; 0x1d9e <GetResistance+0xd0>
  for (ii=0; ii<NumOfDiodes; ii++) {
    1dde:	3f 5f       	subi	r19, 0xFF	; 255
    1de0:	bc cf       	rjmp	.-136    	; 0x1d5a <GetResistance+0x8c>
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    1de2:	25 e8       	ldi	r18, 0x85	; 133
    1de4:	c2 16       	cp	r12, r18
    1de6:	21 e0       	ldi	r18, 0x01	; 1
    1de8:	d2 06       	cpc	r13, r18
    1dea:	c8 f6       	brcc	.-78     	; 0x1d9e <GetResistance+0xd0>
     if (adc.lp1 < (169*U_SCALE)) { // take measurement with R_H 
    1dec:	04 3a       	cpi	r16, 0xA4	; 164
    1dee:	e2 e0       	ldi	r30, 0x02	; 2
    1df0:	1e 07       	cpc	r17, r30
    1df2:	08 f0       	brcs	.+2      	; 0x1df6 <GetResistance+0x128>
    1df4:	b5 c0       	rjmp	.+362    	; 0x1f60 <GetResistance+0x292>
        if (adc.lp2 < (38*U_SCALE)) {
    1df6:	f8 e9       	ldi	r31, 0x98	; 152
    1df8:	af 16       	cp	r10, r31
    1dfa:	b1 04       	cpc	r11, r1
    1dfc:	80 f2       	brcs	.-96     	; 0x1d9e <GetResistance+0xd0>
        lirx1 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)adc.hp2 / vcc_diff(adc.hp2);
    1dfe:	c6 01       	movw	r24, r12
    1e00:	0e 94 07 04 	call	0x80e	; 0x80e <vcc_diff>
    1e04:	ac 01       	movw	r20, r24
    1e06:	96 01       	movw	r18, r12
    1e08:	a8 e9       	ldi	r26, 0x98	; 152
    1e0a:	b7 eb       	ldi	r27, 0xB7	; 183
    1e0c:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <__umulhisi3>
    1e10:	9a 01       	movw	r18, r20
    1e12:	50 e0       	ldi	r21, 0x00	; 0
    1e14:	40 e0       	ldi	r20, 0x00	; 0
    1e16:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    1e1a:	29 01       	movw	r4, r18
    1e1c:	3a 01       	movw	r6, r20
        lirx2 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)vcc_diff(adc.lp2) / adc.lp2;
    1e1e:	c5 01       	movw	r24, r10
    1e20:	0e 94 07 04 	call	0x80e	; 0x80e <vcc_diff>
    1e24:	9c 01       	movw	r18, r24
    1e26:	a8 e9       	ldi	r26, 0x98	; 152
    1e28:	b7 eb       	ldi	r27, 0xB7	; 183
    1e2a:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <__umulhisi3>
    1e2e:	95 01       	movw	r18, r10
    1e30:	50 e0       	ldi	r21, 0x00	; 0
    1e32:	40 e0       	ldi	r20, 0x00	; 0
    1e34:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
        if (adc.hp2 < U_INT_LIMIT) {
    1e38:	88 e7       	ldi	r24, 0x78	; 120
    1e3a:	c8 16       	cp	r12, r24
    1e3c:	8f e0       	ldi	r24, 0x0F	; 15
    1e3e:	d8 06       	cpc	r13, r24
    1e40:	08 f0       	brcs	.+2      	; 0x1e44 <GetResistance+0x176>
    1e42:	72 c0       	rjmp	.+228    	; 0x1f28 <GetResistance+0x25a>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    1e44:	f2 e0       	ldi	r31, 0x02	; 2
    1e46:	44 0c       	add	r4, r4
    1e48:	55 1c       	adc	r5, r5
    1e4a:	66 1c       	adc	r6, r6
    1e4c:	77 1c       	adc	r7, r7
    1e4e:	fa 95       	dec	r31
    1e50:	d1 f7       	brne	.-12     	; 0x1e46 <GetResistance+0x178>
    1e52:	c3 01       	movw	r24, r6
    1e54:	b2 01       	movw	r22, r4
    1e56:	62 0f       	add	r22, r18
    1e58:	73 1f       	adc	r23, r19
    1e5a:	84 1f       	adc	r24, r20
    1e5c:	95 1f       	adc	r25, r21
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    1e5e:	25 e0       	ldi	r18, 0x05	; 5
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	40 e0       	ldi	r20, 0x00	; 0
    1e64:	50 e0       	ldi	r21, 0x00	; 0
    1e66:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
        lrx1 *= 100;
    1e6a:	a4 e6       	ldi	r26, 0x64	; 100
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <__muluhisi3>
        lrx1 += RH_OFFSET;			// add constant for correction of systematic error
    1e72:	6b 01       	movw	r12, r22
    1e74:	7c 01       	movw	r14, r24
    1e76:	fc ea       	ldi	r31, 0xAC	; 172
    1e78:	cf 0e       	add	r12, r31
    1e7a:	fd e0       	ldi	r31, 0x0D	; 13
    1e7c:	df 1e       	adc	r13, r31
    1e7e:	e1 1c       	adc	r14, r1
    1e80:	f1 1c       	adc	r15, r1
     if(PartFound < PART_TRANSISTOR) {
    1e82:	10 91 16 01 	lds	r17, 0x0116	; 0x800116 <PartFound>
    1e86:	14 30       	cpi	r17, 0x04	; 4
    1e88:	08 f0       	brcs	.+2      	; 0x1e8c <GetResistance+0x1be>
    1e8a:	89 cf       	rjmp	.-238    	; 0x1d9e <GetResistance+0xd0>
  resnum = (LowPin - TP_MIN + HighPin - TP_MIN - 1);	// resistor-Number 0:1 = 0, 0:2 = 1, 1:2 = 2
    1e8c:	c1 50       	subi	r28, 0x01	; 1
    1e8e:	0c 2f       	mov	r16, r28
    1e90:	0d 0f       	add	r16, r29
        if (ResistorChecked[resnum] != 0) {
    1e92:	80 2f       	mov	r24, r16
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	ec 01       	movw	r28, r24
    1e98:	c3 5b       	subi	r28, 0xB3	; 179
    1e9a:	de 4f       	sbci	r29, 0xFE	; 254
    1e9c:	28 81       	ld	r18, Y
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	88 0f       	add	r24, r24
    1ea4:	99 1f       	adc	r25, r25
           lirx1 = (labs((long)lrx1 - (long)ResistorVal[resnum]) * 10) / (lrx1 + ResistorVal[resnum] + 100);
    1ea6:	89 56       	subi	r24, 0x69	; 105
    1ea8:	9e 4f       	sbci	r25, 0xFE	; 254
    1eaa:	fc 01       	movw	r30, r24
        if (ResistorChecked[resnum] != 0) {
    1eac:	22 23       	and	r18, r18
    1eae:	09 f4       	brne	.+2      	; 0x1eb2 <GetResistance+0x1e4>
    1eb0:	c4 c0       	rjmp	.+392    	; 0x203a <GetResistance+0x36c>
           lirx1 = (labs((long)lrx1 - (long)ResistorVal[resnum]) * 10) / (lrx1 + ResistorVal[resnum] + 100);
    1eb2:	80 80       	ld	r8, Z
    1eb4:	91 80       	ldd	r9, Z+1	; 0x01
    1eb6:	a2 80       	ldd	r10, Z+2	; 0x02
    1eb8:	b3 80       	ldd	r11, Z+3	; 0x03
    1eba:	a7 01       	movw	r20, r14
    1ebc:	96 01       	movw	r18, r12
    1ebe:	28 19       	sub	r18, r8
    1ec0:	39 09       	sbc	r19, r9
    1ec2:	4a 09       	sbc	r20, r10
    1ec4:	5b 09       	sbc	r21, r11
    1ec6:	57 ff       	sbrs	r21, 7
    1ec8:	07 c0       	rjmp	.+14     	; 0x1ed8 <GetResistance+0x20a>
    1eca:	50 95       	com	r21
    1ecc:	40 95       	com	r20
    1ece:	30 95       	com	r19
    1ed0:	21 95       	neg	r18
    1ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed4:	4f 4f       	sbci	r20, 0xFF	; 255
    1ed6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed8:	aa e0       	ldi	r26, 0x0A	; 10
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <__muluhisi3>
    1ee0:	f4 e6       	ldi	r31, 0x64	; 100
    1ee2:	8f 0e       	add	r8, r31
    1ee4:	91 1c       	adc	r9, r1
    1ee6:	a1 1c       	adc	r10, r1
    1ee8:	b1 1c       	adc	r11, r1
    1eea:	a5 01       	movw	r20, r10
    1eec:	94 01       	movw	r18, r8
    1eee:	2c 0d       	add	r18, r12
    1ef0:	3d 1d       	adc	r19, r13
    1ef2:	4e 1d       	adc	r20, r14
    1ef4:	5f 1d       	adc	r21, r15
    1ef6:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
           if (lirx1  > 0) {
    1efa:	23 2b       	or	r18, r19
    1efc:	24 2b       	or	r18, r20
    1efe:	25 2b       	or	r18, r21
    1f00:	09 f0       	breq	.+2      	; 0x1f04 <GetResistance+0x236>
    1f02:	4d cf       	rjmp	.-358    	; 0x1d9e <GetResistance+0xd0>
              if (PartFound < PART_DIODE) {
    1f04:	13 30       	cpi	r17, 0x03	; 3
    1f06:	19 f0       	breq	.+6      	; 0x1f0e <GetResistance+0x240>
                 PartFound = PART_RESISTOR;	// only mark as resistor, if no other part found
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <PartFound>
              ResistorChecked[resnum] = 2;		// mark as checked in both direction
    1f0e:	82 e0       	ldi	r24, 0x02	; 2
    1f10:	88 83       	st	Y, r24
              ResistorList[ResistorsFound] = resnum;	// save number of this resistor
    1f12:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <ResistorsFound>
    1f16:	e8 2f       	mov	r30, r24
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	e0 5b       	subi	r30, 0xB0	; 176
    1f1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f1e:	00 83       	st	Z, r16
              ResistorsFound++;			// 1 more resistor found
    1f20:	8f 5f       	subi	r24, 0xFF	; 255
    1f22:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <ResistorsFound>
    1f26:	3b cf       	rjmp	.-394    	; 0x1d9e <GetResistance+0xd0>
        } else if (adc.lp2 < U_INT_LIMIT){
    1f28:	e8 e7       	ldi	r30, 0x78	; 120
    1f2a:	ae 16       	cp	r10, r30
    1f2c:	ef e0       	ldi	r30, 0x0F	; 15
    1f2e:	be 06       	cpc	r11, r30
    1f30:	70 f4       	brcc	.+28     	; 0x1f4e <GetResistance+0x280>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    1f32:	e2 e0       	ldi	r30, 0x02	; 2
    1f34:	22 0f       	add	r18, r18
    1f36:	33 1f       	adc	r19, r19
    1f38:	44 1f       	adc	r20, r20
    1f3a:	55 1f       	adc	r21, r21
    1f3c:	ea 95       	dec	r30
    1f3e:	d1 f7       	brne	.-12     	; 0x1f34 <GetResistance+0x266>
    1f40:	ca 01       	movw	r24, r20
    1f42:	b9 01       	movw	r22, r18
    1f44:	64 0d       	add	r22, r4
    1f46:	75 1d       	adc	r23, r5
    1f48:	86 1d       	adc	r24, r6
    1f4a:	97 1d       	adc	r25, r7
    1f4c:	88 cf       	rjmp	.-240    	; 0x1e5e <GetResistance+0x190>
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_H measurements
    1f4e:	24 0d       	add	r18, r4
    1f50:	35 1d       	adc	r19, r5
    1f52:	46 1d       	adc	r20, r6
    1f54:	57 1d       	adc	r21, r7
    1f56:	56 95       	lsr	r21
    1f58:	47 95       	ror	r20
    1f5a:	37 95       	ror	r19
    1f5c:	27 95       	ror	r18
    1f5e:	85 cf       	rjmp	.-246    	; 0x1e6a <GetResistance+0x19c>
        lirx1 =(unsigned long)RR680PL * (unsigned long)unsigned_diff(adc.hp1, adc.tp1) / vcc_diff(adc.hp1);
    1f60:	c0 90 17 01 	lds	r12, 0x0117	; 0x800117 <resis680pl>
    1f64:	d0 90 18 01 	lds	r13, 0x0118	; 0x800118 <resis680pl+0x1>
    1f68:	67 2d       	mov	r22, r7
    1f6a:	76 2d       	mov	r23, r6
    1f6c:	e6 16       	cp	r14, r22
    1f6e:	f7 06       	cpc	r15, r23
    1f70:	08 f4       	brcc	.+2      	; 0x1f74 <GetResistance+0x2a6>
    1f72:	b7 01       	movw	r22, r14
    1f74:	c7 01       	movw	r24, r14
    1f76:	0e 94 0c 04 	call	0x818	; 0x818 <unsigned_diff>
    1f7a:	96 01       	movw	r18, r12
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <__umulhisi3>
    1f82:	2b 01       	movw	r4, r22
    1f84:	3c 01       	movw	r6, r24
    1f86:	c7 01       	movw	r24, r14
    1f88:	0e 94 07 04 	call	0x80e	; 0x80e <vcc_diff>
    1f8c:	9c 01       	movw	r18, r24
    1f8e:	50 e0       	ldi	r21, 0x00	; 0
    1f90:	40 e0       	ldi	r20, 0x00	; 0
    1f92:	c3 01       	movw	r24, r6
    1f94:	b2 01       	movw	r22, r4
    1f96:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    1f9a:	29 01       	movw	r4, r18
    1f9c:	3a 01       	movw	r6, r20
        lirx2 =(unsigned long)RR680MI * (unsigned long)unsigned_diff(adc.tp2, adc.lp1) / adc.lp1;
    1f9e:	a0 90 10 01 	lds	r10, 0x0110	; 0x800110 <resis680mi>
    1fa2:	b0 90 11 01 	lds	r11, 0x0111	; 0x800111 <resis680mi+0x1>
    1fa6:	89 2d       	mov	r24, r9
    1fa8:	98 2d       	mov	r25, r8
    1faa:	80 17       	cp	r24, r16
    1fac:	91 07       	cpc	r25, r17
    1fae:	08 f4       	brcc	.+2      	; 0x1fb2 <GetResistance+0x2e4>
    1fb0:	c8 01       	movw	r24, r16
    1fb2:	b8 01       	movw	r22, r16
    1fb4:	0e 94 0c 04 	call	0x818	; 0x818 <unsigned_diff>
    1fb8:	95 01       	movw	r18, r10
    1fba:	dc 01       	movw	r26, r24
    1fbc:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <__umulhisi3>
    1fc0:	98 01       	movw	r18, r16
    1fc2:	50 e0       	ldi	r21, 0x00	; 0
    1fc4:	40 e0       	ldi	r20, 0x00	; 0
    1fc6:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
        if (adc.hp1 < U_INT_LIMIT) {
    1fca:	88 e7       	ldi	r24, 0x78	; 120
    1fcc:	e8 16       	cp	r14, r24
    1fce:	8f e0       	ldi	r24, 0x0F	; 15
    1fd0:	f8 06       	cpc	r15, r24
    1fd2:	b0 f4       	brcc	.+44     	; 0x2000 <GetResistance+0x332>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    1fd4:	62 e0       	ldi	r22, 0x02	; 2
    1fd6:	44 0c       	add	r4, r4
    1fd8:	55 1c       	adc	r5, r5
    1fda:	66 1c       	adc	r6, r6
    1fdc:	77 1c       	adc	r7, r7
    1fde:	6a 95       	dec	r22
    1fe0:	d1 f7       	brne	.-12     	; 0x1fd6 <GetResistance+0x308>
    1fe2:	c3 01       	movw	r24, r6
    1fe4:	b2 01       	movw	r22, r4
    1fe6:	62 0f       	add	r22, r18
    1fe8:	73 1f       	adc	r23, r19
    1fea:	84 1f       	adc	r24, r20
    1fec:	95 1f       	adc	r25, r21
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    1fee:	25 e0       	ldi	r18, 0x05	; 5
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e0       	ldi	r20, 0x00	; 0
    1ff4:	50 e0       	ldi	r21, 0x00	; 0
    1ff6:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    1ffa:	69 01       	movw	r12, r18
    1ffc:	7a 01       	movw	r14, r20
    1ffe:	41 cf       	rjmp	.-382    	; 0x1e82 <GetResistance+0x1b4>
        } else if (adc.lp1 < U_INT_LIMIT) {
    2000:	08 37       	cpi	r16, 0x78	; 120
    2002:	ef e0       	ldi	r30, 0x0F	; 15
    2004:	1e 07       	cpc	r17, r30
    2006:	70 f4       	brcc	.+28     	; 0x2024 <GetResistance+0x356>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    2008:	ca 01       	movw	r24, r20
    200a:	b9 01       	movw	r22, r18
    200c:	52 e0       	ldi	r21, 0x02	; 2
    200e:	66 0f       	add	r22, r22
    2010:	77 1f       	adc	r23, r23
    2012:	88 1f       	adc	r24, r24
    2014:	99 1f       	adc	r25, r25
    2016:	5a 95       	dec	r21
    2018:	d1 f7       	brne	.-12     	; 0x200e <GetResistance+0x340>
    201a:	64 0d       	add	r22, r4
    201c:	75 1d       	adc	r23, r5
    201e:	86 1d       	adc	r24, r6
    2020:	97 1d       	adc	r25, r7
    2022:	e5 cf       	rjmp	.-54     	; 0x1fee <GetResistance+0x320>
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_L measurements
    2024:	73 01       	movw	r14, r6
    2026:	62 01       	movw	r12, r4
    2028:	c2 0e       	add	r12, r18
    202a:	d3 1e       	adc	r13, r19
    202c:	e4 1e       	adc	r14, r20
    202e:	f5 1e       	adc	r15, r21
    2030:	f6 94       	lsr	r15
    2032:	e7 94       	ror	r14
    2034:	d7 94       	ror	r13
    2036:	c7 94       	ror	r12
    2038:	24 cf       	rjmp	.-440    	; 0x1e82 <GetResistance+0x1b4>
           ResistorVal[resnum] = lrx1;	// save register value
    203a:	c0 82       	st	Z, r12
    203c:	d1 82       	std	Z+1, r13	; 0x01
    203e:	e2 82       	std	Z+2, r14	; 0x02
    2040:	f3 82       	std	Z+3, r15	; 0x03
           ResistorChecked[resnum] = 1;		// is checked in one direction
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	88 83       	st	Y, r24
    2046:	ab ce       	rjmp	.-682    	; 0x1d9e <GetResistance+0xd0>
  HiPinRH = (HiPinRL + HiPinRL);
    2048:	11 0f       	add	r17, r17
  R_PORT = 0;
    204a:	15 b8       	out	0x05, r1	; 5
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (GND)
    204c:	14 b9       	out	0x04, r17	; 4
  adc.hp2 = W5msReadADC(HighPin);	// read voltage, should be down
    204e:	8c 2f       	mov	r24, r28
    2050:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
  if (adc.hp2 > (20*U_SCALE)) {
    2054:	81 35       	cpi	r24, 0x51	; 81
    2056:	91 05       	cpc	r25, r1
    2058:	08 f0       	brcs	.+2      	; 0x205c <GetResistance+0x38e>
    205a:	a1 ce       	rjmp	.-702    	; 0x1d9e <GetResistance+0xd0>
  R_PORT = HiPinRH;		//switch R_H for High-Pin to VCC
    205c:	15 b9       	out	0x05, r17	; 5
  adc.hp2 = W5msReadADC(HighPin);	// voltage at resistor Rx with R_H
    205e:	8c 2f       	mov	r24, r28
    2060:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
    2064:	6c 01       	movw	r12, r24
  ADC_DDR = HiADCp | TXD_MSK;		//switch High-Pin to output
    2066:	07 b9       	out	0x07, r16	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
    2068:	08 b9       	out	0x08, r16	; 8
  R_PORT = 0;
    206a:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
    206c:	54 b8       	out	0x04, r5	; 4
    206e:	a8 e1       	ldi	r26, 0x18	; 24
    2070:	4a 2e       	mov	r4, r26
  adc.lp2 = 0;
    2072:	b1 2c       	mov	r11, r1
    2074:	a1 2c       	mov	r10, r1
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
    2076:	8c 2f       	mov	r24, r28
    2078:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
    207c:	98 2e       	mov	r9, r24
    207e:	89 2e       	mov	r8, r25
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    2080:	8d 2f       	mov	r24, r29
    2082:	0e 94 a5 03 	call	0x74a	; 0x74a <ReadADC>
    2086:	8c 01       	movw	r16, r24
     if (udiff < 3) break;
    2088:	8a 19       	sub	r24, r10
    208a:	9b 09       	sbc	r25, r11
    208c:	97 ff       	sbrs	r25, 7
    208e:	03 c0       	rjmp	.+6      	; 0x2096 <GetResistance+0x3c8>
    2090:	91 95       	neg	r25
    2092:	81 95       	neg	r24
    2094:	91 09       	sbc	r25, r1
    2096:	03 97       	sbiw	r24, 0x03	; 3
    2098:	34 f0       	brlt	.+12     	; 0x20a6 <GetResistance+0x3d8>
     wdt_reset();
    209a:	a8 95       	wdr
    209c:	4a 94       	dec	r4
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    209e:	58 01       	movw	r10, r16
  for (ii=1;ii<MAX_REPEAT;ii++) {
    20a0:	41 10       	cpse	r4, r1
    20a2:	e9 cf       	rjmp	.-46     	; 0x2076 <GetResistance+0x3a8>
    20a4:	7c ce       	rjmp	.-776    	; 0x1d9e <GetResistance+0xd0>
  LoPinRH = (LoPinRL + LoPinRL);
    20a6:	55 0c       	add	r5, r5
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
    20a8:	54 b8       	out	0x04, r5	; 4
  adc.lp2 = W5msReadADC(LowPin);
    20aa:	8d 2f       	mov	r24, r29
    20ac:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
    20b0:	5c 01       	movw	r10, r24
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    20b2:	f0 ec       	ldi	r31, 0xC0	; 192
    20b4:	ef 16       	cp	r14, r31
    20b6:	f4 e4       	ldi	r31, 0x44	; 68
    20b8:	ff 06       	cpc	r15, r31
    20ba:	08 f4       	brcc	.+2      	; 0x20be <GetResistance+0x3f0>
    20bc:	92 ce       	rjmp	.-732    	; 0x1de2 <GetResistance+0x114>
  if (adc.hp2 < (4972*U_SCALE)) { 
    20be:	80 eb       	ldi	r24, 0xB0	; 176
    20c0:	c8 16       	cp	r12, r24
    20c2:	8d e4       	ldi	r24, 0x4D	; 77
    20c4:	d8 06       	cpc	r13, r24
    20c6:	08 f0       	brcs	.+2      	; 0x20ca <GetResistance+0x3fc>
    20c8:	6a ce       	rjmp	.-812    	; 0x1d9e <GetResistance+0xd0>
    20ca:	90 ce       	rjmp	.-736    	; 0x1dec <GetResistance+0x11e>

000020cc <ChargePin10ms>:
#include "Transistortester.h"


//******************************************************************

void ChargePin10ms(uint8_t PinToCharge, uint8_t ChargeDirection) {
    20cc:	cf 93       	push	r28
    20ce:	c8 2f       	mov	r28, r24
    20d0:	c0 95       	com	r28
   //Parameters:
   //PinToCharge: specifies the pin as mask for R-Port
   //ChargeDirection: 0 = switch to GND (N-Kanal-FET), 1= switch to VCC(P-Kanal-FET)

   if(ChargeDirection&1) {
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
    20d2:	95 b1       	in	r25, 0x05	; 5
   if(ChargeDirection&1) {
    20d4:	60 ff       	sbrs	r22, 0
    20d6:	0f c0       	rjmp	.+30     	; 0x20f6 <ChargePin10ms+0x2a>
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
    20d8:	98 2b       	or	r25, r24
   } else {
      R_PORT &= ~PinToCharge; // or 0 (GND)
    20da:	95 b9       	out	0x05, r25	; 5
   }
   R_DDR |= PinToCharge;		//switch Pin to output, across R to GND or VCC
    20dc:	94 b1       	in	r25, 0x04	; 4
    20de:	89 2b       	or	r24, r25
    20e0:	84 b9       	out	0x04, r24	; 4
   wait_about10ms();			// wait about 10ms
    20e2:	0e 94 8b 03 	call	0x716	; 0x716 <wait10ms>
   // switch back Input, no current
   R_DDR &= ~PinToCharge;	// switch back to input
    20e6:	84 b1       	in	r24, 0x04	; 4
    20e8:	8c 23       	and	r24, r28
    20ea:	84 b9       	out	0x04, r24	; 4
   R_PORT &= ~PinToCharge;	// no Pull up
    20ec:	85 b1       	in	r24, 0x05	; 5
    20ee:	8c 23       	and	r24, r28
    20f0:	85 b9       	out	0x05, r24	; 5
}
    20f2:	cf 91       	pop	r28
    20f4:	08 95       	ret
      R_PORT &= ~PinToCharge; // or 0 (GND)
    20f6:	9c 23       	and	r25, r28
    20f8:	f0 cf       	rjmp	.-32     	; 0x20da <ChargePin10ms+0xe>

000020fa <EntladePins>:
#include <avr/pgmspace.h>
#include "Transistortester.h"


// first discharge any charge of capacitors
void EntladePins() {
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	a0 e0       	ldi	r26, 0x00	; 0
    20fe:	e3 e8       	ldi	r30, 0x83	; 131
    2100:	f0 e1       	ldi	r31, 0x10	; 16
    2102:	0c 94 18 1f 	jmp	0x3e30	; 0x3e30 <__prologue_saves__+0x12>
    2106:	1a e0       	ldi	r17, 0x0A	; 10
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     R_PORT = 0;			// R-outputs auf 0
//     R_DDR = (1<<PIN_RH3) | (1<<PIN_RH2) | (1<<PIN_RH1); // R_H for all Pins to GND
     R_DDR = (1<<PIN_RH3) | (1<<PIN_RL3) | (1<<PIN_RH2) | (1<<PIN_RL2) | (1<<PIN_RH1) | (1<<PIN_RL1); // R_H and R_L for all Pins to GND
    2108:	8f e3       	ldi	r24, 0x3F	; 63
    210a:	b8 2e       	mov	r11, r24
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
           break;
        }
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
    210c:	09 e0       	ldi	r16, 0x09	; 9
     ADC_DDR = adc_gnd;
    210e:	17 b8       	out	0x07, r1	; 7
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
    2110:	18 b8       	out	0x08, r1	; 8
     R_PORT = 0;			// R-outputs auf 0
    2112:	15 b8       	out	0x05, r1	; 5
     R_DDR = (1<<PIN_RH3) | (1<<PIN_RL3) | (1<<PIN_RH2) | (1<<PIN_RL2) | (1<<PIN_RH1) | (1<<PIN_RL1); // R_H and R_L for all Pins to GND
    2114:	b4 b8       	out	0x04, r11	; 4
     adcmv[0] = W5msReadADC(TP1);	// which voltage has Pin 1?
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
    211c:	7c 01       	movw	r14, r24
     adcmv[1] = ReadADC(TP2);	// which voltage has Pin 2?
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	0e 94 a5 03 	call	0x74a	; 0x74a <ReadADC>
    2124:	ec 01       	movw	r28, r24
     adcmv[2] = ReadADC(TP3);	// which voltage has Pin 3?
    2126:	82 e0       	ldi	r24, 0x02	; 2
    2128:	0e 94 a5 03 	call	0x74a	; 0x74a <ReadADC>
    212c:	9c 01       	movw	r18, r24
     if ((PartFound == PART_CELL) || ((adcmv[0] < CAP_EMPTY_LEVEL) && (adcmv[1] < CAP_EMPTY_LEVEL) && (adcmv[2] < CAP_EMPTY_LEVEL))) {
    212e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <PartFound>
    2132:	89 30       	cpi	r24, 0x09	; 9
    2134:	61 f0       	breq	.+24     	; 0x214e <EntladePins+0x54>
    2136:	84 e0       	ldi	r24, 0x04	; 4
    2138:	e8 16       	cp	r14, r24
    213a:	f1 04       	cpc	r15, r1
    213c:	78 f4       	brcc	.+30     	; 0x215c <EntladePins+0x62>
    213e:	c4 30       	cpi	r28, 0x04	; 4
    2140:	d1 05       	cpc	r29, r1
    2142:	08 f0       	brcs	.+2      	; 0x2146 <EntladePins+0x4c>
    2144:	54 c0       	rjmp	.+168    	; 0x21ee <EntladePins+0xf4>
    2146:	24 30       	cpi	r18, 0x04	; 4
    2148:	31 05       	cpc	r19, r1
    214a:	08 f0       	brcs	.+2      	; 0x214e <EntladePins+0x54>
    214c:	52 c0       	rjmp	.+164    	; 0x21f2 <EntladePins+0xf8>
        ADC_DDR = TXD_MSK;		// switch all ADC-Pins to input
    214e:	17 b8       	out	0x07, r1	; 7
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
    2150:	14 b8       	out	0x04, r1	; 4
     }
  } // end for lop_cnt
#if DebugOut == 99
  uart_putc('x');		//Debug
#endif
 }
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	e9 e0       	ldi	r30, 0x09	; 9
    2158:	0c 94 34 1f 	jmp	0x3e68	; 0x3e68 <__epilogue_restores__+0x12>
     if (adcmv[0] < 1000) {
    215c:	91 e0       	ldi	r25, 0x01	; 1
    215e:	88 ee       	ldi	r24, 0xE8	; 232
    2160:	e8 16       	cp	r14, r24
    2162:	83 e0       	ldi	r24, 0x03	; 3
    2164:	f8 06       	cpc	r15, r24
    2166:	08 f0       	brcs	.+2      	; 0x216a <EntladePins+0x70>
    2168:	90 e0       	ldi	r25, 0x00	; 0
     if (adcmv[1] < 1000) {
    216a:	c8 3e       	cpi	r28, 0xE8	; 232
    216c:	d3 40       	sbci	r29, 0x03	; 3
    216e:	08 f4       	brcc	.+2      	; 0x2172 <EntladePins+0x78>
        adc_gnd |= (1<<TP2);	//Pin 2 directly to GND
    2170:	92 60       	ori	r25, 0x02	; 2
     if (adcmv[2] < 1000) {
    2172:	28 3e       	cpi	r18, 0xE8	; 232
    2174:	33 40       	sbci	r19, 0x03	; 3
    2176:	08 f4       	brcc	.+2      	; 0x217a <EntladePins+0x80>
        adc_gnd |= (1<<TP3);	//Pin 3 directly to  GND
    2178:	94 60       	ori	r25, 0x04	; 4
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time
    217a:	97 b9       	out	0x07, r25	; 7
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    217c:	d0 e0       	ldi	r29, 0x00	; 0
    217e:	c0 e0       	ldi	r28, 0x00	; 0
        wdt_reset();
    2180:	a8 95       	wdr
        adcmv[0] = W20msReadADC(TP1);	// which voltage has Pin 1?
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	0e 94 a2 03 	call	0x744	; 0x744 <W20msReadADC>
    2188:	6c 01       	movw	r12, r24
        adcmv[1] = ReadADC(TP2);	// which voltage has Pin 2?
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	0e 94 a5 03 	call	0x74a	; 0x74a <ReadADC>
    2190:	7c 01       	movw	r14, r24
        adcmv[2] = ReadADC(TP3);	// which voltage has Pin 3?
    2192:	82 e0       	ldi	r24, 0x02	; 2
    2194:	0e 94 a5 03 	call	0x74a	; 0x74a <ReadADC>
        if (adcmv[0] < 1300) {
    2198:	24 e1       	ldi	r18, 0x14	; 20
    219a:	c2 16       	cp	r12, r18
    219c:	25 e0       	ldi	r18, 0x05	; 5
    219e:	d2 06       	cpc	r13, r18
    21a0:	08 f4       	brcc	.+2      	; 0x21a4 <EntladePins+0xaa>
           ADC_DDR |= (1<<TP1);	// below 1.3V , switch directly with ADC-Port to GND
    21a2:	38 9a       	sbi	0x07, 0	; 7
        if (adcmv[1] < 1300) {
    21a4:	24 e1       	ldi	r18, 0x14	; 20
    21a6:	e2 16       	cp	r14, r18
    21a8:	25 e0       	ldi	r18, 0x05	; 5
    21aa:	f2 06       	cpc	r15, r18
    21ac:	08 f4       	brcc	.+2      	; 0x21b0 <EntladePins+0xb6>
           ADC_DDR |= (1<<TP2);	// below 1.3V, switch directly with ADC-Port to GND
    21ae:	39 9a       	sbi	0x07, 1	; 7
        if (adcmv[2] < 1300) {
    21b0:	84 31       	cpi	r24, 0x14	; 20
    21b2:	25 e0       	ldi	r18, 0x05	; 5
    21b4:	92 07       	cpc	r25, r18
    21b6:	08 f4       	brcc	.+2      	; 0x21ba <EntladePins+0xc0>
           ADC_DDR |= (1<<TP3);	// below 1.3V, switch directly with ADC-Port to GND
    21b8:	3a 9a       	sbi	0x07, 2	; 7
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
    21ba:	26 e0       	ldi	r18, 0x06	; 6
    21bc:	c2 16       	cp	r12, r18
    21be:	d1 04       	cpc	r13, r1
    21c0:	30 f4       	brcc	.+12     	; 0x21ce <EntladePins+0xd4>
    21c2:	26 e0       	ldi	r18, 0x06	; 6
    21c4:	e2 16       	cp	r14, r18
    21c6:	f1 04       	cpc	r15, r1
    21c8:	10 f4       	brcc	.+4      	; 0x21ce <EntladePins+0xd4>
    21ca:	06 97       	sbiw	r24, 0x06	; 6
    21cc:	38 f0       	brcs	.+14     	; 0x21dc <EntladePins+0xe2>
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    21ce:	21 96       	adiw	r28, 0x01	; 1
    21d0:	c4 3f       	cpi	r28, 0xF4	; 244
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	d8 07       	cpc	r29, r24
    21d6:	a1 f6       	brne	.-88     	; 0x2180 <EntladePins+0x86>
        PartFound = PART_CELL;	// mark as Battery
    21d8:	00 93 16 01 	sts	0x0116, r16	; 0x800116 <PartFound>
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    21dc:	f1 2c       	mov	r15, r1
    21de:	e1 2c       	mov	r14, r1
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
    21e0:	ec 16       	cp	r14, r28
    21e2:	fd 06       	cpc	r15, r29
    21e4:	41 f4       	brne	.+16     	; 0x21f6 <EntladePins+0xfc>
    21e6:	11 50       	subi	r17, 0x01	; 1
  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
    21e8:	09 f0       	breq	.+2      	; 0x21ec <EntladePins+0xf2>
    21ea:	91 cf       	rjmp	.-222    	; 0x210e <EntladePins+0x14>
    21ec:	b2 cf       	rjmp	.-156    	; 0x2152 <EntladePins+0x58>
        adc_gnd |= (1<<TP1);	//Pin 1 directly to GND
    21ee:	91 e0       	ldi	r25, 0x01	; 1
    21f0:	bc cf       	rjmp	.-136    	; 0x216a <EntladePins+0x70>
    21f2:	91 e0       	ldi	r25, 0x01	; 1
    21f4:	bd cf       	rjmp	.-134    	; 0x2170 <EntladePins+0x76>
        wait1ms();
    21f6:	0e 94 91 03 	call	0x722	; 0x722 <wait1ms>
    21fa:	2f ef       	ldi	r18, 0xFF	; 255
    21fc:	e2 1a       	sub	r14, r18
    21fe:	f2 0a       	sbc	r15, r18
    2200:	ef cf       	rjmp	.-34     	; 0x21e0 <EntladePins+0xe6>

00002202 <Scale_C_with_vcc>:
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
  return;
 } // end ReadCapacity()


void Scale_C_with_vcc(void) {
    2202:	cf 92       	push	r12
    2204:	df 92       	push	r13
    2206:	ef 92       	push	r14
    2208:	ff 92       	push	r15
    220a:	cf 93       	push	r28
    220c:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <cap>
    2210:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <cap+0x1>
    2214:	40 91 6a 01 	lds	r20, 0x016A	; 0x80016a <cap+0x2>
    2218:	50 91 6b 01 	lds	r21, 0x016B	; 0x80016b <cap+0x3>
    221c:	c0 91 7a 01 	lds	r28, 0x017A	; 0x80017a <cap+0x12>
   while (cap.cval > 100000) {
      cap.cval /= 10;
    2220:	8a e0       	ldi	r24, 0x0A	; 10
    2222:	c8 2e       	mov	r12, r24
    2224:	d1 2c       	mov	r13, r1
    2226:	e1 2c       	mov	r14, r1
    2228:	f1 2c       	mov	r15, r1
    222a:	8c 2f       	mov	r24, r28
    222c:	cf 5f       	subi	r28, 0xFF	; 255
   while (cap.cval > 100000) {
    222e:	21 3a       	cpi	r18, 0xA1	; 161
    2230:	96 e8       	ldi	r25, 0x86	; 134
    2232:	39 07       	cpc	r19, r25
    2234:	91 e0       	ldi	r25, 0x01	; 1
    2236:	49 07       	cpc	r20, r25
    2238:	51 05       	cpc	r21, r1
    223a:	e0 f4       	brcc	.+56     	; 0x2274 <Scale_C_with_vcc+0x72>
    223c:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <cap+0x12>
      cap.cpre ++;			// prevent overflow
   }
   cap.cval *= ADCconfig.U_AVCC;	// scale with measured voltage
    2240:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <ADCconfig+0x4>
    2244:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <ADCconfig+0x5>
    2248:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <__muluhisi3>
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
    224c:	28 e8       	ldi	r18, 0x88	; 136
    224e:	33 e1       	ldi	r19, 0x13	; 19
    2250:	40 e0       	ldi	r20, 0x00	; 0
    2252:	50 e0       	ldi	r21, 0x00	; 0
    2254:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    2258:	20 93 68 01 	sts	0x0168, r18	; 0x800168 <cap>
    225c:	30 93 69 01 	sts	0x0169, r19	; 0x800169 <cap+0x1>
    2260:	40 93 6a 01 	sts	0x016A, r20	; 0x80016a <cap+0x2>
    2264:	50 93 6b 01 	sts	0x016B, r21	; 0x80016b <cap+0x3>
}
    2268:	cf 91       	pop	r28
    226a:	ff 90       	pop	r15
    226c:	ef 90       	pop	r14
    226e:	df 90       	pop	r13
    2270:	cf 90       	pop	r12
    2272:	08 95       	ret
      cap.cval /= 10;
    2274:	ca 01       	movw	r24, r20
    2276:	b9 01       	movw	r22, r18
    2278:	a7 01       	movw	r20, r14
    227a:	96 01       	movw	r18, r12
    227c:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    2280:	d4 cf       	rjmp	.-88     	; 0x222a <Scale_C_with_vcc+0x28>

00002282 <ReadCapacity>:
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    2282:	8f 92       	push	r8
    2284:	9f 92       	push	r9
    2286:	af 92       	push	r10
    2288:	bf 92       	push	r11
    228a:	df 92       	push	r13
    228c:	ef 92       	push	r14
    228e:	ff 92       	push	r15
    2290:	0f 93       	push	r16
    2292:	1f 93       	push	r17
    2294:	cf 93       	push	r28
    2296:	df 93       	push	r29
    2298:	18 2f       	mov	r17, r24
    229a:	d6 2e       	mov	r13, r22
  pin_combination = ((HighPin - TP_MIN) * 3) + LowPin - TP_MIN - 1;	// coded Pin combination for capacity zero offset
    229c:	88 0f       	add	r24, r24
    229e:	81 0f       	add	r24, r17
    22a0:	9f ef       	ldi	r25, 0xFF	; 255
    22a2:	96 0f       	add	r25, r22
    22a4:	89 0f       	add	r24, r25
    22a6:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <pin_combination>
  HiPinR_L = pgm_read_byte(&PinRLRHADCtab[HighPin - TP_MIN]);	//R_L mask for HighPin R_L load
    22aa:	e1 2f       	mov	r30, r17
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	e2 58       	subi	r30, 0x82	; 130
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	04 91       	lpm	r16, Z
  LoPinR_L = pgm_read_byte(&PinRLRHADCtab[LowPin - TP_MIN]);	//R_L mask for LowPin R_L load
    22b4:	86 2f       	mov	r24, r22
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	fc 01       	movw	r30, r24
    22ba:	e2 58       	subi	r30, 0x82	; 130
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	c4 91       	lpm	r28, Z
  LoADC = pgm_read_byte((&PinRLRHADCtab[3])+LowPin-TP_MIN) | TXD_MSK;
    22c0:	fc 01       	movw	r30, r24
    22c2:	ef 57       	subi	r30, 0x7F	; 127
    22c4:	ff 4f       	sbci	r31, 0xFF	; 255
    22c6:	e4 90       	lpm	r14, Z
  if(PartFound == PART_RESISTOR) {
    22c8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <PartFound>
    22cc:	81 30       	cpi	r24, 0x01	; 1
    22ce:	09 f4       	brne	.+2      	; 0x22d2 <ReadCapacity+0x50>
    22d0:	4e c0       	rjmp	.+156    	; 0x236e <ReadCapacity+0xec>
  for (ii=0;ii<NumOfDiodes;ii++) {
    22d2:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <NumOfDiodes>
    22d6:	ae e7       	ldi	r26, 0x7E	; 126
    22d8:	b1 e0       	ldi	r27, 0x01	; 1
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	82 17       	cp	r24, r18
    22e0:	08 f4       	brcc	.+2      	; 0x22e4 <ReadCapacity+0x62>
    22e2:	51 c0       	rjmp	.+162    	; 0x2386 <ReadCapacity+0x104>
  cap.esr = 0;				// set ESR of capacitor to zero
    22e4:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <cap+0xd>
    22e8:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <cap+0xc>
  cap.cpre = -15;			// mark for no cap
    22ec:	81 ef       	ldi	r24, 0xF1	; 241
    22ee:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <cap+0x12>
  cap.cval = 0;				// set capacity value to zero
    22f2:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <cap>
    22f6:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <cap+0x1>
    22fa:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <cap+0x2>
    22fe:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <cap+0x3>
  EntladePins();			// discharge capacitor
    2302:	fb de       	rcall	.-522    	; 0x20fa <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    2304:	18 b8       	out	0x08, r1	; 8
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    2306:	e7 b8       	out	0x07, r14	; 7
  R_DDR = LoPinR_L;			// switch R_L Port of LoPin to VCC
    2308:	c4 b9       	out	0x04, r28	; 4
  R_PORT = LoPinR_L;			// switch R_L Port of LoPin to VCC
    230a:	c5 b9       	out	0x05, r28	; 5
  residual_voltage = ReadADC(HighPin) - ReadADC(LowPin); // voltage at HighPin before any load 
    230c:	81 2f       	mov	r24, r17
    230e:	0e 94 a5 03 	call	0x74a	; 0x74a <ReadADC>
    2312:	5c 01       	movw	r10, r24
    2314:	8d 2d       	mov	r24, r13
    2316:	0e 94 a5 03 	call	0x74a	; 0x74a <ReadADC>
    231a:	a8 1a       	sub	r10, r24
    231c:	b9 0a       	sbc	r11, r25
  R_DDR = 0;				// switch all R_L ports to input
    231e:	14 b8       	out	0x04, r1	; 4
  for (ovcnt16=0;ovcnt16<MAX_LOAD_TIME;ovcnt16++) {
    2320:	d0 e0       	ldi	r29, 0x00	; 0
    2322:	c0 e0       	ldi	r28, 0x00	; 0
     R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    2324:	05 b9       	out	0x05, r16	; 5
     R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    2326:	04 b9       	out	0x04, r16	; 4
     wait10ms();			// wait exactly 10ms, do not sleep
    2328:	0e 94 8b 03 	call	0x716	; 0x716 <wait10ms>
     R_DDR = 0;				// switch back to input
    232c:	14 b8       	out	0x04, r1	; 4
     R_PORT = 0;			// no Pull up
    232e:	15 b8       	out	0x05, r1	; 5
     wait500us();			//wait a little time
    2330:	0e 94 92 03 	call	0x724	; 0x724 <wait500us>
     wdt_reset();
    2334:	a8 95       	wdr
     cap_voltage1 = ReadADC(HighPin) - residual_voltage; // voltage of capacitor
    2336:	81 2f       	mov	r24, r17
    2338:	0e 94 a5 03 	call	0x74a	; 0x74a <ReadADC>
    233c:	4c 01       	movw	r8, r24
    233e:	8a 18       	sub	r8, r10
    2340:	9b 08       	sbc	r9, r11
     if ((ovcnt16 > (MAX_LOAD_TIME/4)) && (cap_voltage1 < (MIN_VOLTAGE/4))) {
    2342:	ce 37       	cpi	r28, 0x7E	; 126
    2344:	d1 05       	cpc	r29, r1
    2346:	20 f0       	brcs	.+8      	; 0x2350 <ReadCapacity+0xce>
    2348:	8b e4       	ldi	r24, 0x4B	; 75
    234a:	88 16       	cp	r8, r24
    234c:	91 04       	cpc	r9, r1
    234e:	5c f0       	brlt	.+22     	; 0x2366 <ReadCapacity+0xe4>
     if (cap_voltage1 > MIN_VOLTAGE) {
    2350:	2d e2       	ldi	r18, 0x2D	; 45
    2352:	82 16       	cp	r8, r18
    2354:	21 e0       	ldi	r18, 0x01	; 1
    2356:	92 06       	cpc	r9, r18
    2358:	0c f0       	brlt	.+2      	; 0x235c <ReadCapacity+0xda>
    235a:	58 c1       	rjmp	.+688    	; 0x260c <ReadCapacity+0x38a>
  for (ovcnt16=0;ovcnt16<MAX_LOAD_TIME;ovcnt16++) {
    235c:	21 96       	adiw	r28, 0x01	; 1
    235e:	c4 3f       	cpi	r28, 0xF4	; 244
    2360:	31 e0       	ldi	r19, 0x01	; 1
    2362:	d3 07       	cpc	r29, r19
    2364:	f9 f6       	brne	.-66     	; 0x2324 <ReadCapacity+0xa2>
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    2366:	17 b8       	out	0x07, r1	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    2368:	18 b8       	out	0x08, r1	; 8
  R_DDR = 0;			// switch all resistor ports to input
    236a:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    236c:	15 b8       	out	0x05, r1	; 5
 } // end ReadCapacity()
    236e:	df 91       	pop	r29
    2370:	cf 91       	pop	r28
    2372:	1f 91       	pop	r17
    2374:	0f 91       	pop	r16
    2376:	ff 90       	pop	r15
    2378:	ef 90       	pop	r14
    237a:	df 90       	pop	r13
    237c:	bf 90       	pop	r11
    237e:	af 90       	pop	r10
    2380:	9f 90       	pop	r9
    2382:	8f 90       	pop	r8
    2384:	08 95       	ret
     if ((diodes.Cathode[ii] == LowPin) && (diodes.Anode[ii] == HighPin) && (diodes.Voltage[ii] < 1500)) {
    2386:	16 96       	adiw	r26, 0x06	; 6
    2388:	3c 91       	ld	r19, X
    238a:	16 97       	sbiw	r26, 0x06	; 6
    238c:	3d 11       	cpse	r19, r13
    238e:	0d c0       	rjmp	.+26     	; 0x23aa <ReadCapacity+0x128>
    2390:	3c 91       	ld	r19, X
    2392:	31 13       	cpse	r19, r17
    2394:	0a c0       	rjmp	.+20     	; 0x23aa <ReadCapacity+0x128>
    2396:	fc 01       	movw	r30, r24
    2398:	ee 0f       	add	r30, r30
    239a:	ff 1f       	adc	r31, r31
    239c:	e2 58       	subi	r30, 0x82	; 130
    239e:	fe 4f       	sbci	r31, 0xFE	; 254
    23a0:	44 85       	ldd	r20, Z+12	; 0x0c
    23a2:	55 85       	ldd	r21, Z+13	; 0x0d
    23a4:	4c 3d       	cpi	r20, 0xDC	; 220
    23a6:	55 40       	sbci	r21, 0x05	; 5
    23a8:	10 f3       	brcs	.-60     	; 0x236e <ReadCapacity+0xec>
    23aa:	01 96       	adiw	r24, 0x01	; 1
    23ac:	11 96       	adiw	r26, 0x01	; 1
    23ae:	97 cf       	rjmp	.-210    	; 0x22de <ReadCapacity+0x5c>
  vloss = 0;				// set lost voltage to zero
    23b0:	b1 2c       	mov	r11, r1
    23b2:	00 e0       	ldi	r16, 0x00	; 0
  EntladePins();			// discharge capacitor
    23b4:	5d c1       	rjmp	.+698    	; 0x2670 <ReadCapacity+0x3ee>
    23b6:	a1 de       	rcall	.-702    	; 0x20fa <EntladePins>
  R_PORT = 0;		// R_DDR ist HiPinR_L
    23b8:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = (1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK;	//switch all Pins to output
    23ba:	87 e0       	ldi	r24, 0x07	; 7
    23bc:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		//switch all ADC Pins to GND
    23be:	18 b8       	out	0x08, r1	; 8
  R_DDR = HiPinR_H;   		// switch R_H resistor port for HighPin to output (GND)
    23c0:	f0 2e       	mov	r15, r16
    23c2:	ff 0c       	add	r15, r15
    23c4:	f4 b8       	out	0x04, r15	; 4
  ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    23c6:	80 e4       	ldi	r24, 0x40	; 64
    23c8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    23cc:	84 e5       	ldi	r24, 0x54	; 84
    23ce:	80 bf       	out	0x30, r24	; 48
  ADMUX = (1<<REFS0) | HighPin;			// switch Mux to High-Pin
    23d0:	81 2f       	mov	r24, r17
    23d2:	80 64       	ori	r24, 0x40	; 64
    23d4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    23d8:	86 e1       	ldi	r24, 0x16	; 22
    23da:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  wait200us();			//wait for bandgap to start up
    23de:	0e 94 95 03 	call	0x72a	; 0x72a <wait200us>
  TCCR1A = 0;			// set Counter1 to normal Mode
    23e2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  TCNT1 = 0;			//set Counter to 0
    23e6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    23ea:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// clear interrupt flags
    23ee:	87 e2       	ldi	r24, 0x27	; 39
    23f0:	86 bb       	out	0x16, r24	; 22
  R_PORT = HiPinR_H;           	// switch R_H resistor port for HighPin to VCC
    23f2:	f5 b8       	out	0x05, r15	; 5
  if(PartFound == PART_FET) {
    23f4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <PartFound>
    23f8:	85 30       	cpi	r24, 0x05	; 5
    23fa:	09 f0       	breq	.+2      	; 0x23fe <ReadCapacity+0x17c>
    23fc:	f9 c0       	rjmp	.+498    	; 0x25f0 <ReadCapacity+0x36e>
     TCCR1B = (0<<ICNC1) | (1<<CS10);	//Start counter 1MHz or 8MHz without Noise Canceler
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     ADC_DDR = (((1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK) & ~(1<<HighPin));	// release only HighPin ADC port
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	01 2e       	mov	r0, r17
    240a:	01 c0       	rjmp	.+2      	; 0x240e <ReadCapacity+0x18c>
    240c:	88 0f       	add	r24, r24
    240e:	0a 94       	dec	r0
    2410:	ea f7       	brpl	.-6      	; 0x240c <ReadCapacity+0x18a>
    2412:	80 95       	com	r24
    2414:	87 70       	andi	r24, 0x07	; 7
    2416:	87 b9       	out	0x07, r24	; 7
  vloss = 0;				// set lost voltage to zero
    2418:	f1 2c       	mov	r15, r1
    241a:	e1 2c       	mov	r14, r1
        TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    241c:	91 e0       	ldi	r25, 0x01	; 1
     ii = TI1_INT_FLAGS;	//read Timer flags
    241e:	86 b3       	in	r24, 0x16	; 22
     if (ii & (1<<ICF1))  {
    2420:	85 fd       	sbrc	r24, 5
    2422:	0c c0       	rjmp	.+24     	; 0x243c <ReadCapacity+0x1ba>
     if((ii & (1<<TOV1))) {	// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    2424:	80 ff       	sbrs	r24, 0
    2426:	fb cf       	rjmp	.-10     	; 0x241e <ReadCapacity+0x19c>
        TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    2428:	96 bb       	out	0x16, r25	; 22
        wdt_reset();
    242a:	a8 95       	wdr
        ovcnt16++;
    242c:	2f ef       	ldi	r18, 0xFF	; 255
    242e:	e2 1a       	sub	r14, r18
    2430:	f2 0a       	sbc	r15, r18
        if(ovcnt16 == (F_CPU/5000)) {
    2432:	30 e4       	ldi	r19, 0x40	; 64
    2434:	e3 16       	cp	r14, r19
    2436:	36 e0       	ldi	r19, 0x06	; 6
    2438:	f3 06       	cpc	r15, r19
    243a:	89 f7       	brne	.-30     	; 0x241e <ReadCapacity+0x19c>
  TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    243c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  TI1_INT_FLAGS = (1<<ICF1);		// Reset Input Capture
    2440:	90 e2       	ldi	r25, 0x20	; 32
    2442:	96 bb       	out	0x16, r25	; 22
  tmpint = ICR1;		// get previous Input Capture Counter flag
    2444:	a0 90 86 00 	lds	r10, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    2448:	b0 90 87 00 	lds	r11, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  if((TCNT1 > tmpint) && (ii & (1<<TOV1))) {
    244c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    2450:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    2454:	a2 16       	cp	r10, r18
    2456:	b3 06       	cpc	r11, r19
    2458:	38 f4       	brcc	.+14     	; 0x2468 <ReadCapacity+0x1e6>
    245a:	80 ff       	sbrs	r24, 0
    245c:	05 c0       	rjmp	.+10     	; 0x2468 <ReadCapacity+0x1e6>
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	86 bb       	out	0x16, r24	; 22
     ovcnt16++;
    2462:	8f ef       	ldi	r24, 0xFF	; 255
    2464:	e8 1a       	sub	r14, r24
    2466:	f8 0a       	sbc	r15, r24
  ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    2468:	86 e9       	ldi	r24, 0x96	; 150
    246a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  R_DDR = 0;			// switch R_H resistor port for input
    246e:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// switch R_H resistor port pull up for HighPin off
    2470:	15 b8       	out	0x05, r1	; 5
  load_diff = ReadADC(HighPin) + REF_C_KORR - ref_mv;	// build difference of capacitor voltage to Reference Voltage
    2472:	81 2f       	mov	r24, r17
    2474:	0e 94 a5 03 	call	0x74a	; 0x74a <ReadADC>
    2478:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <ref_mv>
    247c:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <ref_mv+0x1>
    2480:	82 1b       	sub	r24, r18
    2482:	93 0b       	sbc	r25, r19
    2484:	0c 96       	adiw	r24, 0x0c	; 12
    2486:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <load_diff+0x1>
    248a:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <load_diff>
  if (ovcnt16 >= (F_CPU/10000)) {
    248e:	20 e2       	ldi	r18, 0x20	; 32
    2490:	e2 16       	cp	r14, r18
    2492:	23 e0       	ldi	r18, 0x03	; 3
    2494:	f2 06       	cpc	r15, r18
    2496:	08 f0       	brcs	.+2      	; 0x249a <ReadCapacity+0x218>
    2498:	66 cf       	rjmp	.-308    	; 0x2366 <ReadCapacity+0xe4>
  cap.cval_uncorrected.w[1] = ovcnt16;
    249a:	f0 92 73 01 	sts	0x0173, r15	; 0x800173 <cap+0xb>
    249e:	e0 92 72 01 	sts	0x0172, r14	; 0x800172 <cap+0xa>
  cap.cval_uncorrected.w[0] = tmpint;
    24a2:	b0 92 71 01 	sts	0x0171, r11	; 0x800171 <cap+0x9>
    24a6:	a0 92 70 01 	sts	0x0170, r10	; 0x800170 <cap+0x8>
  cap.cpre = -12;			// cap.cval unit is pF 
    24aa:	84 ef       	ldi	r24, 0xF4	; 244
    24ac:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <cap+0x12>
  if (ovcnt16 > 65) {
    24b0:	32 e4       	ldi	r19, 0x42	; 66
    24b2:	e3 16       	cp	r14, r19
    24b4:	f1 04       	cpc	r15, r1
    24b6:	c8 f0       	brcs	.+50     	; 0x24ea <ReadCapacity+0x268>
     cap.cval_uncorrected.dw /= 100;	// switch to next unit
    24b8:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <cap+0x8>
    24bc:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <cap+0x9>
    24c0:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <cap+0xa>
    24c4:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <cap+0xb>
    24c8:	24 e6       	ldi	r18, 0x64	; 100
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e0       	ldi	r20, 0x00	; 0
    24ce:	50 e0       	ldi	r21, 0x00	; 0
    24d0:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    24d4:	20 93 70 01 	sts	0x0170, r18	; 0x800170 <cap+0x8>
    24d8:	30 93 71 01 	sts	0x0171, r19	; 0x800171 <cap+0x9>
    24dc:	40 93 72 01 	sts	0x0172, r20	; 0x800172 <cap+0xa>
    24e0:	50 93 73 01 	sts	0x0173, r21	; 0x800173 <cap+0xb>
     cap.cpre += 2;			// set unit, prevent overflow
    24e4:	86 ef       	ldi	r24, 0xF6	; 246
    24e6:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <cap+0x12>
  cap.cval_uncorrected.dw *= RHmultip;		// 708
    24ea:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <RHmultip>
    24ee:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <RHmultip+0x1>
    24f2:	20 91 70 01 	lds	r18, 0x0170	; 0x800170 <cap+0x8>
    24f6:	30 91 71 01 	lds	r19, 0x0171	; 0x800171 <cap+0x9>
    24fa:	40 91 72 01 	lds	r20, 0x0172	; 0x800172 <cap+0xa>
    24fe:	50 91 73 01 	lds	r21, 0x0173	; 0x800173 <cap+0xb>
    2502:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <__muluhisi3>
  cap.cval_uncorrected.dw /= (F_CPU / 10000);	// divide by 100 (@ 1MHz clock), 800 (@ 8MHz clock)
    2506:	20 e2       	ldi	r18, 0x20	; 32
    2508:	33 e0       	ldi	r19, 0x03	; 3
    250a:	40 e0       	ldi	r20, 0x00	; 0
    250c:	50 e0       	ldi	r21, 0x00	; 0
    250e:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    2512:	20 93 70 01 	sts	0x0170, r18	; 0x800170 <cap+0x8>
    2516:	30 93 71 01 	sts	0x0171, r19	; 0x800171 <cap+0x9>
    251a:	40 93 72 01 	sts	0x0172, r20	; 0x800172 <cap+0xa>
    251e:	50 93 73 01 	sts	0x0173, r21	; 0x800173 <cap+0xb>
  cap.cval = cap.cval_uncorrected.dw;		// set the corrected cap.cval
    2522:	20 93 68 01 	sts	0x0168, r18	; 0x800168 <cap>
    2526:	30 93 69 01 	sts	0x0169, r19	; 0x800169 <cap+0x1>
    252a:	40 93 6a 01 	sts	0x016A, r20	; 0x80016a <cap+0x2>
    252e:	50 93 6b 01 	sts	0x016B, r21	; 0x80016b <cap+0x3>
  Scale_C_with_vcc();
    2532:	67 de       	rcall	.-818    	; 0x2202 <Scale_C_with_vcc>
  if (cap.cpre == -12) {
    2534:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <cap+0x12>
    2538:	84 3f       	cpi	r24, 0xF4	; 244
    253a:	09 f0       	breq	.+2      	; 0x253e <ReadCapacity+0x2bc>
    253c:	4a c0       	rjmp	.+148    	; 0x25d2 <ReadCapacity+0x350>
     if (cap.cval < COMP_SLEW1) {
    253e:	80 90 68 01 	lds	r8, 0x0168	; 0x800168 <cap>
    2542:	90 90 69 01 	lds	r9, 0x0169	; 0x800169 <cap+0x1>
    2546:	a0 90 6a 01 	lds	r10, 0x016A	; 0x80016a <cap+0x2>
    254a:	b0 90 6b 01 	lds	r11, 0x016B	; 0x80016b <cap+0x3>
    254e:	80 ea       	ldi	r24, 0xA0	; 160
    2550:	88 16       	cp	r8, r24
    2552:	8f e0       	ldi	r24, 0x0F	; 15
    2554:	98 06       	cpc	r9, r24
    2556:	a1 04       	cpc	r10, r1
    2558:	b1 04       	cpc	r11, r1
    255a:	c0 f4       	brcc	.+48     	; 0x258c <ReadCapacity+0x30a>
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
    255c:	a5 01       	movw	r20, r10
    255e:	94 01       	movw	r18, r8
    2560:	24 52       	subi	r18, 0x24	; 36
    2562:	3f 4f       	sbci	r19, 0xFF	; 255
    2564:	4f 4f       	sbci	r20, 0xFF	; 255
    2566:	5f 4f       	sbci	r21, 0xFF	; 255
    2568:	60 ea       	ldi	r22, 0xA0	; 160
    256a:	7f e0       	ldi	r23, 0x0F	; 15
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    2574:	82 0e       	add	r8, r18
    2576:	93 1e       	adc	r9, r19
    2578:	a4 1e       	adc	r10, r20
    257a:	b5 1e       	adc	r11, r21
    257c:	80 92 68 01 	sts	0x0168, r8	; 0x800168 <cap>
    2580:	90 92 69 01 	sts	0x0169, r9	; 0x800169 <cap+0x1>
    2584:	a0 92 6a 01 	sts	0x016A, r10	; 0x80016a <cap+0x2>
    2588:	b0 92 6b 01 	sts	0x016B, r11	; 0x80016b <cap+0x3>
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    258c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <pin_combination>
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	84 53       	subi	r24, 0x34	; 52
    2594:	9e 4f       	sbci	r25, 0xFE	; 254
    2596:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <eeprom_read_byte>
     if (cap.cval > tmpint) {
    259a:	40 91 68 01 	lds	r20, 0x0168	; 0x800168 <cap>
    259e:	50 91 69 01 	lds	r21, 0x0169	; 0x800169 <cap+0x1>
    25a2:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <cap+0x2>
    25a6:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <cap+0x3>
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	a0 e0       	ldi	r26, 0x00	; 0
    25b0:	84 17       	cp	r24, r20
    25b2:	95 07       	cpc	r25, r21
    25b4:	a6 07       	cpc	r26, r22
    25b6:	b7 07       	cpc	r27, r23
    25b8:	00 f5       	brcc	.+64     	; 0x25fa <ReadCapacity+0x378>
         cap.cval -= tmpint;		//subtract zero offset (pF)
    25ba:	48 1b       	sub	r20, r24
    25bc:	59 0b       	sbc	r21, r25
    25be:	6a 0b       	sbc	r22, r26
    25c0:	7b 0b       	sbc	r23, r27
    25c2:	40 93 68 01 	sts	0x0168, r20	; 0x800168 <cap>
    25c6:	50 93 69 01 	sts	0x0169, r21	; 0x800169 <cap+0x1>
    25ca:	60 93 6a 01 	sts	0x016A, r22	; 0x80016a <cap+0x2>
    25ce:	70 93 6b 01 	sts	0x016B, r23	; 0x80016b <cap+0x3>
  R_DDR = HiPinR_L; 		//switch R_L for High-Pin to GND
    25d2:	04 b9       	out	0x04, r16	; 4
   if(cap.cval < 25)
    25d4:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <cap>
    25d8:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <cap+0x1>
    25dc:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <cap+0x2>
    25e0:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <cap+0x3>
    25e4:	49 97       	sbiw	r24, 0x19	; 25
    25e6:	a1 05       	cpc	r26, r1
    25e8:	b1 05       	cpc	r27, r1
    25ea:	08 f4       	brcc	.+2      	; 0x25ee <ReadCapacity+0x36c>
    25ec:	bc ce       	rjmp	.-648    	; 0x2366 <ReadCapacity+0xe4>
checkDiodes:
    25ee:	8b c0       	rjmp	.+278    	; 0x2706 <ReadCapacity+0x484>
     TCCR1B =  (0<<ICNC1) | (1<<CS10);	//start counter 1MHz or 8MHz without Noise Canceler
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
    25f6:	e7 b8       	out	0x07, r14	; 7
    25f8:	0f cf       	rjmp	.-482    	; 0x2418 <ReadCapacity+0x196>
         cap.cval = 0;			//unsigned long may not reach negativ value
    25fa:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <cap>
    25fe:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <cap+0x1>
    2602:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <cap+0x2>
    2606:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <cap+0x3>
    260a:	e3 cf       	rjmp	.-58     	; 0x25d2 <ReadCapacity+0x350>
  if ((ovcnt16 == 0 ) && (cap_voltage1 > 1300)) {
    260c:	20 97       	sbiw	r28, 0x00	; 0
    260e:	31 f4       	brne	.+12     	; 0x261c <ReadCapacity+0x39a>
    2610:	85 e1       	ldi	r24, 0x15	; 21
    2612:	88 16       	cp	r8, r24
    2614:	85 e0       	ldi	r24, 0x05	; 5
    2616:	98 06       	cpc	r9, r24
    2618:	0c f0       	brlt	.+2      	; 0x261c <ReadCapacity+0x39a>
    261a:	cd ce       	rjmp	.-614    	; 0x23b6 <ReadCapacity+0x134>
    261c:	f1 2c       	mov	r15, r1
    261e:	e1 2c       	mov	r14, r1
     wait5ms();
    2620:	0e 94 8c 03 	call	0x718	; 0x718 <wait5ms>
     cap_voltage2 = ReadADC(HighPin) - residual_voltage;	// read voltage again, is discharged only a little bit ?
    2624:	81 2f       	mov	r24, r17
    2626:	0e 94 a5 03 	call	0x74a	; 0x74a <ReadADC>
     wdt_reset();
    262a:	a8 95       	wdr
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    262c:	2f ef       	ldi	r18, 0xFF	; 255
    262e:	e2 1a       	sub	r14, r18
    2630:	f2 0a       	sbc	r15, r18
    2632:	ce 15       	cp	r28, r14
    2634:	df 05       	cpc	r29, r15
    2636:	a0 f7       	brcc	.-24     	; 0x2620 <ReadCapacity+0x39e>
     cap_voltage2 = ReadADC(HighPin) - residual_voltage;	// read voltage again, is discharged only a little bit ?
    2638:	8a 19       	sub	r24, r10
    263a:	9b 09       	sbc	r25, r11
     cap_voltage2 = cap_voltage1 - cap_voltage2; 	// lost voltage during load time wait
    263c:	74 01       	movw	r14, r8
    263e:	e8 1a       	sub	r14, r24
    2640:	f9 0a       	sbc	r15, r25
  if (cap_voltage2 > 0) {
    2642:	1e 14       	cp	r1, r14
    2644:	1f 04       	cpc	r1, r15
    2646:	0c f0       	brlt	.+2      	; 0x264a <ReadCapacity+0x3c8>
    2648:	b3 ce       	rjmp	.-666    	; 0x23b0 <ReadCapacity+0x12e>
  if (cap_voltage2 > 200) {
    264a:	39 ec       	ldi	r19, 0xC9	; 201
    264c:	e3 16       	cp	r14, r19
    264e:	f1 04       	cpc	r15, r1
    2650:	0c f0       	brlt	.+2      	; 0x2654 <ReadCapacity+0x3d2>
    2652:	89 ce       	rjmp	.-750    	; 0x2366 <ReadCapacity+0xe4>
     vloss = (unsigned long)(cap_voltage2 * 1000UL) / cap_voltage1;
    2654:	28 ee       	ldi	r18, 0xE8	; 232
    2656:	33 e0       	ldi	r19, 0x03	; 3
    2658:	d7 01       	movw	r26, r14
    265a:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <__usmulhisi3>
    265e:	94 01       	movw	r18, r8
    2660:	09 2c       	mov	r0, r9
    2662:	00 0c       	add	r0, r0
    2664:	44 0b       	sbc	r20, r20
    2666:	55 0b       	sbc	r21, r21
    2668:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    266c:	b2 2e       	mov	r11, r18
    266e:	03 2f       	mov	r16, r19
  cap.cval_uncorrected.dw = ovcnt16 + 1;
    2670:	21 96       	adiw	r28, 0x01	; 1
    2672:	ce 01       	movw	r24, r28
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	a0 e0       	ldi	r26, 0x00	; 0
    2678:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <cap+0x8>
    267c:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <cap+0x9>
    2680:	a0 93 72 01 	sts	0x0172, r26	; 0x800172 <cap+0xa>
    2684:	b0 93 73 01 	sts	0x0173, r27	; 0x800173 <cap+0xb>
  cap.cval_uncorrected.dw *= GetRLmultip(cap_voltage1+cap_voltage2);	// get factor to convert time to capacity from table
    2688:	c4 01       	movw	r24, r8
    268a:	8e 0d       	add	r24, r14
    268c:	9f 1d       	adc	r25, r15
    268e:	80 d0       	rcall	.+256    	; 0x2790 <GetRLmultip>
    2690:	20 91 70 01 	lds	r18, 0x0170	; 0x800170 <cap+0x8>
    2694:	30 91 71 01 	lds	r19, 0x0171	; 0x800171 <cap+0x9>
    2698:	40 91 72 01 	lds	r20, 0x0172	; 0x800172 <cap+0xa>
    269c:	50 91 73 01 	lds	r21, 0x0173	; 0x800173 <cap+0xb>
    26a0:	dc 01       	movw	r26, r24
    26a2:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <__muluhisi3>
    26a6:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <cap+0x8>
    26aa:	70 93 71 01 	sts	0x0171, r23	; 0x800171 <cap+0x9>
    26ae:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <cap+0xa>
    26b2:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <cap+0xb>
   cap.cval = cap.cval_uncorrected.dw;	// set result to uncorrected
    26b6:	60 93 68 01 	sts	0x0168, r22	; 0x800168 <cap>
    26ba:	70 93 69 01 	sts	0x0169, r23	; 0x800169 <cap+0x1>
    26be:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <cap+0x2>
    26c2:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <cap+0x3>
   cap.cpre = -9;		// switch units to nF 
    26c6:	87 ef       	ldi	r24, 0xF7	; 247
    26c8:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <cap+0x12>
   Scale_C_with_vcc();		// value is below 100000 after this call, cpre is changed
    26cc:	9a dd       	rcall	.-1228   	; 0x2202 <Scale_C_with_vcc>
   cap.cval *= (1000 - C_H_KORR);	// correct with C_H_KORR with 0.1% resolution, but prevent overflow
    26ce:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <cap>
    26d2:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <cap+0x1>
    26d6:	40 91 6a 01 	lds	r20, 0x016A	; 0x80016a <cap+0x2>
    26da:	50 91 6b 01 	lds	r21, 0x016B	; 0x80016b <cap+0x3>
    26de:	a8 ee       	ldi	r26, 0xE8	; 232
    26e0:	b3 e0       	ldi	r27, 0x03	; 3
    26e2:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <__muluhisi3>
   cap.cval /= 100;		// was multiplied with 1000, now divided by 100
    26e6:	24 e6       	ldi	r18, 0x64	; 100
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	40 e0       	ldi	r20, 0x00	; 0
    26ec:	50 e0       	ldi	r21, 0x00	; 0
    26ee:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    26f2:	20 93 68 01 	sts	0x0168, r18	; 0x800168 <cap>
    26f6:	30 93 69 01 	sts	0x0169, r19	; 0x800169 <cap+0x1>
    26fa:	40 93 6a 01 	sts	0x016A, r20	; 0x80016a <cap+0x2>
    26fe:	50 93 6b 01 	sts	0x016B, r21	; 0x80016b <cap+0x3>
   goto checkDiodes;
    2702:	cb 2d       	mov	r28, r11
    2704:	d0 2f       	mov	r29, r16
   if((NumOfDiodes > 0)  && (PartFound != PART_FET)) {
    2706:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <NumOfDiodes>
    270a:	88 23       	and	r24, r24
    270c:	29 f0       	breq	.+10     	; 0x2718 <ReadCapacity+0x496>
    270e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <PartFound>
    2712:	85 30       	cpi	r24, 0x05	; 5
    2714:	09 f0       	breq	.+2      	; 0x2718 <ReadCapacity+0x496>
    2716:	27 ce       	rjmp	.-946    	; 0x2366 <ReadCapacity+0xe4>
      PartFound = PART_CAPACITOR;	//capacitor is found
    2718:	88 e0       	ldi	r24, 0x08	; 8
    271a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <PartFound>
      if ((cap.cpre > cap.cpre_max) || ((cap.cpre == cap.cpre_max) && (cap.cval > cap.cval_max))) {
    271e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <cap+0x12>
    2722:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <cap+0x13>
    2726:	98 17       	cp	r25, r24
    2728:	c4 f0       	brlt	.+48     	; 0x275a <ReadCapacity+0x4d8>
    272a:	89 13       	cpse	r24, r25
    272c:	1c ce       	rjmp	.-968    	; 0x2366 <ReadCapacity+0xe4>
    272e:	80 90 68 01 	lds	r8, 0x0168	; 0x800168 <cap>
    2732:	90 90 69 01 	lds	r9, 0x0169	; 0x800169 <cap+0x1>
    2736:	a0 90 6a 01 	lds	r10, 0x016A	; 0x80016a <cap+0x2>
    273a:	b0 90 6b 01 	lds	r11, 0x016B	; 0x80016b <cap+0x3>
    273e:	40 91 6c 01 	lds	r20, 0x016C	; 0x80016c <cap+0x4>
    2742:	50 91 6d 01 	lds	r21, 0x016D	; 0x80016d <cap+0x5>
    2746:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <cap+0x6>
    274a:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <cap+0x7>
    274e:	48 15       	cp	r20, r8
    2750:	59 05       	cpc	r21, r9
    2752:	6a 05       	cpc	r22, r10
    2754:	7b 05       	cpc	r23, r11
    2756:	08 f0       	brcs	.+2      	; 0x275a <ReadCapacity+0x4d8>
    2758:	06 ce       	rjmp	.-1012   	; 0x2366 <ReadCapacity+0xe4>
         cap.cval_max = cap.cval;
    275a:	40 91 68 01 	lds	r20, 0x0168	; 0x800168 <cap>
    275e:	50 91 69 01 	lds	r21, 0x0169	; 0x800169 <cap+0x1>
    2762:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <cap+0x2>
    2766:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <cap+0x3>
    276a:	40 93 6c 01 	sts	0x016C, r20	; 0x80016c <cap+0x4>
    276e:	50 93 6d 01 	sts	0x016D, r21	; 0x80016d <cap+0x5>
    2772:	60 93 6e 01 	sts	0x016E, r22	; 0x80016e <cap+0x6>
    2776:	70 93 6f 01 	sts	0x016F, r23	; 0x80016f <cap+0x7>
         cap.cpre_max = cap.cpre;
    277a:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <cap+0x13>
         cap.v_loss = vloss;		// lost voltage in 0.01%
    277e:	d0 93 77 01 	sts	0x0177, r29	; 0x800177 <cap+0xf>
    2782:	c0 93 76 01 	sts	0x0176, r28	; 0x800176 <cap+0xe>
         cap.ca = LowPin;		// save LowPin
    2786:	d0 92 78 01 	sts	0x0178, r13	; 0x800178 <cap+0x10>
         cap.cb = HighPin;		// save HighPin
    278a:	10 93 79 01 	sts	0x0179, r17	; 0x800179 <cap+0x11>
    278e:	eb cd       	rjmp	.-1066   	; 0x2366 <ReadCapacity+0xe4>

00002790 <GetRLmultip>:

 .section .text

; unsigned int GetRLmultip(unsigned int cvolt) 
GetRLmultip:
	push    r0
    2790:	0f 92       	push	r0
 	ldi	r18, hi8(RL_Tab_Beginn) 	; 1
    2792:	21 e0       	ldi	r18, 0x01	; 1
 	cpi	r24, lo8(RL_Tab_Beginn)		; 44
    2794:	8c 32       	cpi	r24, 0x2C	; 44
 	cpc	r25, r18
    2796:	92 07       	cpc	r25, r18
 	brcc	is_bigger		;if (cvolt >= RL_Tab_Beginn) 
    2798:	10 f4       	brcc	.+4      	; 0x279e <is_bigger>
        ldi	r24, lo8(RL_Tab_Beginn)		; uvolt = 0 = RL_Tab_Begin - RL_Tab_Begin
    279a:	8c e2       	ldi	r24, 0x2C	; 44
        ldi	r25, hi8(RL_Tab_Beginn)		; limit to begin of table
    279c:	91 e0       	ldi	r25, 0x01	; 1

0000279e <is_bigger>:
is_bigger:
 	subi	r24, lo8(RL_Tab_Beginn)	;  uvolt = cvolt - RL_Tab_Beginn;
    279e:	8c 52       	subi	r24, 0x2C	; 44
 	sbci	r25, hi8(RL_Tab_Beginn)	; 1
    27a0:	91 40       	sbci	r25, 0x01	; 1

 	ldi	r22, lo8(RL_Tab_Abstand)	; 25
    27a2:	69 e1       	ldi	r22, 0x19	; 25
 	ldi	r23, hi8(RL_Tab_Abstand)	; 0
    27a4:	70 e0       	ldi	r23, 0x00	; 0
 	ACALL	__udivmodhi4 	;tabind = uvolt / RL_Tab_Abstand;
    27a6:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <__udivmodhi4>
;  r24:25 tabres = uvolt % RL_Tab_Abstand;  // r25 allways zero
;  tabres = RL_Tab_Abstand - tabres;
 	ldi	r25, RL_Tab_Abstand	; 25
    27aa:	99 e1       	ldi	r25, 0x19	; 25
 	cpi	r22, ((RL_Tab_Length/RL_Tab_Abstand)-1)	; if (tabind > ((RL_Tab_Length/RL_Tab_Abstand)-1)) 
    27ac:	6b 32       	cpi	r22, 0x2B	; 43
 	brcs	is_lower 
    27ae:	10 f0       	brcs	.+4      	; 0x27b4 <is_lower>
	mov	r25, r24		; tabres = 0 = (RL_Tab_Abstand==tabres) - tabres
    27b0:	98 2f       	mov	r25, r24
 	ldi	r22, (RL_Tab_Length/RL_Tab_Abstand)-1; tabind = (RL_Tab_Length/RL_Tab_Abstand)-1;// limit to end of table
    27b2:	6b e2       	ldi	r22, 0x2B	; 43

000027b4 <is_lower>:
is_lower:
 	sub	r25, r24		; tabres = RL_Tab_Abstand - tabres;
    27b4:	98 1b       	sub	r25, r24

	; r22 = tabind , r25 = tabres

	LDIZ	RLtab
    27b6:	ee e6       	ldi	r30, 0x6E	; 110
    27b8:	f1 e0       	ldi	r31, 0x01	; 1
	add	r30, r22		; + tabind
    27ba:	e6 0f       	add	r30, r22
	adc	r31, zero_reg
    27bc:	f1 1d       	adc	r31, r1
	add	r30, r22		; + tabind (word access)
    27be:	e6 0f       	add	r30, r22
	adc	r31, zero_reg
    27c0:	f1 1d       	adc	r31, r1

#ifdef MEM_EEPROM
        push	r25			; save tabres
    27c2:	9f 93       	push	r25
	movw	r24,r30
    27c4:	cf 01       	movw	r24, r30
	ACALL	eeprom_read_byte	; y1 = MEM_read_word(&RLtab[tabind]);
    27c6:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <eeprom_read_byte>
	mov	r20, r24
    27ca:	48 2f       	mov	r20, r24
	adiw	r30, 1			; address of high order byte
    27cc:	31 96       	adiw	r30, 0x01	; 1
	movw	r24,r30
    27ce:	cf 01       	movw	r24, r30
	ACALL	eeprom_read_byte	; y1 = MEM_read_word(&RLtab[tabind]);
    27d0:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <eeprom_read_byte>
	mov	r21, r24
    27d4:	58 2f       	mov	r21, r24
	adiw	r30, 1			; tabind+1
    27d6:	31 96       	adiw	r30, 0x01	; 1
	movw	r24,r30
    27d8:	cf 01       	movw	r24, r30
	ACALL	eeprom_read_byte	; y2 = MEM_read_word(&RLtab[tabind+1]);
    27da:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <eeprom_read_byte>
	mov	r18, r24
    27de:	28 2f       	mov	r18, r24
	adiw	r30, 1			; address of high order byte
    27e0:	31 96       	adiw	r30, 0x01	; 1
	movw	r24,r30
    27e2:	cf 01       	movw	r24, r30
	ACALL	eeprom_read_byte	; y2 = MEM_read_word(&RLtab[tabind+1]);
    27e4:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <eeprom_read_byte>
	mov	r19, r24
    27e8:	38 2f       	mov	r19, r24
        pop	r22			; restore tabres in r22
    27ea:	6f 91       	pop	r22
 	lpm	r19, Z+
 	mov	r22, r25
#endif
;  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
;; 	ldi	r23, 0x00	; hi8(tabres) allways zero
 	sub	r20, r18	; y1 - y2
    27ec:	42 1b       	sub	r20, r18
 	sbc	r21, r19 	; maximum of 3466 need two registers
    27ee:	53 0b       	sbc	r21, r19

 	mul	r22, r20	;lo8(tabres) * lo8(y1-y2)
    27f0:	64 9f       	mul	r22, r20
 	movw	r24, r0		; r24:25 = *
    27f2:	c0 01       	movw	r24, r0
 	mul	r22, r21	;lo8(tabres) * hi8(y1-y2)
    27f4:	65 9f       	mul	r22, r21
 	add	r25, r0		; r25 + lo8(*)
    27f6:	90 0d       	add	r25, r0
;; 	mul	r23, r20	;hi8(tabres) * lo8(y1-y2) , allways zero
;; 	add	r25, r0		; r25 + lo8(*)
 	eor	r1, r1
    27f8:	11 24       	eor	r1, r1
 	adiw	r24, (RL_Tab_Abstand/2)		; 12
    27fa:	0c 96       	adiw	r24, 0x0c	; 12
 	ldi	r22, lo8(RL_Tab_Abstand)	; 25
    27fc:	69 e1       	ldi	r22, 0x19	; 25
 	ldi	r23, hi8(RL_Tab_Abstand)	; 0
    27fe:	70 e0       	ldi	r23, 0x00	; 0
 	ACALL	__udivmodhi4	; ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand 
    2800:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <__udivmodhi4>
 	add	r22, r18			; + y2
    2804:	62 0f       	add	r22, r18
 	adc	r23, r19
    2806:	73 1f       	adc	r23, r19
 	movw	r24, r22
    2808:	cb 01       	movw	r24, r22
	pop	r0
    280a:	0f 90       	pop	r0
 	ret
    280c:	08 95       	ret

0000280e <Calibrate_UR>:
#include "Transistortester.h"
void Calibrate_UR(void) {
    280e:	b0 e0       	ldi	r27, 0x00	; 0
    2810:	a0 e0       	ldi	r26, 0x00	; 0
    2812:	ed e0       	ldi	r30, 0x0D	; 13
    2814:	f4 e1       	ldi	r31, 0x14	; 20
    2816:	0c 94 15 1f 	jmp	0x3e2a	; 0x3e2a <__prologue_saves__+0xc>
  uint16_t sum_rp;	// sum of 3 Pin voltages with 680 Ohm load
  uint16_t u680;	// 3 * (Voltage at 680 Ohm)
#endif


  adc_vcc_reference = U_VCC;     // set initial VCC Voltage to 5000mV
    281a:	88 e8       	ldi	r24, 0x88	; 136
    281c:	93 e1       	ldi	r25, 0x13	; 19
    281e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <adc_vcc_reference+0x1>
    2822:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <adc_vcc_reference>
  ADCconfig.U_AVCC = adc_vcc_reference;	// set ADC to normal VCC value
    2826:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <ADCconfig+0x5>
    282a:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <ADCconfig+0x4>
  ADCconfig.Samples = R_ANZ_MESS;	// set number of ADC reads near to maximum
    282e:	8e eb       	ldi	r24, 0xBE	; 190
    2830:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <ADCconfig>
                                        //############################################
#if FLASHEND > 0x1fff
  uint16_t mv2500;
  ADC_PORT = TXD_VAL;                   // switch to 0V
    2834:	18 b8       	out	0x08, r1	; 8
  ADC_DDR = (1<<TPRELAY) | TXD_MSK;       // switch pin with 2.5V reference to GND
    2836:	80 e1       	ldi	r24, 0x10	; 16
    2838:	87 b9       	out	0x07, r24	; 7
  wait20us();			// switch only short time, so that the relais do not really switch
    283a:	0e 94 9a 03 	call	0x734	; 0x734 <wait20us>
  ADC_DDR =  TXD_MSK;		// switch pin with reference back to input
    283e:	17 b8       	out	0x07, r1	; 7
  mv2500 = W5msReadADC(TPREF); // read voltage of 2.5V precision reference
    2840:	84 e0       	ldi	r24, 0x04	; 4
    2842:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
    2846:	ac 01       	movw	r20, r24
  if ((mv2500 > 2250) && (mv2500 < 2750)) {
    2848:	8b 5c       	subi	r24, 0xCB	; 203
    284a:	98 40       	sbci	r25, 0x08	; 8
    284c:	83 3f       	cpi	r24, 0xF3	; 243
    284e:	91 40       	sbci	r25, 0x01	; 1
    2850:	a0 f4       	brcc	.+40     	; 0x287a <Calibrate_UR+0x6c>
     // precision voltage reference connected, update U_AVCC
     WithReference = 1;
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <WithReference>
     adc_vcc_reference = (unsigned long)((unsigned long)ADCconfig.U_AVCC * 2495) / mv2500;
    2858:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <ADCconfig+0x4>
    285c:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <ADCconfig+0x5>
    2860:	af eb       	ldi	r26, 0xBF	; 191
    2862:	b9 e0       	ldi	r27, 0x09	; 9
    2864:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <__umulhisi3>
    2868:	9a 01       	movw	r18, r20
    286a:	50 e0       	ldi	r21, 0x00	; 0
    286c:	40 e0       	ldi	r20, 0x00	; 0
    286e:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    2872:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <adc_vcc_reference+0x1>
    2876:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <adc_vcc_reference>
  }
  ADCconfig.U_AVCC = adc_vcc_reference;	// set ADC to normal VCC value
    287a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <adc_vcc_reference>
    287e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <adc_vcc_reference+0x1>
    2882:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <ADCconfig+0x5>
    2886:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <ADCconfig+0x4>
#endif
#ifdef WITH_AUTO_REF
  (void) ReadADC(MUX_INT_REF);	// read reference voltage 
    288a:	8e e0       	ldi	r24, 0x0E	; 14
    288c:	0e 94 a5 03 	call	0x74a	; 0x74a <ReadADC>
  ref_mv = W5msReadADC(MUX_INT_REF);	// read reference voltage 
    2890:	8e e0       	ldi	r24, 0x0E	; 14
    2892:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
    2896:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <ref_mv+0x1>
    289a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <ref_mv>
#else
  ref_mv = DEFAULT_BAND_GAP;    // set to default Reference Voltage
#endif
  (void) RefVoltage();			//compute RHmultip = f(reference voltage)
    289e:	0e 94 6d 04 	call	0x8da	; 0x8da <RefVoltage>
                                        // ref_mv_offs, ADCconfig.U_Bandgap
                                        //############################################

  EntladePins();	// make sure, that no voltage is left from capacitors
    28a2:	2b dc       	rcall	.-1962   	; 0x20fa <EntladePins>
#ifdef AUTO_CAL
  // measurement of internal resistance of the ADC port outputs switched to GND
  ADC_PORT =  TXD_VAL;	//ADC-Ports to GND
    28a4:	18 b8       	out	0x08, r1	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    28a6:	c1 e0       	ldi	r28, 0x01	; 1
    28a8:	c7 b9       	out	0x07, r28	; 7
 #ifdef PULLUP_DISABLE
  R_PORT = (1<<PIN_RL1) | (1<<PIN_RL2) | (1<<PIN_RL3);		//R_L-PORTs to VCC
    28aa:	85 e1       	ldi	r24, 0x15	; 21
    28ac:	85 b9       	out	0x05, r24	; 5
 #else
  R_PORT = 1<<PIN_RL1;		//R_L-PORT 1 to VCC
 #endif
  R_DDR = 1<<PIN_RL1;		//Pin 1 to output and over R_L to VCC
    28ae:	c4 b9       	out	0x04, r28	; 4
  sum_rm = W5msReadADC(TP1);
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
    28b6:	8c 01       	movw	r16, r24
// - - - - - - - 
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin 2 to output 0V
    28b8:	82 e0       	ldi	r24, 0x02	; 2
    28ba:	d8 2e       	mov	r13, r24
    28bc:	d7 b8       	out	0x07, r13	; 7
 #ifndef PULLUP_DISABLE
  R_PORT =  1<<PIN_RL2;		//R_L-PORT 2 to VCC
 #endif
  R_DDR = 1<<PIN_RL2;		//Pin 2 to output and over R_L to VCC
    28be:	d4 e0       	ldi	r29, 0x04	; 4
    28c0:	d4 b9       	out	0x04, r29	; 4
  sum_rm += W5msReadADC(TP2);
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
    28c8:	08 0f       	add	r16, r24
    28ca:	19 1f       	adc	r17, r25
// - - - - - - - 
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin 3 to output 0V
    28cc:	d7 b9       	out	0x07, r29	; 7
 #ifndef PULLUP_DISABLE
  R_PORT =  1<<PIN_RL3;		//R_L-PORT 3 to VCC
 #endif
  R_DDR = 1<<PIN_RL3;		//Pin 3 to output and over R_L to VCC
    28ce:	90 e1       	ldi	r25, 0x10	; 16
    28d0:	c9 2e       	mov	r12, r25
    28d2:	c4 b8       	out	0x04, r12	; 4
  sum_rm += W5msReadADC(TP3);	//add all three values
    28d4:	82 e0       	ldi	r24, 0x02	; 2
    28d6:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
    28da:	08 0f       	add	r16, r24
    28dc:	19 1f       	adc	r17, r25
// - - - - - - - 

  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
    28de:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
    28e0:	c8 b9       	out	0x08, r28	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    28e2:	c7 b9       	out	0x07, r28	; 7
  R_DDR = 1<<PIN_RL1;		//Pin 1 to output and over R_L to GND
    28e4:	c4 b9       	out	0x04, r28	; 4
  sum_rp = vcc_diff(W5msReadADC(TP1));
    28e6:	80 e0       	ldi	r24, 0x00	; 0
    28e8:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
    28ec:	0e 94 07 04 	call	0x80e	; 0x80e <vcc_diff>
    28f0:	7c 01       	movw	r14, r24
// - - - - - - - 
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
    28f2:	d8 b8       	out	0x08, r13	; 8
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
    28f4:	d7 b8       	out	0x07, r13	; 7
  R_DDR = 1<<PIN_RL2;		//Pin 2 to output and over R_L to GND
    28f6:	d4 b9       	out	0x04, r29	; 4
  sum_rp += vcc_diff(W5msReadADC(TP2));
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
    28fe:	0e 94 07 04 	call	0x80e	; 0x80e <vcc_diff>
    2902:	e8 0e       	add	r14, r24
    2904:	f9 1e       	adc	r15, r25
// - - - - - - - 

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
    2906:	d8 b9       	out	0x08, r29	; 8
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
    2908:	d7 b9       	out	0x07, r29	; 7
  R_DDR = 1<<PIN_RL3;		//Pin 3 to output and over R_L to GND
    290a:	c4 b8       	out	0x04, r12	; 4
  sum_rp += vcc_diff(W5msReadADC(TP3));
    290c:	82 e0       	ldi	r24, 0x02	; 2
    290e:	0e 94 a4 03 	call	0x748	; 0x748 <W5msReadADC>
    2912:	0e 94 07 04 	call	0x80e	; 0x80e <vcc_diff>
    2916:	e7 01       	movw	r28, r14
    2918:	c8 0f       	add	r28, r24
    291a:	d9 1f       	adc	r29, r25
// - - - - - - - 
  ADC_DDR =  TXD_MSK;	//ADC-Pins to input
    291c:	17 b8       	out	0x07, r1	; 7
  ADC_PORT =  TXD_VAL;	//ADC-Ports to GND
    291e:	18 b8       	out	0x08, r1	; 8
  R_DDR   = 0;
    2920:	14 b8       	out	0x04, r1	; 4

  u680 = ((ADCconfig.U_AVCC * 3) - sum_rm - sum_rp);	//three times the voltage at the 680 Ohm
    2922:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <ADCconfig+0x4>
    2926:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <ADCconfig+0x5>
    292a:	6c 01       	movw	r12, r24
    292c:	cc 0c       	add	r12, r12
    292e:	dd 1c       	adc	r13, r13
    2930:	c8 0e       	add	r12, r24
    2932:	d9 1e       	adc	r13, r25
    2934:	c0 1a       	sub	r12, r16
    2936:	d1 0a       	sbc	r13, r17
    2938:	cc 1a       	sub	r12, r28
    293a:	dd 0a       	sbc	r13, r29
  pin_rmi = (unsigned long)((unsigned long)sum_rm * (unsigned long)R_L_VAL) / (unsigned long)u680;
    293c:	f1 2c       	mov	r15, r1
    293e:	e1 2c       	mov	r14, r1
    2940:	98 01       	movw	r18, r16
    2942:	a0 e9       	ldi	r26, 0x90	; 144
    2944:	ba e1       	ldi	r27, 0x1A	; 26
    2946:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <__umulhisi3>
    294a:	a7 01       	movw	r20, r14
    294c:	96 01       	movw	r18, r12
    294e:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    2952:	49 01       	movw	r8, r18
    2954:	5a 01       	movw	r10, r20
    2956:	30 93 35 01 	sts	0x0135, r19	; 0x800135 <pin_rmi+0x1>
    295a:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <pin_rmi>
//  adcmv[2] = pin_rm;	// for last output in row 2
  pin_rpl = (unsigned long)((unsigned long)sum_rp * (unsigned long)R_L_VAL) / (unsigned long)u680;
    295e:	9e 01       	movw	r18, r28
    2960:	a0 e9       	ldi	r26, 0x90	; 144
    2962:	ba e1       	ldi	r27, 0x1A	; 26
    2964:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <__umulhisi3>
    2968:	a7 01       	movw	r20, r14
    296a:	96 01       	movw	r18, r12
    296c:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <__udivmodsi4>
    2970:	30 93 2e 01 	sts	0x012E, r19	; 0x80012e <pin_rpl+0x1>
    2974:	20 93 2d 01 	sts	0x012D, r18	; 0x80012d <pin_rpl>
  resis680pl = pin_rpl + R_L_VAL;
    2978:	20 57       	subi	r18, 0x70	; 112
    297a:	35 4e       	sbci	r19, 0xE5	; 229
    297c:	30 93 18 01 	sts	0x0118, r19	; 0x800118 <resis680pl+0x1>
    2980:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <resis680pl>
  resis680mi = pin_rmi + R_L_VAL;
    2984:	80 e7       	ldi	r24, 0x70	; 112
    2986:	88 1a       	sub	r8, r24
    2988:	85 ee       	ldi	r24, 0xE5	; 229
    298a:	98 0a       	sbc	r9, r24
    298c:	90 92 11 01 	sts	0x0111, r9	; 0x800111 <resis680mi+0x1>
    2990:	80 92 10 01 	sts	0x0110, r8	; 0x800110 <resis680mi>
#endif

  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    2994:	89 e1       	ldi	r24, 0x19	; 25
    2996:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <ADCconfig>
 } 
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
    299e:	ec e0       	ldi	r30, 0x0C	; 12
    29a0:	0c 94 31 1f 	jmp	0x3e62	; 0x3e62 <__epilogue_restores__+0xc>

000029a4 <show_resis>:
void show_resis(byte pin1, byte pin2, byte how)
// can be invoked both from main() and from show_Resis13()
// pin1 and pin2 are resistor's pin numbers, but ResistorList[0] should also be correctly filled
// assumes resistance has already been measured, but will do inductance measurements as appropriate
// "how" flag tells how to show the results: if set [R] or [RL] will be shown in top right corner
{
    29a4:	0f 93       	push	r16
    29a6:	cf 93       	push	r28
    29a8:	c6 2f       	mov	r28, r22
 #ifdef RMETER_WITH_L
           lcd_testpin(pin1);
    29aa:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_MEM_string(Resistor_str);	// -[==]-
    29ae:	80 e6       	ldi	r24, 0x60	; 96
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
           lcd_refresh();
	   ReadInductance();	// measure inductance, possible only with R<2.1k
    29b6:	ad d0       	rcall	.+346    	; 0x2b12 <ReadInductance>

           // draw first line: the pin numbers, RR and possibly LL symbol, and possibly [R] or [RL]
           byte lclx0=(lc_lx==0);
           if (inductor_lpre < 0 || !lclx0) 
  #else 
           if (inductor_lpre < 0)
    29b8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <inductor_lpre>
    29bc:	87 ff       	sbrs	r24, 7
    29be:	04 c0       	rjmp	.+8      	; 0x29c8 <show_resis+0x24>
  #endif

           {
              lcd_MEM_string(Inductor_str+1);            // "LL-"
    29c0:	8c e5       	ldi	r24, 0x5C	; 92
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
           }
           lcd_testpin(pin2);
    29c8:	8c 2f       	mov	r24, r28
    29ca:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
              if (_lcd_column<=LCD_LINE_LENGTH-4) {
                 lcd_MEM_string(RL_METER_str+(_lcd_column-6));	// " [R]" or "[RL]"
              }
           }
  #else
           lcd_clear_line();
    29ce:	0e 94 93 01 	call	0x326	; 0x326 <lcd_clear_line>
  #endif
//           lcd_line2();
           lcd_next_line_wait(0);
    29d2:	80 e0       	ldi	r24, 0x00	; 0
    29d4:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_next_line_wait>
   #endif
           } else 
  #endif
           {
//              lcd_next_line_wait(0);
              RvalOut(ResistorList[0]);		// show Resistance, probably ESR
    29d8:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <ResistorList>
    29dc:	0e 94 32 02 	call	0x464	; 0x464 <RvalOut>

              if (inductor_lpre < -2) {
    29e0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <inductor_lpre>
    29e4:	8e 3f       	cpi	r24, 0xFE	; 254
    29e6:	94 f4       	brge	.+36     	; 0x2a0c <show_resis+0x68>
                 // resistor has also inductance
                 lcd_MEM_string(Lis_str);		// "L="
    29e8:	88 e7       	ldi	r24, 0x78	; 120
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
                 DisplayValue(inductor_lx,inductor_lpre,'H',3);        // output classic inductance
    29f0:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <inductor_lx>
    29f4:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <inductor_lx+0x1>
    29f8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <inductor_lx+0x2>
    29fc:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <inductor_lx+0x3>
    2a00:	03 e0       	ldi	r16, 0x03	; 3
    2a02:	28 e4       	ldi	r18, 0x48	; 72
    2a04:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <inductor_lpre>
    2a08:	0e 94 ba 02 	call	0x574	; 0x574 <DisplayValue>
 #else		/* without Inductance measurement, only show resistance */
           lcd_line2();
           inductor_lpre = -1;		// prevent ESR measurement because Inductance is not tested
           RvalOut(ResistorList[0]);	// show Resistance, no ESR
 #endif
}
    2a0c:	cf 91       	pop	r28
    2a0e:	0f 91       	pop	r16
    2a10:	08 95       	ret

00002a12 <show_cap_simple>:
#if FLASHEND > 0x3fff
void show_cap(uint8_t how)
#else
void show_cap_simple(void)
#endif
{
    2a12:	0f 93       	push	r16
    2a14:	cf 93       	push	r28
    2a16:	df 93       	push	r29
//     lcd_MEM_string(Capacitor);
  lcd_line1();
    2a18:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_line1>
  lcd_testpin(cap.ca);               //Pin number 1
    2a1c:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <cap+0x10>
    2a20:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
  lcd_MEM_string(CapZeich);          // capacitor sign
    2a24:	84 e9       	ldi	r24, 0x94	; 148
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
#if FLASHEND > 0x1fff
  uint8_t present_res;	// true, if resistor symbol is shown in Row 1
  uint8_t present_esr;
  uint8_t present_vloss;
  GetVloss();              
    2a2c:	36 d4       	rcall	.+2156   	; 0x329a <GetVloss>
  cap.esr = GetESR(cap.cb, cap.ca);          // get ESR of capacitor
    2a2e:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <cap+0x10>
    2a32:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <cap+0x11>
    2a36:	9b d2       	rcall	.+1334   	; 0x2f6e <GetESR>
    2a38:	ec 01       	movw	r28, r24
    2a3a:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <cap+0xd>
    2a3e:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <cap+0xc>

  present_esr = (cap.esr < 65530);
  present_vloss = (cap.v_loss != 0);
    2a42:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <cap+0xe>
    2a46:	30 91 77 01 	lds	r19, 0x0177	; 0x800177 <cap+0xf>
  present_res = present_esr; // show every time a well ESR value is detected, Vloss extra line
 #else
  #if FLASHEND > 0x3fff
  present_res = (present_esr  && (!present_vloss || how));
  #else
  present_res = (present_esr  && (!present_vloss));
    2a4a:	ca 3f       	cpi	r28, 0xFA	; 250
    2a4c:	8f ef       	ldi	r24, 0xFF	; 255
    2a4e:	d8 07       	cpc	r29, r24
    2a50:	60 f4       	brcc	.+24     	; 0x2a6a <show_cap_simple+0x58>
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	23 2b       	or	r18, r19
    2a58:	11 f0       	breq	.+4      	; 0x2a5e <show_cap_simple+0x4c>
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
  #endif
  // show Vloss additionally in line 2 , or no Vloss
 #endif
  if (present_res)
    2a5e:	89 2b       	or	r24, r25
    2a60:	21 f0       	breq	.+8      	; 0x2a6a <show_cap_simple+0x58>
  {
     lcd_MEM_string(Resistor_str+1);   // [=]-
    2a62:	81 e6       	ldi	r24, 0x61	; 97
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
  }
#endif   /* FLASHEND > 0x1fff */
  lcd_testpin(cap.cb);               //Pin number 2
    2a6a:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <cap+0x11>
    2a6e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
     lcd_MEM2_string(CMETER_13_str);       // "[C]" at the end of line 1
  } else {
 #endif  /* FLASHENF > 0x3fff */

 #if (LCD_LINES <= 2) /* Vloss in line 1 */
     if (cap.v_loss != 0) {
    2a72:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <cap+0xe>
    2a76:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <cap+0xf>
    2a7a:	89 2b       	or	r24, r25
    2a7c:	69 f0       	breq	.+26     	; 0x2a98 <show_cap_simple+0x86>
        lcd_MEM_string(VLOSS_str);      // " Vloss=" 
    2a7e:	8b e7       	ldi	r24, 0x7B	; 123
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
        DisplayValue16(cap.v_loss,-1,'%',2);
    2a86:	22 e0       	ldi	r18, 0x02	; 2
    2a88:	45 e2       	ldi	r20, 0x25	; 37
    2a8a:	6f ef       	ldi	r22, 0xFF	; 255
    2a8c:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <cap+0xe>
    2a90:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <cap+0xf>
    2a94:	0e 94 67 03 	call	0x6ce	; 0x6ce <DisplayValue16>
     }
 #endif
     lcd_clear_line();		// clear to end of line
    2a98:	0e 94 93 01 	call	0x326	; 0x326 <lcd_clear_line>
#else
  lcd_clear_line();		// clear to end of line
#endif  /* FLASHEND > 0x1fff */

// - - - - - - - - - - - - - - - - - - - - - -
  lcd_line2();                       //2. row 
    2a9c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_line2>
  DisplayValue(cap.cval_max,cap.cpre_max,'F',4);
    2aa0:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <cap+0x4>
    2aa4:	70 91 6d 01 	lds	r23, 0x016D	; 0x80016d <cap+0x5>
    2aa8:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <cap+0x6>
    2aac:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <cap+0x7>
    2ab0:	04 e0       	ldi	r16, 0x04	; 4
    2ab2:	26 e4       	ldi	r18, 0x46	; 70
    2ab4:	40 91 7b 01 	lds	r20, 0x017B	; 0x80017b <cap+0x13>
    2ab8:	0e 94 ba 02 	call	0x574	; 0x574 <DisplayValue>

#if FLASHEND > 0x1fff
  if (present_esr) {
    2abc:	ca 3f       	cpi	r28, 0xFA	; 250
    2abe:	df 4f       	sbci	r29, 0xFF	; 255
    2ac0:	68 f4       	brcc	.+26     	; 0x2adc <show_cap_simple+0xca>
     lcd_MEM_string(ESR_str);        // " ESR="
    2ac2:	83 e8       	ldi	r24, 0x83	; 131
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
     DisplayValue16(cap.esr,-2,LCD_CHAR_OMEGA,2);
    2aca:	22 e0       	ldi	r18, 0x02	; 2
    2acc:	44 ef       	ldi	r20, 0xF4	; 244
    2ace:	6e ef       	ldi	r22, 0xFE	; 254
    2ad0:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <cap+0xc>
    2ad4:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <cap+0xd>
    2ad8:	0e 94 67 03 	call	0x6ce	; 0x6ce <DisplayValue16>
  }
  lcd_clear_line();
    2adc:	0e 94 93 01 	call	0x326	; 0x326 <lcd_clear_line>
  #endif
 #endif
#else
  lcd_clear_line();
#endif  /* FLASHEND > 0x1fff */
} /* end show_cap or show_cap_simple */
    2ae0:	df 91       	pop	r29
    2ae2:	cf 91       	pop	r28
    2ae4:	0f 91       	pop	r16
    2ae6:	08 95       	ret

00002ae8 <Bat_update>:
#endif  /* FLASHEND > 0x3fff */

#if defined(POWER_OFF) && defined(BAT_CHECK)
// monitor Battery in line 4 or line2, if a two line display 
void Bat_update(uint8_t tt) {
  if((tt % 16) == 0) {
    2ae8:	8f 70       	andi	r24, 0x0F	; 15
    2aea:	41 f4       	brne	.+16     	; 0x2afc <Bat_update+0x14>
 #if (LCD_LINES > 3)
     lcd_line4();
     Battery_check();
 #else
     wait_about1s();	/* time delay before overwiting line2 with Bat= message */
    2aec:	0e 94 81 03 	call	0x702	; 0x702 <wait1000ms>
  #if (LCD_LINES == 3)
     lcd_line3();	// use the last line for Bat=
  #else
     lcd_line2();	// use the last line for Bat=
    2af0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_line2>
  #endif
     Battery_check();
    2af4:	0e 94 02 08 	call	0x1004	; 0x1004 <Battery_check>
     wait_about1s();	/* time delay for reading the Bat= message */
    2af8:	0c 94 81 03 	jmp	0x702	; 0x702 <wait1000ms>
 #endif
  }
};	/* end Bat_update() */
    2afc:	08 95       	ret

00002afe <Pwr_mode_check>:
#endif
#if defined(POWER_OFF)
uint8_t Pwr_mode_check(uint8_t tt) {
 #if FLASHEND > 0x1fff
 if ((tt == 15) && (DC_Pwr_mode == 1)) return(0);  // when DC_Mode, next cycle start with 0
    2afe:	8f 30       	cpi	r24, 0x0F	; 15
    2b00:	21 f4       	brne	.+8      	; 0x2b0a <Pwr_mode_check+0xc>
    2b02:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <DC_Pwr_mode>
    2b06:	91 30       	cpi	r25, 0x01	; 1
    2b08:	11 f0       	breq	.+4      	; 0x2b0e <Pwr_mode_check+0x10>
 #else
 if (tt == 15)  return(0);  // when DC_Mode, next cycle start with 0
 #endif
 return(tt + 1);	// otherwise increase
    2b0a:	8f 5f       	subi	r24, 0xFF	; 255
    2b0c:	08 95       	ret
 if ((tt == 15) && (DC_Pwr_mode == 1)) return(0);  // when DC_Mode, next cycle start with 0
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
};
    2b10:	08 95       	ret

00002b12 <ReadInductance>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadInductance(void) {
    2b12:	a6 e1       	ldi	r26, 0x16	; 22
    2b14:	b0 e0       	ldi	r27, 0x00	; 0
    2b16:	ef e8       	ldi	r30, 0x8F	; 143
    2b18:	f5 e1       	ldi	r31, 0x15	; 21
    2b1a:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <__prologue_saves__>
  uint16_t pw;		// return value from Rnum2pins()
  uint8_t pb[2];	// the pin numbers LowPin and HighPin
  } rpins;	// resistor pin structure to prevent two return parameters


  inductor_lpre = 2;	// H units, mark inductor as 1, if resistor is too big
    2b1e:	82 e0       	ldi	r24, 0x02	; 2
    2b20:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <inductor_lpre>
  if(PartFound != PART_RESISTOR) {
    2b24:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <PartFound>
    2b28:	81 30       	cpi	r24, 0x01	; 1
    2b2a:	09 f0       	breq	.+2      	; 0x2b2e <ReadInductance+0x1c>
    2b2c:	e5 c1       	rjmp	.+970    	; 0x2ef8 <ReadInductance+0x3e6>
     return;	//We have found no resistor  
  }
  if (ResistorsFound != 1) {
    2b2e:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <ResistorsFound>
    2b32:	81 30       	cpi	r24, 0x01	; 1
    2b34:	09 f0       	breq	.+2      	; 0x2b38 <ReadInductance+0x26>
    2b36:	e0 c1       	rjmp	.+960    	; 0x2ef8 <ReadInductance+0x3e6>
     return;	// do not search for inductance, more than 1 resistor
  }
     res_num = ResistorList[0];
    2b38:	40 90 50 01 	lds	r4, 0x0150	; 0x800150 <ResistorList>
     if (ResistorVal[res_num] > 21000) return;
    2b3c:	24 e0       	ldi	r18, 0x04	; 4
    2b3e:	42 9e       	mul	r4, r18
    2b40:	f0 01       	movw	r30, r0
    2b42:	11 24       	eor	r1, r1
    2b44:	e9 56       	subi	r30, 0x69	; 105
    2b46:	fe 4f       	sbci	r31, 0xFE	; 254
    2b48:	80 81       	ld	r24, Z
    2b4a:	91 81       	ldd	r25, Z+1	; 0x01
    2b4c:	a2 81       	ldd	r26, Z+2	; 0x02
    2b4e:	b3 81       	ldd	r27, Z+3	; 0x03
    2b50:	89 30       	cpi	r24, 0x09	; 9
    2b52:	32 e5       	ldi	r19, 0x52	; 82
    2b54:	93 07       	cpc	r25, r19
    2b56:	a1 05       	cpc	r26, r1
    2b58:	b1 05       	cpc	r27, r1
    2b5a:	08 f0       	brcs	.+2      	; 0x2b5e <ReadInductance+0x4c>
    2b5c:	cd c1       	rjmp	.+922    	; 0x2ef8 <ReadInductance+0x3e6>
     resistor = ResistorVal[res_num];
    2b5e:	1c 01       	movw	r2, r24

     // we can check for Inductance, if resistance is below 2100 Ohm
     for (count=0;count<4;count++) {
    2b60:	71 2c       	mov	r7, r1
        // Try four times (different direction and with delayed counter start)
        if (count < 2) {
    2b62:	81 e0       	ldi	r24, 0x01	; 1
    2b64:	87 15       	cp	r24, r7
    2b66:	08 f4       	brcc	.+2      	; 0x2b6a <ReadInductance+0x58>
    2b68:	ca c1       	rjmp	.+916    	; 0x2efe <ReadInductance+0x3ec>
           // first and second pass, direction 1
           rpins.pw = Rnum2pins(res_num);	// compute the two pinnumbers for resistor res_num
    2b6a:	84 2d       	mov	r24, r4
    2b6c:	0e 94 28 02 	call	0x450	; 0x450 <Rnum2pins>
    2b70:	98 2e       	mov	r9, r24
    2b72:	89 2e       	mov	r8, r25
           rpins.pb[1] = ii;
        }
#if (((PIN_RL1 + 1) != PIN_RH1) || ((PIN_RL2 + 1) != PIN_RH2) || ((PIN_RL3 + 1) != PIN_RH3))
        HiADC = pgm_read_byte((&PinRLRHADCtab[6])+rpins.pb[1]-TP_MIN);	// Table of ADC Pins including | TXD_VAL
#else
        HiADC = pgm_read_byte((&PinRLRHADCtab[3])+rpins.pb[1]-TP_MIN);	// Table of ADC Pins including | TXD_VAL
    2b74:	e8 2d       	mov	r30, r8
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	ef 57       	subi	r30, 0x7F	; 127
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	54 90       	lpm	r5, Z
#endif
        LoPinR_L = pgm_read_byte(&PinRLRHADCtab[rpins.pb[0]]-TP_MIN);	//R_L mask for HighPin R_L load
    2b7e:	89 2d       	mov	r24, r9
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	fc 01       	movw	r30, r24
    2b84:	e2 58       	subi	r30, 0x82	; 130
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	e4 91       	lpm	r30, Z
        //==================================================================================
        // Measurement of Inductance values
        R_PORT = 0;		// switch R port to GND
    2b8a:	15 b8       	out	0x05, r1	; 5
        ADC_PORT =   TXD_VAL;		// switch ADC-Port to GND
    2b8c:	18 b8       	out	0x08, r1	; 8
    2b8e:	27 2d       	mov	r18, r7
    2b90:	21 70       	andi	r18, 0x01	; 1
    2b92:	62 2e       	mov	r6, r18
        if ((resistor < 240) && ((count & 0x01) == 0)) {
    2b94:	30 ef       	ldi	r19, 0xF0	; 240
    2b96:	23 16       	cp	r2, r19
    2b98:	31 04       	cpc	r3, r1
    2b9a:	08 f0       	brcs	.+2      	; 0x2b9e <ReadInductance+0x8c>
    2b9c:	b5 c1       	rjmp	.+874    	; 0x2f08 <ReadInductance+0x3f6>
    2b9e:	21 11       	cpse	r18, r1
    2ba0:	b3 c1       	rjmp	.+870    	; 0x2f08 <ReadInductance+0x3f6>
           // we can use PinR_L for measurement
           mess_r = RR680MI - R_L_VAL;			// use only pin output resistance
    2ba2:	00 91 10 01 	lds	r16, 0x0110	; 0x800110 <resis680mi>
    2ba6:	10 91 11 01 	lds	r17, 0x0111	; 0x800111 <resis680mi+0x1>
    2baa:	00 59       	subi	r16, 0x90	; 144
    2bac:	1a 41       	sbci	r17, 0x1A	; 26
           ADC_DDR = HiADC | (1<<rpins.pb[0]) | TXD_MSK;	// switch HiADC and Low Pin to GND, 
    2bae:	21 e0       	ldi	r18, 0x01	; 1
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	09 2c       	mov	r0, r9
    2bb4:	02 c0       	rjmp	.+4      	; 0x2bba <ReadInductance+0xa8>
    2bb6:	22 0f       	add	r18, r18
    2bb8:	33 1f       	adc	r19, r19
    2bba:	0a 94       	dec	r0
    2bbc:	e2 f7       	brpl	.-8      	; 0x2bb6 <ReadInductance+0xa4>
    2bbe:	c9 01       	movw	r24, r18
    2bc0:	85 29       	or	r24, r5
    2bc2:	87 b9       	out	0x07, r24	; 7
     for (count=0;count<4;count++) {
    2bc4:	34 e1       	ldi	r19, 0x14	; 20
    2bc6:	39 8b       	std	Y+17, r19	; 0x11
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
            // wait for current is near zero
            umax = W10msReadADC(rpins.pb[0]);
    2bc8:	89 2d       	mov	r24, r9
    2bca:	0e 94 a3 03 	call	0x746	; 0x746 <W10msReadADC>
    2bce:	5c 01       	movw	r10, r24
            total_r =  ReadADC(rpins.pb[1]);
    2bd0:	88 2d       	mov	r24, r8
    2bd2:	0e 94 a5 03 	call	0x74a	; 0x74a <ReadADC>
            if ((umax < CAP_EMPTY_LEVEL) && (total_r < CAP_EMPTY_LEVEL)) break;	// low current detected
    2bd6:	24 e0       	ldi	r18, 0x04	; 4
    2bd8:	a2 16       	cp	r10, r18
    2bda:	b1 04       	cpc	r11, r1
    2bdc:	10 f4       	brcc	.+4      	; 0x2be2 <ReadInductance+0xd0>
    2bde:	04 97       	sbiw	r24, 0x04	; 4
    2be0:	28 f0       	brcs	.+10     	; 0x2bec <ReadInductance+0xda>
    2be2:	39 89       	ldd	r19, Y+17	; 0x11
    2be4:	31 50       	subi	r19, 0x01	; 1
    2be6:	39 8b       	std	Y+17, r19	; 0x11
        for (ii=0;ii<20;ii++) {
    2be8:	31 11       	cpse	r19, r1
    2bea:	ee cf       	rjmp	.-36     	; 0x2bc8 <ReadInductance+0xb6>
        }
        // setup Analog Comparator
        ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    2bec:	80 e4       	ldi	r24, 0x40	; 64
    2bee:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
        ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    2bf2:	94 e5       	ldi	r25, 0x54	; 84
    2bf4:	90 bf       	out	0x30, r25	; 48
        ADMUX = (1<<REFS0) | rpins.pb[0];			// switch Mux to Low-Pin
    2bf6:	89 2d       	mov	r24, r9
    2bf8:	80 64       	ori	r24, 0x40	; 64
    2bfa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
        ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    2bfe:	26 e1       	ldi	r18, 0x16	; 22
    2c00:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
   
      // setup Counter1
        timeconstant.w[1] = 0;		// set ov counter to 0
    2c04:	f1 2c       	mov	r15, r1
    2c06:	e1 2c       	mov	r14, r1
        TCCR1A = 0;			// set Counter1 to normal Mode
    2c08:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
        TCNT1 = 0;			//set Counter to 0
    2c0c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    2c10:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
        TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// reset TIFR or TIFR1
    2c14:	37 e2       	ldi	r19, 0x27	; 39
    2c16:	36 bb       	out	0x16, r19	; 22
//        HiADC |= TXD_VAL;
        wait200us();			// wait for bandgap to start up
    2c18:	0e 94 95 03 	call	0x72a	; 0x72a <wait200us>
        if ((count & 0x01) == 0 ) {
    2c1c:	87 2d       	mov	r24, r7
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	9a 8b       	std	Y+18, r25	; 0x12
    2c22:	89 8b       	std	Y+17, r24	; 0x11
    2c24:	61 10       	cpse	r6, r1
    2c26:	77 c1       	rjmp	.+750    	; 0x2f16 <ReadInductance+0x404>
           //first start counter, then start current
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    2c28:	81 e8       	ldi	r24, 0x81	; 129
    2c2a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    2c2e:	58 b8       	out	0x08, r5	; 8
        }
      
      //******************************
        while(1) {
           // Wait, until  Input Capture is set
           ii = TI1_INT_FLAGS;		//read Timer flags
    2c30:	86 b3       	in	r24, 0x16	; 22
           if (ii & (1<<ICF1))  {
    2c32:	85 fd       	sbrc	r24, 5
    2c34:	0c c0       	rjmp	.+24     	; 0x2c4e <ReadInductance+0x13c>
              break;
           }
           if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    2c36:	80 ff       	sbrs	r24, 0
    2c38:	fb cf       	rjmp	.-10     	; 0x2c30 <ReadInductance+0x11e>
              TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    2c3a:	21 e0       	ldi	r18, 0x01	; 1
    2c3c:	26 bb       	out	0x16, r18	; 22
              wdt_reset();
    2c3e:	a8 95       	wdr
              timeconstant.w[1]++;		// count one OV
    2c40:	97 01       	movw	r18, r14
    2c42:	2f 5f       	subi	r18, 0xFF	; 255
    2c44:	3f 4f       	sbci	r19, 0xFF	; 255
    2c46:	79 01       	movw	r14, r18
              if(timeconstant.w[1] == (F_CPU/100000UL)) {
    2c48:	20 35       	cpi	r18, 0x50	; 80
    2c4a:	31 05       	cpc	r19, r1
    2c4c:	89 f7       	brne	.-30     	; 0x2c30 <ReadInductance+0x11e>
                 break; 	//Timeout for Charging, above 0.65 s
              }
           }
        }
        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    2c4e:	18 b8       	out	0x08, r1	; 8
        TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    2c50:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    2c54:	30 e2       	ldi	r19, 0x20	; 32
    2c56:	36 bb       	out	0x16, r19	; 22
        timeconstant.w[0] = ICR1;		// get previous Input Capture Counter flag
    2c58:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    2c5c:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    2c60:	69 01       	movw	r12, r18
      // check actual counter, if an additional overflow must be added
        if((TCNT1 > timeconstant.w[0]) && (ii & (1<<TOV1))) {
    2c62:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    2c66:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    2c6a:	24 17       	cp	r18, r20
    2c6c:	35 07       	cpc	r19, r21
    2c6e:	38 f4       	brcc	.+14     	; 0x2c7e <ReadInductance+0x16c>
    2c70:	80 ff       	sbrs	r24, 0
    2c72:	05 c0       	rjmp	.+10     	; 0x2c7e <ReadInductance+0x16c>
           // this OV was not counted, but was before the Input Capture
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	86 bb       	out	0x16, r24	; 22
           timeconstant.w[1]++;			// count one additional OV
    2c78:	9f ef       	ldi	r25, 0xFF	; 255
    2c7a:	e9 1a       	sub	r14, r25
    2c7c:	f9 0a       	sbc	r15, r25
        }

//        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    2c7e:	86 e9       	ldi	r24, 0x96	; 150
    2c80:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2c84:	b4 e1       	ldi	r27, 0x14	; 20
    2c86:	5b 2e       	mov	r5, r27
        for (ii=0;ii<20;ii++) {
            // wait for current is near zero
            umax = W10msReadADC(rpins.pb[0]);
    2c88:	89 2d       	mov	r24, r9
    2c8a:	0e 94 a3 03 	call	0x746	; 0x746 <W10msReadADC>
    2c8e:	5c 01       	movw	r10, r24
            total_r =  ReadADC(rpins.pb[1]);
    2c90:	88 2d       	mov	r24, r8
    2c92:	0e 94 a5 03 	call	0x74a	; 0x74a <ReadADC>
            if ((umax < CAP_EMPTY_LEVEL) && (total_r < CAP_EMPTY_LEVEL)) break;	// low current detected
    2c96:	24 e0       	ldi	r18, 0x04	; 4
    2c98:	a2 16       	cp	r10, r18
    2c9a:	b1 04       	cpc	r11, r1
    2c9c:	10 f4       	brcc	.+4      	; 0x2ca2 <ReadInductance+0x190>
    2c9e:	04 97       	sbiw	r24, 0x04	; 4
    2ca0:	18 f0       	brcs	.+6      	; 0x2ca8 <ReadInductance+0x196>
    2ca2:	5a 94       	dec	r5
        for (ii=0;ii<20;ii++) {
    2ca4:	51 10       	cpse	r5, r1
    2ca6:	f0 cf       	rjmp	.-32     	; 0x2c88 <ReadInductance+0x176>
//  #undef CNT_ZERO_42
//  #undef CNT_ZERO_720
//  #define CNT_ZERO_42 7
//  #define CNT_ZERO_720 10
//#endif
        total_r = (mess_r + resistor + RRpinMI);
    2ca8:	80 90 34 01 	lds	r8, 0x0134	; 0x800134 <pin_rmi>
    2cac:	90 90 35 01 	lds	r9, 0x0135	; 0x800135 <pin_rmi+0x1>
    2cb0:	82 0c       	add	r8, r2
    2cb2:	93 1c       	adc	r9, r3
    2cb4:	80 0e       	add	r8, r16
    2cb6:	91 1e       	adc	r9, r17
//        cnt_diff = 0;
//        if (total_r > 7000) cnt_diff = 1;
//        if (total_r > 14000) cnt_diff = 2;
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
        tmpint = ref_mv_offs;		// corrected reference voltage (for C)
    2cb8:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <ref_mv_offs>
    2cbc:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <ref_mv_offs+0x1>
        if (mess_r < R_L_VAL) {
    2cc0:	00 39       	cpi	r16, 0x90	; 144
    2cc2:	8a e1       	ldi	r24, 0x1A	; 26
    2cc4:	18 07       	cpc	r17, r24
    2cc6:	08 f0       	brcs	.+2      	; 0x2cca <ReadInductance+0x1b8>
    2cc8:	2f c1       	rjmp	.+606    	; 0x2f28 <ReadInductance+0x416>
           // measurement without 680 Ohm
           cnt_diff = CNT_ZERO_42;
           if (timeconstant.dw < 225) {
              ukorr = (timeconstant.w[0] / 5) - 20;
           } else {
              ukorr = 25;
    2cca:	69 e1       	ldi	r22, 0x19	; 25
           if (timeconstant.dw < 225) {
    2ccc:	91 ee       	ldi	r25, 0xE1	; 225
    2cce:	c9 16       	cp	r12, r25
    2cd0:	d1 04       	cpc	r13, r1
    2cd2:	e1 04       	cpc	r14, r1
    2cd4:	f1 04       	cpc	r15, r1
    2cd6:	30 f4       	brcc	.+12     	; 0x2ce4 <ReadInductance+0x1d2>
              ukorr = (timeconstant.w[0] / 5) - 20;
    2cd8:	c6 01       	movw	r24, r12
    2cda:	65 e0       	ldi	r22, 0x05	; 5
    2cdc:	70 e0       	ldi	r23, 0x00	; 0
    2cde:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <__udivmodhi4>
    2ce2:	64 51       	subi	r22, 0x14	; 20
    2ce4:	28 52       	subi	r18, 0x28	; 40
    2ce6:	31 09       	sbc	r19, r1
           }
           tmpint -= (((REF_L_KORR * 10) / 10) + ukorr);
    2ce8:	26 1b       	sub	r18, r22
    2cea:	31 09       	sbc	r19, r1
    2cec:	67 fd       	sbrc	r22, 7
    2cee:	33 95       	inc	r19
           cnt_diff = CNT_ZERO_42;
    2cf0:	66 e0       	ldi	r22, 0x06	; 6
           // measurement with 680 Ohm resistor
           // if 680 Ohm resistor is used, use REF_L_KORR for correction
           cnt_diff += CNT_ZERO_720;
           tmpint += REF_L_KORR;
        }
        if (timeconstant.dw > cnt_diff) timeconstant.dw -= cnt_diff;
    2cf2:	86 2f       	mov	r24, r22
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	b0 e0       	ldi	r27, 0x00	; 0
    2cf8:	a0 e0       	ldi	r26, 0x00	; 0
    2cfa:	8c 15       	cp	r24, r12
    2cfc:	9d 05       	cpc	r25, r13
    2cfe:	ae 05       	cpc	r26, r14
    2d00:	bf 05       	cpc	r27, r15
    2d02:	08 f0       	brcs	.+2      	; 0x2d06 <ReadInductance+0x1f4>
    2d04:	19 c1       	rjmp	.+562    	; 0x2f38 <ReadInductance+0x426>
    2d06:	c8 1a       	sub	r12, r24
    2d08:	d9 0a       	sbc	r13, r25
    2d0a:	ea 0a       	sbc	r14, r26
    2d0c:	fb 0a       	sbc	r15, r27
        else          timeconstant.dw = 0;
       
        if ((count&0x01) == 1) {
    2d0e:	66 20       	and	r6, r6
    2d10:	29 f0       	breq	.+10     	; 0x2d1c <ReadInductance+0x20a>
           // second pass with delayed counter start
           timeconstant.dw += (3 * (F_CPU/1000000UL))+10;
    2d12:	82 e2       	ldi	r24, 0x22	; 34
    2d14:	c8 0e       	add	r12, r24
    2d16:	d1 1c       	adc	r13, r1
    2d18:	e1 1c       	adc	r14, r1
    2d1a:	f1 1c       	adc	r15, r1
        }
        if (timeconstant.w[1] >= (F_CPU/100000UL)) timeconstant.dw = 0; // no transition found
    2d1c:	90 e5       	ldi	r25, 0x50	; 80
    2d1e:	e9 16       	cp	r14, r25
    2d20:	f1 04       	cpc	r15, r1
    2d22:	18 f0       	brcs	.+6      	; 0x2d2a <ReadInductance+0x218>
    2d24:	c1 2c       	mov	r12, r1
    2d26:	d1 2c       	mov	r13, r1
    2d28:	76 01       	movw	r14, r12
        if (timeconstant.dw > 10) {
    2d2a:	8b e0       	ldi	r24, 0x0B	; 11
    2d2c:	c8 16       	cp	r12, r24
    2d2e:	d1 04       	cpc	r13, r1
    2d30:	e1 04       	cpc	r14, r1
    2d32:	f1 04       	cpc	r15, r1
    2d34:	28 f0       	brcs	.+10     	; 0x2d40 <ReadInductance+0x22e>
           timeconstant.dw -= 1;
    2d36:	91 e0       	ldi	r25, 0x01	; 1
    2d38:	c9 1a       	sub	r12, r25
    2d3a:	d1 08       	sbc	r13, r1
    2d3c:	e1 08       	sbc	r14, r1
    2d3e:	f1 08       	sbc	r15, r1
        }
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    2d40:	b1 2c       	mov	r11, r1
    2d42:	a1 2c       	mov	r10, r1
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    2d44:	a8 ee       	ldi	r26, 0xE8	; 232
    2d46:	b3 e0       	ldi	r27, 0x03	; 3
    2d48:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <__umulhisi3>
    2d4c:	6b 8b       	std	Y+19, r22	; 0x13
    2d4e:	7c 8b       	std	Y+20, r23	; 0x14
    2d50:	8d 8b       	std	Y+21, r24	; 0x15
    2d52:	9e 8b       	std	Y+22, r25	; 0x16
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    2d54:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <ADCconfig+0x4>
    2d58:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <ADCconfig+0x5>
    2d5c:	98 01       	movw	r18, r16
    2d5e:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <__umulhisi3>
    2d62:	a5 01       	movw	r20, r10
    2d64:	94 01       	movw	r18, r8
    2d66:	fe d7       	rcall	.+4092   	; 0x3d64 <__udivmodsi4>
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    2d68:	44 27       	eor	r20, r20
    2d6a:	55 27       	eor	r21, r21
    2d6c:	6b 89       	ldd	r22, Y+19	; 0x13
    2d6e:	7c 89       	ldd	r23, Y+20	; 0x14
    2d70:	8d 89       	ldd	r24, Y+21	; 0x15
    2d72:	9e 89       	ldd	r25, Y+22	; 0x16
    2d74:	f7 d7       	rcall	.+4078   	; 0x3d64 <__udivmodsi4>
//        per_ref2 = (uint8_t)MEM2_read_byte(&LogTab[per_ref1]);	// -log(1 - per_ref1/100)
        per_ref2 = get_log(per_ref1);		// -1000*log(1 - per_ref1/1000)
    2d76:	c9 01       	movw	r24, r18
    2d78:	0e 94 c5 04 	call	0x98a	; 0x98a <get_log>
    2d7c:	fc 01       	movw	r30, r24
          }
#endif
/* ********************************************************* */
        // inductor_lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    2d7e:	a5 01       	movw	r20, r10
    2d80:	94 01       	movw	r18, r8
    2d82:	c7 01       	movw	r24, r14
    2d84:	b6 01       	movw	r22, r12
    2d86:	bf d7       	rcall	.+3966   	; 0x3d06 <__mulsi3>
    2d88:	4b 01       	movw	r8, r22
    2d8a:	5c 01       	movw	r10, r24
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
    2d8c:	bf 01       	movw	r22, r30
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	80 e0       	ldi	r24, 0x00	; 0
    2d92:	e3 e0       	ldi	r30, 0x03	; 3
    2d94:	66 0f       	add	r22, r22
    2d96:	77 1f       	adc	r23, r23
    2d98:	88 1f       	adc	r24, r24
    2d9a:	99 1f       	adc	r25, r25
    2d9c:	ea 95       	dec	r30
    2d9e:	d1 f7       	brne	.-12     	; 0x2d94 <ReadInductance+0x282>
    2da0:	6b 5f       	subi	r22, 0xFB	; 251
    2da2:	7f 4f       	sbci	r23, 0xFF	; 255
    2da4:	8f 4f       	sbci	r24, 0xFF	; 255
    2da6:	9f 4f       	sbci	r25, 0xFF	; 255
    2da8:	2a e0       	ldi	r18, 0x0A	; 10
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	40 e0       	ldi	r20, 0x00	; 0
    2dae:	50 e0       	ldi	r21, 0x00	; 0
    2db0:	d9 d7       	rcall	.+4018   	; 0x3d64 <__udivmodsi4>
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    2db2:	c5 01       	movw	r24, r10
    2db4:	b4 01       	movw	r22, r8
    2db6:	d6 d7       	rcall	.+4012   	; 0x3d64 <__udivmodsi4>
    2db8:	e9 89       	ldd	r30, Y+17	; 0x11
    2dba:	fa 89       	ldd	r31, Y+18	; 0x12
    2dbc:	ee 0f       	add	r30, r30
    2dbe:	ff 1f       	adc	r31, r31
    2dc0:	ee 0f       	add	r30, r30
    2dc2:	ff 1f       	adc	r31, r31
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	8c 0f       	add	r24, r28
    2dca:	9d 1f       	adc	r25, r29
    2dcc:	e8 0f       	add	r30, r24
    2dce:	f9 1f       	adc	r31, r25
    2dd0:	20 83       	st	Z, r18
    2dd2:	31 83       	std	Z+1, r19	; 0x01
    2dd4:	42 83       	std	Z+2, r20	; 0x02
    2dd6:	53 83       	std	Z+3, r21	; 0x03
        if (((count&0x01) == 0) && (timeconstant.dw > ((F_CPU/1000000UL)+3))) {
    2dd8:	61 10       	cpse	r6, r1
    2dda:	18 c0       	rjmp	.+48     	; 0x2e0c <ReadInductance+0x2fa>
    2ddc:	9c e0       	ldi	r25, 0x0C	; 12
    2dde:	c9 16       	cp	r12, r25
    2de0:	d1 04       	cpc	r13, r1
    2de2:	e1 04       	cpc	r14, r1
    2de4:	f1 04       	cpc	r15, r1
    2de6:	90 f0       	brcs	.+36     	; 0x2e0c <ReadInductance+0x2fa>
    2de8:	73 94       	inc	r7
           // transition is found, measurement with delayed counter start is not necessary
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
    2dea:	e9 89       	ldd	r30, Y+17	; 0x11
    2dec:	fa 89       	ldd	r31, Y+18	; 0x12
    2dee:	31 96       	adiw	r30, 0x01	; 1
    2df0:	ee 0f       	add	r30, r30
    2df2:	ff 1f       	adc	r31, r31
    2df4:	ee 0f       	add	r30, r30
    2df6:	ff 1f       	adc	r31, r31
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	8c 0f       	add	r24, r28
    2dfe:	9d 1f       	adc	r25, r29
    2e00:	e8 0f       	add	r30, r24
    2e02:	f9 1f       	adc	r31, r25
    2e04:	20 83       	st	Z, r18
    2e06:	31 83       	std	Z+1, r19	; 0x01
    2e08:	42 83       	std	Z+2, r20	; 0x02
    2e0a:	53 83       	std	Z+3, r21	; 0x03
           count++;		// skip the delayed measurement
        }
        wdt_reset();
    2e0c:	a8 95       	wdr
     for (count=0;count<4;count++) {
    2e0e:	73 94       	inc	r7
    2e10:	93 e0       	ldi	r25, 0x03	; 3
    2e12:	97 15       	cp	r25, r7
    2e14:	08 f0       	brcs	.+2      	; 0x2e18 <ReadInductance+0x306>
    2e16:	a5 ce       	rjmp	.-694    	; 0x2b62 <ReadInductance+0x50>
     }  //end for count
     ADC_PORT = TXD_VAL;		// switch ADC Port to GND
    2e18:	18 b8       	out	0x08, r1	; 8
     wait_about20ms();
    2e1a:	0e 94 8a 03 	call	0x714	; 0x714 <wait20ms>
     nr_pol1 = 0;
     if (inductance[1] > inductance[0]) { nr_pol1 = 1; } 
    2e1e:	91 e0       	ldi	r25, 0x01	; 1
    2e20:	0d 81       	ldd	r16, Y+5	; 0x05
    2e22:	1e 81       	ldd	r17, Y+6	; 0x06
    2e24:	2f 81       	ldd	r18, Y+7	; 0x07
    2e26:	38 85       	ldd	r19, Y+8	; 0x08
    2e28:	49 81       	ldd	r20, Y+1	; 0x01
    2e2a:	5a 81       	ldd	r21, Y+2	; 0x02
    2e2c:	6b 81       	ldd	r22, Y+3	; 0x03
    2e2e:	7c 81       	ldd	r23, Y+4	; 0x04
    2e30:	40 17       	cp	r20, r16
    2e32:	51 07       	cpc	r21, r17
    2e34:	62 07       	cpc	r22, r18
    2e36:	73 07       	cpc	r23, r19
    2e38:	08 f0       	brcs	.+2      	; 0x2e3c <ReadInductance+0x32a>
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
     nr_pol2 = 2;
     if (inductance[3] > inductance[2]) { nr_pol2 = 3; } 
    2e3c:	0d 85       	ldd	r16, Y+13	; 0x0d
    2e3e:	1e 85       	ldd	r17, Y+14	; 0x0e
    2e40:	2f 85       	ldd	r18, Y+15	; 0x0f
    2e42:	38 89       	ldd	r19, Y+16	; 0x10
    2e44:	49 85       	ldd	r20, Y+9	; 0x09
    2e46:	5a 85       	ldd	r21, Y+10	; 0x0a
    2e48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e4a:	7c 85       	ldd	r23, Y+12	; 0x0c
     nr_pol2 = 2;
    2e4c:	82 e0       	ldi	r24, 0x02	; 2
     if (inductance[3] > inductance[2]) { nr_pol2 = 3; } 
    2e4e:	40 17       	cp	r20, r16
    2e50:	51 07       	cpc	r21, r17
    2e52:	62 07       	cpc	r22, r18
    2e54:	73 07       	cpc	r23, r19
    2e56:	08 f4       	brcc	.+2      	; 0x2e5a <ReadInductance+0x348>
    2e58:	83 e0       	ldi	r24, 0x03	; 3
     if (inductance[nr_pol2] < inductance[nr_pol1]) nr_pol1 = nr_pol2;
    2e5a:	24 e0       	ldi	r18, 0x04	; 4
    2e5c:	82 9f       	mul	r24, r18
    2e5e:	d0 01       	movw	r26, r0
    2e60:	11 24       	eor	r1, r1
    2e62:	21 e0       	ldi	r18, 0x01	; 1
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	2c 0f       	add	r18, r28
    2e68:	3d 1f       	adc	r19, r29
    2e6a:	a2 0f       	add	r26, r18
    2e6c:	b3 1f       	adc	r27, r19
    2e6e:	e9 2f       	mov	r30, r25
    2e70:	f0 e0       	ldi	r31, 0x00	; 0
    2e72:	ee 0f       	add	r30, r30
    2e74:	ff 1f       	adc	r31, r31
    2e76:	ee 0f       	add	r30, r30
    2e78:	ff 1f       	adc	r31, r31
    2e7a:	e2 0f       	add	r30, r18
    2e7c:	f3 1f       	adc	r31, r19
    2e7e:	0d 91       	ld	r16, X+
    2e80:	1d 91       	ld	r17, X+
    2e82:	2d 91       	ld	r18, X+
    2e84:	3c 91       	ld	r19, X
    2e86:	40 81       	ld	r20, Z
    2e88:	51 81       	ldd	r21, Z+1	; 0x01
    2e8a:	62 81       	ldd	r22, Z+2	; 0x02
    2e8c:	73 81       	ldd	r23, Z+3	; 0x03
    2e8e:	04 17       	cp	r16, r20
    2e90:	15 07       	cpc	r17, r21
    2e92:	26 07       	cpc	r18, r22
    2e94:	37 07       	cpc	r19, r23
    2e96:	08 f0       	brcs	.+2      	; 0x2e9a <ReadInductance+0x388>
     nr_pol1 = 0;
    2e98:	89 2f       	mov	r24, r25
     inductor_lx = inductance[nr_pol1];
    2e9a:	34 e0       	ldi	r19, 0x04	; 4
    2e9c:	83 9f       	mul	r24, r19
    2e9e:	f0 01       	movw	r30, r0
    2ea0:	11 24       	eor	r1, r1
    2ea2:	21 e0       	ldi	r18, 0x01	; 1
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	2c 0f       	add	r18, r28
    2ea8:	3d 1f       	adc	r19, r29
    2eaa:	e2 0f       	add	r30, r18
    2eac:	f3 1f       	adc	r31, r19
    2eae:	40 81       	ld	r20, Z
    2eb0:	51 81       	ldd	r21, Z+1	; 0x01
    2eb2:	62 81       	ldd	r22, Z+2	; 0x02
    2eb4:	73 81       	ldd	r23, Z+3	; 0x03
    2eb6:	40 93 09 01 	sts	0x0109, r20	; 0x800109 <inductor_lx>
    2eba:	50 93 0a 01 	sts	0x010A, r21	; 0x80010a <inductor_lx+0x1>
    2ebe:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <inductor_lx+0x2>
    2ec2:	70 93 0c 01 	sts	0x010C, r23	; 0x80010c <inductor_lx+0x3>
     inductor_lpre = -5;	// 10 uH units
     if (((nr_pol1 & 1) == 1) || (resistor >= 240)) {
    2ec6:	80 fd       	sbrc	r24, 0
    2ec8:	3b c0       	rjmp	.+118    	; 0x2f40 <ReadInductance+0x42e>
    2eca:	30 ef       	ldi	r19, 0xF0	; 240
    2ecc:	23 16       	cp	r2, r19
    2ece:	31 04       	cpc	r3, r1
    2ed0:	b8 f5       	brcc	.+110    	; 0x2f40 <ReadInductance+0x42e>
     inductor_lpre = -5;	// 10 uH units
    2ed2:	8b ef       	ldi	r24, 0xFB	; 251
    2ed4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <inductor_lpre>
        // with 680 Ohm resistor total_r is more than 7460
        inductor_lpre = -4;	// 100 uH units
        inductor_lx = (inductor_lx + 5) / 10;
     } 
     if (inductor_lx == 0) inductor_lpre = 0;	//mark as zero
    2ed8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <inductor_lx>
    2edc:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <inductor_lx+0x1>
    2ee0:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <inductor_lx+0x2>
    2ee4:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <inductor_lx+0x3>
    2ee8:	89 2b       	or	r24, r25
    2eea:	8a 2b       	or	r24, r26
    2eec:	8b 2b       	or	r24, r27
    2eee:	11 f4       	brne	.+4      	; 0x2ef4 <ReadInductance+0x3e2>
    2ef0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <inductor_lpre>

  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    2ef4:	17 b8       	out	0x07, r1	; 7
  R_DDR = 0;			// switch all resistor ports to input
#endif
  return;
 } // end ReadInductance()
    2ef6:	14 b8       	out	0x04, r1	; 4
    2ef8:	66 96       	adiw	r28, 0x16	; 22
    2efa:	e2 e1       	ldi	r30, 0x12	; 18
    2efc:	ac c7       	rjmp	.+3928   	; 0x3e56 <__epilogue_restores__>
           rpins.pw = Rnum2pins(res_num);	// compute the two pinnumbers for resistor res_num
    2efe:	84 2d       	mov	r24, r4
    2f00:	0e 94 28 02 	call	0x450	; 0x450 <Rnum2pins>
           rpins.pb[1] = ii;
    2f04:	4c 01       	movw	r8, r24
    2f06:	36 ce       	rjmp	.-916    	; 0x2b74 <ReadInductance+0x62>
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
    2f08:	e4 b9       	out	0x04, r30	; 4
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
    2f0a:	57 b8       	out	0x07, r5	; 7
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
    2f0c:	00 91 10 01 	lds	r16, 0x0110	; 0x800110 <resis680mi>
    2f10:	10 91 11 01 	lds	r17, 0x0111	; 0x800111 <resis680mi+0x1>
    2f14:	57 ce       	rjmp	.-850    	; 0x2bc4 <ReadInductance+0xb2>
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    2f16:	58 b8       	out	0x08, r5	; 8
           wait3us();		// ignore current peak from capacity
    2f18:	0e 94 9e 03 	call	0x73c	; 0x73c <wait3us>
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
    2f1c:	90 e2       	ldi	r25, 0x20	; 32
    2f1e:	96 bb       	out	0x16, r25	; 22
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    2f20:	81 e8       	ldi	r24, 0x81	; 129
    2f22:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
    2f26:	84 ce       	rjmp	.-760    	; 0x2c30 <ReadInductance+0x11e>
    2f28:	c4 01       	movw	r24, r8
    2f2a:	60 eb       	ldi	r22, 0xB0	; 176
    2f2c:	76 e3       	ldi	r23, 0x36	; 54
    2f2e:	06 d7       	rcall	.+3596   	; 0x3d3c <__udivmodhi4>
           cnt_diff += CNT_ZERO_720;
    2f30:	69 5f       	subi	r22, 0xF9	; 249
           tmpint += REF_L_KORR;
    2f32:	28 5d       	subi	r18, 0xD8	; 216
    2f34:	3f 4f       	sbci	r19, 0xFF	; 255
    2f36:	dd ce       	rjmp	.-582    	; 0x2cf2 <ReadInductance+0x1e0>
        else          timeconstant.dw = 0;
    2f38:	c1 2c       	mov	r12, r1
    2f3a:	d1 2c       	mov	r13, r1
    2f3c:	76 01       	movw	r14, r12
    2f3e:	e7 ce       	rjmp	.-562    	; 0x2d0e <ReadInductance+0x1fc>
        inductor_lpre = -4;	// 100 uH units
    2f40:	8c ef       	ldi	r24, 0xFC	; 252
    2f42:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <inductor_lpre>
        inductor_lx = (inductor_lx + 5) / 10;
    2f46:	cb 01       	movw	r24, r22
    2f48:	ba 01       	movw	r22, r20
    2f4a:	6b 5f       	subi	r22, 0xFB	; 251
    2f4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f4e:	8f 4f       	sbci	r24, 0xFF	; 255
    2f50:	9f 4f       	sbci	r25, 0xFF	; 255
    2f52:	2a e0       	ldi	r18, 0x0A	; 10
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	40 e0       	ldi	r20, 0x00	; 0
    2f58:	50 e0       	ldi	r21, 0x00	; 0
    2f5a:	04 d7       	rcall	.+3592   	; 0x3d64 <__udivmodsi4>
    2f5c:	20 93 09 01 	sts	0x0109, r18	; 0x800109 <inductor_lx>
    2f60:	30 93 0a 01 	sts	0x010A, r19	; 0x80010a <inductor_lx+0x1>
    2f64:	40 93 0b 01 	sts	0x010B, r20	; 0x80010b <inductor_lx+0x2>
    2f68:	50 93 0c 01 	sts	0x010C, r21	; 0x80010c <inductor_lx+0x3>
    2f6c:	b5 cf       	rjmp	.-150    	; 0x2ed8 <ReadInductance+0x3c6>

00002f6e <GetESR>:
       	out	_SFR_IO_ADDR(SREG), r0;
	out	_SFR_IO_ADDR(SPL), r28;
#else
 .extern __prologue_saves__
 .extern __epilogue_restores__
	ldi	r26, 30			;
    2f6e:	ae e1       	ldi	r26, 0x1E	; 30
	ldi	r27, 0			;
    2f70:	b0 e0       	ldi	r27, 0x00	; 0
	ldi	r30, lo8(gs(Retur2))	;
    2f72:	ec eb       	ldi	r30, 0xBC	; 188
	ldi	r31, hi8(gs(Retur2))	;
    2f74:	f7 e1       	ldi	r31, 0x17	; 23
	jmp	__prologue_saves__ 	;
    2f76:	53 c7       	rjmp	.+3750   	; 0x3e1e <__prologue_saves__>

00002f78 <Retur2>:

#if TP_MIN > 0
	subi	r22, TP_MIN
	subi	r24, TP_MIN
#endif
	mov	SelectLowPin, r22;
    2f78:	66 2e       	mov	r6, r22
	mov	SelectHighPin, r24;
    2f7a:	b8 2e       	mov	r11, r24
        add	r24, r22;
    2f7c:	86 0f       	add	r24, r22
	std	Y+1, r24;
    2f7e:	89 83       	std	Y+1, r24	; 0x01

	lds	r18, PartFound;		/* if (PartFound == PART_CAPACITOR) { */
    2f80:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <PartFound>
	cpi	r18, PART_CAPACITOR;	
    2f84:	28 30       	cpi	r18, 0x08	; 8
; 	brne	ad_35e4;
	brne	load_max;
    2f86:	51 f5       	brne	.+84     	; 0x2fdc <load_max>
	lds	r18, cap+cval_max;      /* cap_val_nF = cap.cval_max; */
    2f88:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <cap+0x4>
	lds	r19, cap+cval_max+1;
    2f8c:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <cap+0x5>
	lds	r20, cap+cval_max+2;
    2f90:	40 91 6e 01 	lds	r20, 0x016E	; 0x80016e <cap+0x6>
	lds	r21, cap+cval_max+3;
    2f94:	50 91 6f 01 	lds	r21, 0x016F	; 0x80016f <cap+0x7>
        sbrc	r21, 7;			/* negativ bit is set */
    2f98:	57 fd       	sbrc	r21, 7
	rjmp	set_high
    2f9a:	14 c0       	rjmp	.+40     	; 0x2fc4 <set_high>
	lds	r17, cap+cpre_max;      /* prefix = cap.cpre_max; */
    2f9c:	10 91 7b 01 	lds	r17, 0x017B	; 0x80017b <cap+0x13>
	rjmp	ad_35ba;
    2fa0:	08 c0       	rjmp	.+16     	; 0x2fb2 <ad_35ba>

00002fa2 <ad_35ac>:

ad_35ac:
	movw	r24, r20;               /* cval /= 10;          // reduce value by factor ten */
    2fa2:	ca 01       	movw	r24, r20
	movw	r22, r18
    2fa4:	b9 01       	movw	r22, r18
	ldi	r18, 0x0A; 10
    2fa6:	2a e0       	ldi	r18, 0x0A	; 10
	mov	r19, zero_reg
    2fa8:	31 2d       	mov	r19, r1
	mov	r20, zero_reg
    2faa:	41 2d       	mov	r20, r1
	mov	r21, zero_reg
	call	__udivmodsi4;           /* r18:21 = r22:25  / r18:21 */
    2fac:	51 2d       	mov	r21, r1
    2fae:	da d6       	rcall	.+3508   	; 0x3d64 <__udivmodsi4>
	subi	r17, 0xFF;              /* prefix++;            // take next decimal prefix */
    2fb0:	1f 5f       	subi	r17, 0xFF	; 255

00002fb2 <ad_35ba>:

ad_35ba:
	cpi	r17, -9;                /* while (prefix < -9) { // set cval to nF unit */
    2fb2:	17 3f       	cpi	r17, 0xF7	; 247
	brlt	ad_35ac;                /*  } */
    2fb4:	b4 f3       	brlt	.-20     	; 0x2fa2 <ad_35ac>
        brne    load_max;		/* load max value for correction */
    2fb6:	91 f4       	brne	.+36     	; 0x2fdc <load_max>


;	cpi	r18, lo8(900/10);       /* if (cap_val_nF < (900/10)) return(0xffff);   //capacity lower than 90 nF */
;	ldi	r22, hi8(900/10)
	cpi	r18, lo8(200/10);       /* if (cap_val_nF < (200/10)) return(0xffff);   //capacity lower than 20 nF */
    2fb8:	24 31       	cpi	r18, 0x14	; 20
	ldi	r22, hi8(200/10)
    2fba:	60 e0       	ldi	r22, 0x00	; 0
	cpc	r19, r22
    2fbc:	36 07       	cpc	r19, r22
	cpc	r20, zero_reg
    2fbe:	41 05       	cpc	r20, r1
	cpc	r21, zero_reg
    2fc0:	51 05       	cpc	r21, r1
	brcc	ad_35e4
    2fc2:	18 f4       	brcc	.+6      	; 0x2fca <ad_35e4>

00002fc4 <set_high>:
set_high:
	ldi	r24, 0xff;
    2fc4:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, 0xff;
    2fc6:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	ad_exit; 
    2fc8:	36 c1       	rjmp	.+620    	; 0x3236 <ad_exit>

00002fca <ad_35e4>:
ad_35e4:				/* } */
	cpi	r17, -9;		/* if ((pp > -9) || (cap_val_nF > 32000)) { */
    2fca:	17 3f       	cpi	r17, 0xF7	; 247
	brne	load_max;
    2fcc:	39 f4       	brne	.+14     	; 0x2fdc <load_max>
	ldi	r24, lo8(32000);
    2fce:	80 e0       	ldi	r24, 0x00	; 0
	cp	r18, r24
    2fd0:	28 17       	cp	r18, r24
        ldi	r24, hi8(32000);
    2fd2:	8d e7       	ldi	r24, 0x7D	; 125
	cpc	r19, r24;
    2fd4:	38 07       	cpc	r19, r24
;	ldi	r24, hlo8(32000);
;	cpc	r20, r24;
	cpc	r20, r1;
    2fd6:	41 05       	cpc	r20, r1
;	ldi	r24, hhi8(32000);
;	cpc	r21, r24;
	cpc	r20, r1;
    2fd8:	41 05       	cpc	r20, r1
	brcs	store_cvn;
    2fda:	10 f0       	brcs	.+4      	; 0x2fe0 <store_cvn>

00002fdc <load_max>:
load_max:
	ldi	r18, lo8(32000);		/* cap_val_nF = 65000 */
    2fdc:	20 e0       	ldi	r18, 0x00	; 0
	ldi	r19, hi8(32000);
    2fde:	3d e7       	ldi	r19, 0x7D	; 125

00002fe0 <store_cvn>:
;	ldi	r20, hlo8(32000);		/* upper word is allways zero */
;	ldi	r21, hhi8(32000);		/* upper word is allways zero */
store_cvn:
	std	Y+cap_val_nF, r18
    2fe0:	2c 8b       	std	Y+20, r18	; 0x14
	std	Y+cap_val_nF+1, r19
    2fe2:	3d 8b       	std	Y+21, r19	; 0x15
     /* normal ADC-speed, ADC-Clock 8us */
	ldi	r25, (1<<ADEN) | (1<<ADIF) | (1<<ADIE) | AUTO_CLOCK_DIV; /* enable ADC and Interrupt */
	mov	StartADCmsk, r25;
	sts	ADCSRA, StartADCmsk; 	/*  ADCSRA = StartADCmsk;	// enable ADC and Interrupt */
#else
	ldi	r18, (1<<ADSC) | (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; /* enable and start ADC */
    2fe4:	26 ed       	ldi	r18, 0xD6	; 214
	mov	StartADCmsk, r18;
    2fe6:	a2 2e       	mov	r10, r18
#endif

#if (((PIN_RL1 + 1) != PIN_RH1) || ((PIN_RL2 + 1) != PIN_RH2) || ((PIN_RL3 + 1) != PIN_RH3))
	LDIZ	PinRLRHADCtab+6; 	/* LoADC = pgm_read_byte((&PinRLRHADCtab[6])+cap.ca) | TXD_MSK; */
#else
	LDIZ	PinRLRHADCtab+3; 	/* LoADC = pgm_read_byte((&PinRLRHADCtab[3])+cap.ca) | TXD_MSK; */
    2fe8:	e1 e8       	ldi	r30, 0x81	; 129
    2fea:	f0 e0       	ldi	r31, 0x00	; 0
#endif
	add	r30, SelectLowPin;
    2fec:	e6 0d       	add	r30, r6
	adc	r31, zero_reg;
    2fee:	f1 1d       	adc	r31, r1
	lpm	r24, Z+;
    2ff0:	85 91       	lpm	r24, Z+
	ori	r24, TXD_MSK;
    2ff2:	80 60       	ori	r24, 0x00	; 0
	std	Y+LoADC, r24;
    2ff4:	8e 87       	std	Y+14, r24	; 0x0e

#if (((PIN_RL1 + 1) != PIN_RH1) || ((PIN_RL2 + 1) != PIN_RH2) || ((PIN_RL3 + 1) != PIN_RH3))
	LDIZ	PinRLRHADCtab+6; 	/* HiADC = pgm_read_byte((&PinRLRHADCtab[6])+cap.cb) | TXD_MSK; */
#else
	LDIZ	PinRLRHADCtab+3; 	/* HiADC = pgm_read_byte((&PinRLRHADCtab[3])+cap.cb) | TXD_MSK; */
    2ff6:	e1 e8       	ldi	r30, 0x81	; 129
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
#endif
	add	r30, SelectHighPin;
    2ffa:	eb 0d       	add	r30, r11
	adc	r31, zero_reg;
    2ffc:	f1 1d       	adc	r31, r1
	lpm	r24, Z+;
    2ffe:	85 91       	lpm	r24, Z+
	ori	r24, TXD_MSK;
    3000:	80 60       	ori	r24, 0x00	; 0
	std	Y+HiADC, r24;
    3002:	8f 87       	std	Y+15, r24	; 0x0f

	LDIZ	PinRLRHADCtab;	/* LoPinR_L = pgm_read_byte(&PinRLRHADCtab[cap.ca]);  //R_L mask for LowPin R_L load */
    3004:	ee e7       	ldi	r30, 0x7E	; 126
    3006:	f0 e0       	ldi	r31, 0x00	; 0
	add	r30, SelectLowPin;
    3008:	e6 0d       	add	r30, r6
	adc	r31, zero_reg;
    300a:	f1 1d       	adc	r31, r1
	lpm	LoPinR_L, Z+;
    300c:	75 90       	lpm	r7, Z+

	LDIZ	PinRLRHADCtab;	/* HiPinR_L = pgm_read_byte(&PinRLRHADCtab[cap.cb]);	//R_L mask for HighPin R_L load */
    300e:	ee e7       	ldi	r30, 0x7E	; 126
    3010:	f0 e0       	ldi	r31, 0x00	; 0
	add	r30, SelectHighPin;
    3012:	eb 0d       	add	r30, r11
	adc	r31, zero_reg;
    3014:	f1 1d       	adc	r31, r1
	lpm	HiPinR_L, Z+;
    3016:	c5 90       	lpm	r12, Z+
	or	SelectLowPin, r25;
	//  SelectHighPin = (cap.cb | (1<<REFS1) | (0<<REFS0));	// switch ADC to HighPin, Internal Ref. 
	or	SelectHighPin, r25;
#else
	//  SelectLowPin = (cap.ca | (1<<REFS1) | (1<<REFS0));	// switch ADC to LowPin, Internal Ref. 
	ldi	r25, (1<<REFS1)|(1<<REFS0);	0xC0
    3018:	90 ec       	ldi	r25, 0xC0	; 192
	or	SelectLowPin, r25;
    301a:	69 2a       	or	r6, r25
	//  SelectHighPin = (cap.cb | (1<<REFS1) | (1<<REFS0));	// switch ADC to HighPin, Internal Ref. 
	or	SelectHighPin, r25;
    301c:	b9 2a       	or	r11, r25
#endif


	// Measurement of ESR of capacitors AC Mode
	ldi	r24, 0x01; 	/* sumvolt0 = 1;	// set sum of LowPin voltage to 1 to prevent divide by zero */
    301e:	81 e0       	ldi	r24, 0x01	; 1
	mov	r14, r24;
    3020:	e8 2e       	mov	r14, r24
	mov	r15, zero_reg;
    3022:	f1 2c       	mov	r15, r1
	mov	r16, zero_reg;
    3024:	01 2d       	mov	r16, r1
	mov	r17, zero_reg;
    3026:	11 2d       	mov	r17, r1
	std	Y+sumvolt1, r24;	/* sumvolt1 = 1;	// clear sum of HighPin voltage with current */
    3028:	8e 83       	std	Y+6, r24	; 0x06
	//                                // offset is about (x*10*200)/34000 in 0.01 Ohm units
	std	Y+sumvolt1+1, zero_reg;
    302a:	1f 82       	std	Y+7, r1	; 0x07
	std	Y+sumvolt1+2, zero_reg;
    302c:	18 86       	std	Y+8, r1	; 0x08
	std	Y+sumvolt1+3, zero_reg;
    302e:	19 86       	std	Y+9, r1	; 0x09
	std	Y+sumvolt2, zero_reg;	/* sumvolt2 = 0;	// clear sum of HighPin voltage without current */
    3030:	1a 86       	std	Y+10, r1	; 0x0a
	std	Y+sumvolt2+1, zero_reg;
    3032:	1b 86       	std	Y+11, r1	; 0x0b
	std	Y+sumvolt2+2, zero_reg;
    3034:	1c 86       	std	Y+12, r1	; 0x0c
	std	Y+sumvolt2+3, zero_reg;
    3036:	1d 86       	std	Y+13, r1	; 0x0d
	std	Y+LowUpCount, zero_reg;
    3038:	18 8e       	std	Y+24, r1	; 0x18
	std	Y+HighUpCount, zero_reg;
    303a:	19 8e       	std	Y+25, r1	; 0x19
	std	Y+HighTooHigh, zero_reg;
	std	Y+LowTooHigh, zero_reg;
    303c:	1b 8e       	std	Y+27, r1	; 0x1b
	call	EntladePins;	/* EntladePins();	// discharge capacitor */
    303e:	1a 8e       	std	Y+26, r1	; 0x1a
    3040:	5c d8       	rcall	.-3912   	; 0x20fa <EntladePins>
	ldi	r24, TXD_VAL;
    3042:	80 e0       	ldi	r24, 0x00	; 0
	AOUT	ADC_PORT, r24; /* ADC_PORT = TXD_VAL;	// switch ADC-Port to GND */
    3044:	88 b9       	out	0x08, r24	; 8
	sts	ADMUX, SelectLowPin;	/* ADMUX = SelectLowPin;	// set Mux input and Voltage Reference to internal 1.1V */
    3046:	60 92 7c 00 	sts	0x007C, r6	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
#ifdef NO_AREF_CAP
	call	wait100us;			/* time for voltage stabilization */
    304a:	0e 94 96 03 	call	0x72c	; 0x72c <wait100us>
#else
	call	wait10ms;    		/* time for voltage stabilization with 100nF */
#endif
	/* start voltage should be negativ */
	ldd	r19, Y+HiADC;		/* ADC_DDR = HiADC;	// switch High Pin to GND */
    304e:	3f 85       	ldd	r19, Y+15	; 0x0f
	AOUT	ADC_DDR, r19;		/* switch High Pin to GND */
    3050:	37 b9       	out	0x07, r19	; 7
	AOUT	R_PORT, LoPinR_L	/* r7 */
    3052:	75 b8       	out	0x05, r7	; 5
	AOUT	R_DDR, LoPinR_L		/* r7 */
    3054:	74 b8       	out	0x04, r7	; 4
	ldi	r21, (HALF_PULSE_LENGTH_TICS/3)
    3056:	52 e0       	ldi	r21, 0x02	; 2

00003058 <plop1>:
plop1:
	dec	r21
    3058:	5a 95       	dec	r21
	brne	plop1
    305a:	f1 f7       	brne	.-4      	; 0x3058 <plop1>
#if (HALF_PULSE_LENGTH_TICS % 3) > 1
	nop
    305c:	00 00       	nop
#endif
#if (HALF_PULSE_LENGTH_TICS % 3) > 0
	nop
    305e:	00 00       	nop
#endif
	AOUT	R_DDR, zero_reg;	/* R_DDR = 0 */
    3060:	14 b8       	out	0x04, r1	; 4
	AOUT	R_PORT, zero_reg;	/* R_PORT = 0 */
    3062:	15 b8       	out	0x05, r1	; 5

	   // Measurement frequency is given by sum of ADC-Reads < 1116 Hz for normal ADC speed.
	   // ADC Sample and Hold (SH) is done 1.5 ADC clock number after real start of conversion.
	   // Real ADC-conversion is started with the next ADC-Clock (125kHz) after setting the ADSC bit.
	eor	r13, r13;			/* for(ii=0;ii<MAX_CNT;ii++) { */
    3064:	dd 24       	eor	r13, r13

00003066 <esr_loop>:
						// That will cause too high voltage without current.
	//         adcv[0] = ADCW;		// Voltage LowPin with current
	//         ADMUX = SelectHighPin;
	      /* ********* Forward direction, connect Low side with GND *********** */
esr_loop:
	ldd	r19, Y+LoADC;
    3066:	3e 85       	ldd	r19, Y+14	; 0x0e
	AOUT	ADC_DDR, r19;		/* ADC_DDR = LoADC;	// switch Low-Pin to output (GND) */
    3068:	37 b9       	out	0x07, r19	; 7
	AOUT	R_PORT, LoPinR_L;	/* R_PORT = LoPinR_L (r7) */
    306a:	75 b8       	out	0x05, r7	; 5
	AOUT	R_DDR, LoPinR_L;	/* R_DDR = LoPinR_L (r7) */
    306c:	74 b8       	out	0x04, r7	; 4
	sts	ADMUX, SelectLowPin;		/* ADMUX = SelectLowPin; */
    306e:	60 92 7c 00 	sts	0x007C, r6	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

	wdr	;				/* wdt_reset(); */
    3072:	a8 95       	wdr
;=#=	StartADCwait			/* start ADC and wait */
	StartADCwait			/* start ADC and wait */
    3074:	a0 92 7a 00 	sts	0x007A, r10	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3078:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    307c:	86 fd       	sbrc	r24, 6
    307e:	fc cf       	rjmp	.-8      	; 0x3078 <esr_loop+0x12>
	lds	adcv0L, ADCW;			/* adcv[0] = ADCW;	// Voltage LowPin reference */
    3080:	20 90 78 00 	lds	r2, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	lds	adcv0H, ADCW+1;
    3084:	30 90 79 00 	lds	r3, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	sts	ADMUX, SelectHighPin;		/* ADMUX = SelectHighPin; */
    3088:	b0 92 7c 00 	sts	0x007C, r11	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

	mov	r20, HiPinR_L
    308c:	4c 2d       	mov	r20, r12
	rcall	strtADC_pulse		; start ADC, generate pulse and wait 
    308e:	d6 d0       	rcall	.+428    	; 0x323c <strtADC_pulse>

	lds	r18, ADCW;		/* adcv[1] = ADCW;	// Voltage HighPin with current */
    3090:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	lds	r19, ADCW+1;
    3094:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	sts	ADCSRA, StartADCmsk; 	/*  ADCSRA = StartADCmsk;	// enable ADC and Interrupt */
#endif

;=======

	std	Y+adcvv1, r18;
    3098:	28 8b       	std	Y+16, r18	; 0x10
	std	Y+adcvv1+1, r19;
    309a:	39 8b       	std	Y+17, r19	; 0x11

	      /* ********* Reverse direction, connect High side with GND *********** */
	ldd	r19, Y+HiADC;		/* ADC_DDR = HiADC;	// switch High Pin to GND */
    309c:	3f 85       	ldd	r19, Y+15	; 0x0f
	AOUT	ADC_DDR, r19;		/* ADC_DDR = HiADC;	// switch High-Pin to output (GND) */
    309e:	37 b9       	out	0x07, r19	; 7
	AOUT	R_PORT, HiPinR_L;	/* R_PORT = HiPinR_L (r12);	// switch R-Port to VCC */
    30a0:	c5 b8       	out	0x05, r12	; 5
	AOUT	R_DDR, HiPinR_L;	/* R_DDR = HiPinR_L (r12);	// switch R_L port for HighPin to output (VCC) */
    30a2:	c4 b8       	out	0x04, r12	; 4

	wdr	;			/* wdt_reset(); */
    30a4:	a8 95       	wdr
	sts	ADMUX, SelectHighPin;	/* ADMUX = SelectHighPin; */
    30a6:	b0 92 7c 00 	sts	0x007C, r11	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

;=#=	StartADCwait		/* start ADC and wait */
	StartADCwait		/* start ADC and wait */
    30aa:	a0 92 7a 00 	sts	0x007A, r10	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    30ae:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    30b2:	86 fd       	sbrc	r24, 6
    30b4:	fc cf       	rjmp	.-8      	; 0x30ae <esr_loop+0x48>

	lds	r22, ADCW;         	/* adcv[2] = ADCW;	// Reverse Reference Voltage HighPin  */
    30b6:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	lds	r23, ADCW+1;
    30ba:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	sts	ADMUX, SelectLowPin;	/*  ADMUX = SelectLowPin; */
    30be:	60 92 7c 00 	sts	0x007C, r6	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// ****** Polling mode big cap
	mov	r20, LoPinR_L
    30c2:	47 2d       	mov	r20, r7
	rcall	strtADC_pulse		; start ADC, generate pulse and wait 
    30c4:	bb d0       	rcall	.+374    	; 0x323c <strtADC_pulse>

	lds	r20, ADCW;		/* adcv[3] = ADCW;	//  Voltage LowPin with current */
    30c6:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	lds	r21, ADCW+1;
    30ca:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
#ifdef ADC_Sleep_Mode
	sts	ADCSRA, StartADCmsk; 	/*  ADCSRA = StartADCmsk;	// enable ADC and Interrupt */
#endif

	AOUT	R_DDR, zero_reg; 	/* R_DDR = 0; // switch current off */
    30ce:	14 b8       	out	0x04, r1	; 4

	movw	r24, r22;		/*  adcv[2] */
    30d0:	cb 01       	movw	r24, r22
	add	r24, adcv0L;		/* adcv[0] + adcv[2] // add sum of both LowPin voltages with current */
    30d2:	82 0d       	add	r24, r2
	adc	r25, adcv0H;
    30d4:	93 1d       	adc	r25, r3

	add	r14, r24;		/* r14:17 = sumvolt0 += (adcv[0] + adcv[2]); */
    30d6:	e8 0e       	add	r14, r24
	adc	r15, r25;
    30d8:	f9 1e       	adc	r15, r25
	adc	r16, zero_reg;
    30da:	01 1d       	adc	r16, r1
	adc	r17, zero_reg;
    30dc:	11 1d       	adc	r17, r1
	std	Y+sumvolt0, r14;
    30de:	ea 82       	std	Y+2, r14	; 0x02
	std	Y+sumvolt0+1, r15;
    30e0:	fb 82       	std	Y+3, r15	; 0x03
	std	Y+sumvolt0+2, r16;
    30e2:	0c 83       	std	Y+4, r16	; 0x04
	std	Y+sumvolt0+3, r17;
    30e4:	1d 83       	std	Y+5, r17	; 0x05
	ldd	r24, Y+adcvv1;		/* add HighPin voltages with current */
    30e6:	88 89       	ldd	r24, Y+16	; 0x10
	ldd	r25, Y+adcvv1+1; 
    30e8:	99 89       	ldd	r25, Y+17	; 0x11
	add	r24, r20;		/* adcv[1] + adcv[3] */
    30ea:	84 0f       	add	r24, r20
	adc	r25, r21;
    30ec:	95 1f       	adc	r25, r21
	ldd	r18, Y+sumvolt1;	/* sumvolt1 += (adcv[1] + adcv[3]); */
    30ee:	2e 81       	ldd	r18, Y+6	; 0x06
	ldd	r19, Y+sumvolt1+1;
    30f0:	3f 81       	ldd	r19, Y+7	; 0x07
	ldd	r22, Y+sumvolt1+2;
    30f2:	68 85       	ldd	r22, Y+8	; 0x08
	ldd	r23, Y+sumvolt1+3;
    30f4:	79 85       	ldd	r23, Y+9	; 0x09
	add	r18, r24;
    30f6:	28 0f       	add	r18, r24
	adc	r19, r25;
    30f8:	39 1f       	adc	r19, r25
	adc	r22, zero_reg;
    30fa:	61 1d       	adc	r22, r1
	adc	r23, zero_reg;
    30fc:	71 1d       	adc	r23, r1
	std	Y+sumvolt1, r18;
    30fe:	2e 83       	std	Y+6, r18	; 0x06
	std	Y+sumvolt1+1, r19;
    3100:	3f 83       	std	Y+7, r19	; 0x07
	std	Y+sumvolt1+2, r22;
    3102:	68 87       	std	Y+8, r22	; 0x08
	std	Y+sumvolt1+3, r23;
    3104:	79 87       	std	Y+9, r23	; 0x09

/*===================================================================================================*/
/*      Range Check for voltages  */
  	/* Y+adcvv1 is still the voltage of forward direction, r20:21 the voltage of reverse direction */
	ldi	r18, lo8(50);
    3106:	22 e3       	ldi	r18, 0x32	; 50
	cp	r18, r20;
    3108:	24 17       	cp	r18, r20
	cpc	zero_reg, r21;
    310a:	15 06       	cpc	r1, r21
	brcs	is_ok1;		/* r20:21 >= 50 */
    310c:	50 f0       	brcs	.+20     	; 0x3122 <is_ok1>
	AOUT	R_PORT, LoPinR_L;	/* R_PORT = LoPinR_L (r7);  */
    310e:	75 b8       	out	0x05, r7	; 5
	AOUT	R_DDR, LoPinR_L;	/* R_DDR = LoPinR_L (r7);	// switch LowPin with 680 Ohm to VCC */
    3110:	74 b8       	out	0x04, r7	; 4
	call	wait1us;			/* additional charge the capacitor */
    3112:	0e 94 a0 03 	call	0x740	; 0x740 <wait1us>
	AOUT	R_DDR, zero_reg; 	// switch current off
    3116:	14 b8       	out	0x04, r1	; 4
	AOUT	R_PORT, zero_reg; 
    3118:	15 b8       	out	0x05, r1	; 5
	ldd	r24, Y+LowUpCount; 	/* count additional load pulses at Low side */
    311a:	88 8d       	ldd	r24, Y+24	; 0x18
	inc	r24;
    311c:	83 95       	inc	r24
	std	Y+LowUpCount, r24;
    311e:	88 8f       	std	Y+24, r24	; 0x18
	rjmp	is_ok1b;
    3120:	07 c0       	rjmp	.+14     	; 0x3130 <is_ok1b>

00003122 <is_ok1>:
is_ok1:
	cpi	r20, lo8(1000);
    3122:	48 3e       	cpi	r20, 0xE8	; 232
        ldi	r23, hi8(1000);
    3124:	73 e0       	ldi	r23, 0x03	; 3
	cpc	r21, r23;
    3126:	57 07       	cpc	r21, r23
        brcs	is_ok1b;			/* voltage reverse direction < 1000 */
    3128:	18 f0       	brcs	.+6      	; 0x3130 <is_ok1b>
	ldd	r24, Y+LowTooHigh; 	/* count  pulses with too high voltage at Low side */
    312a:	8a 8d       	ldd	r24, Y+26	; 0x1a
	inc	r24;
    312c:	83 95       	inc	r24
	std	Y+LowTooHigh, r24;
    312e:	8a 8f       	std	Y+26, r24	; 0x1a

00003130 <is_ok1b>:
is_ok1b:
	ldd	r24, Y+adcvv1;
    3130:	88 89       	ldd	r24, Y+16	; 0x10
	ldd	r25, Y+adcvv1+1;
    3132:	99 89       	ldd	r25, Y+17	; 0x11
	cp	r18, r24;
    3134:	28 17       	cp	r18, r24
	cpc	zero_reg, r25;	/* adcvv1 >= 50 */
    3136:	19 06       	cpc	r1, r25
	brcs	is_ok2;
    3138:	60 f0       	brcs	.+24     	; 0x3152 <is_ok2>
	ldd	r19, Y+LoADC;
    313a:	3e 85       	ldd	r19, Y+14	; 0x0e
	AOUT	ADC_DDR, r19;		/* ADC_DDR = LoADC;	// switch Low-Pin to output (GND) */
    313c:	37 b9       	out	0x07, r19	; 7
	AOUT	R_PORT, HiPinR_L;	/* R_PORT = HiPinR_L (r12);	// switch R-Port to VCC */
    313e:	c5 b8       	out	0x05, r12	; 5
	AOUT	R_DDR, HiPinR_L;	/* R_DDR = HiPinR_L (r12);	// switch R_L port for HighPin to output (VCC) */
    3140:	c4 b8       	out	0x04, r12	; 4
	call	wait1us;			/* additional charge the capacitor */
    3142:	0e 94 a0 03 	call	0x740	; 0x740 <wait1us>
;##	DelayBigCap;			/* wait the time defined by macro */
	AOUT	R_DDR, zero_reg;	/* R_DDR = 0; // switch current off,  SH is 1.5 ADC clock behind real start */
    3146:	14 b8       	out	0x04, r1	; 4
	AOUT	R_PORT, zero_reg;	/* R_PORT = 0; */
    3148:	15 b8       	out	0x05, r1	; 5
	ldd	r24, Y+HighUpCount;	/* count additional load pulses at High side */
    314a:	89 8d       	ldd	r24, Y+25	; 0x19
	inc	r24;
    314c:	83 95       	inc	r24
	std	Y+HighUpCount, r24;
    314e:	89 8f       	std	Y+25, r24	; 0x19
	rjmp	is_ok2b;
    3150:	07 c0       	rjmp	.+14     	; 0x3160 <is_ok2b>

00003152 <is_ok2>:
is_ok2:
	cpi	r24, lo8(1000);
    3152:	88 3e       	cpi	r24, 0xE8	; 232
        ldi	r23, hi8(1000);
    3154:	73 e0       	ldi	r23, 0x03	; 3
	cpc	r25, r23;
    3156:	97 07       	cpc	r25, r23
        brcs	is_ok2b;			/* voltage forward direction < 1000 */
    3158:	18 f0       	brcs	.+6      	; 0x3160 <is_ok2b>
	ldd	r24, Y+HighTooHigh; 	/* count  pulses with too high voltage at High side */
    315a:	8b 8d       	ldd	r24, Y+27	; 0x1b
	inc	r24;
    315c:	83 95       	inc	r24
	std	Y+HighTooHigh, r24;
    315e:	8b 8f       	std	Y+27, r24	; 0x1b

00003160 <is_ok2b>:
is_ok2b:
/*===================================================================================================*/
	inc	r13;			/* for(    ;ii<MAX_CNT;ii++)  */
    3160:	d3 94       	inc	r13
	mov	r21, r13;
    3162:	5d 2d       	mov	r21, r13
	cpi	r21, MAX_CNT;
    3164:	5f 3f       	cpi	r21, 0xFF	; 255
	breq	ad_38ac;
    3166:	09 f0       	breq	.+2      	; 0x316a <ad_38ac>
	add	r21, r21	; quick and dirty: usually is double LoPinR_H
	add	LoPinR_L, r21
 #endif
jesr_loop:
#endif
	rjmp	esr_loop;		/* } // end for */
    3168:	7e cf       	rjmp	.-260    	; 0x3066 <esr_loop>

0000316a <ad_38ac>:

#if RRpinMI == PIN_RM
	ldi	r18, lo8(PIN_RM*10);
	ldi	r19, hi8(PIN_RM*10);
#else
	lds	r4, RRpinMI;		/*  pin_rmi */
    316a:	40 90 34 01 	lds	r4, 0x0134	; 0x800134 <pin_rmi>
	lds	r5, RRpinMI+1;
    316e:	50 90 35 01 	lds	r5, 0x0135	; 0x800135 <pin_rmi+0x1>
	add	r4, r4;		RRpinMI*2
    3172:	44 0c       	add	r4, r4
	adc	r5, r5;
    3174:	55 1c       	adc	r5, r5
	movw	r18, r4;
    3176:	92 01       	movw	r18, r4
	ldi	r30, 4;
    3178:	e4 e0       	ldi	r30, 0x04	; 4

0000317a <ad_2r>:
ad_2r:
	add	r18, r4;		+ 4*(2*RRpinMI)
    317a:	24 0d       	add	r18, r4
	adc	r19, r5;
    317c:	35 1d       	adc	r19, r5
	dec	r30;
    317e:	ea 95       	dec	r30
	brne	ad_2r;			add next (2*RRpinMI)
    3180:	e1 f7       	brne	.-8      	; 0x317a <ad_2r>
#endif
	movw	r4, r18;		/* r4:5 = 10 * RRpinMI */
    3182:	29 01       	movw	r4, r18
	movw	r10, r14;		/* r10:13 = r14:17 = sumvolt0 */
    3184:	57 01       	movw	r10, r14
	movw	r12, r16;
    3186:	68 01       	movw	r12, r16

	ldd	r6, Y+sumvolt1;
    3188:	6e 80       	ldd	r6, Y+6	; 0x06
	ldd	r7, Y+sumvolt1+1;
    318a:	7f 80       	ldd	r7, Y+7	; 0x07
	ldd	r8, Y+sumvolt1+2;
    318c:	88 84       	ldd	r8, Y+8	; 0x08
	ldd	r9, Y+sumvolt1+3;
    318e:	99 84       	ldd	r9, Y+9	; 0x09
/* ############################################################ */
	lds	r18, PartFound;		/* if (PartFound == PART_CAPACITOR) { */
    3190:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <PartFound>
	cpi	r18, PART_CAPACITOR;	
    3194:	28 30       	cpi	r18, 0x08	; 8
 	brne	no_sub;			/* it is not a capacitor */
    3196:	b1 f4       	brne	.+44     	; 0x31c4 <no_sub>
/* Aproximation of 5000*(1 - exp(13.5e-6/(cap_val_nF*1.e-9*(0.1*(PIN_RM+PIN_RP+R_L_VAL)))) - 2500*(1 - exp(-27e-6/(cap_val_nF*1.e-9*(0.1*(PIN_RM+PIN_RP+R_L_VAL))))) */
/*  is done by ((6744116/(PIN_RM+PIN_RP+R_L_VAL))*(6744116/(PIN_RM+PIN_RP+R_L_VAL))) / (cap_val_nF * (cap_val_nF + (137180/(PIN_RM+PIN_RP+R_L_VAL)))) */
/*  is done by 872520 / (cap_val_nF * (cap_val_nF + 19)) */
; #define FAKTOR_ESR (9537620/(PIN_RM+PIN_RP+R_L_VAL))

	ldd	r22, Y+cap_val_nF;	/* sumvolt1 -= (1745098UL*MAX_CNT) / (cap_val_nF * (cap_val_nF + 19)); */
    3198:	6c 89       	ldd	r22, Y+20	; 0x14
	ldd	r23, Y+cap_val_nF+1;
    319a:	7d 89       	ldd	r23, Y+21	; 0x15
;	ldd	r24, Y+cap_val_nF+2;
	mov	r24, r1			/* upper bits of cap_val_nF are allway zero */
    319c:	81 2d       	mov	r24, r1
;	ldd	r25, Y+cap_val_nF+3;
	mov	r25, r1			/* upper bits of cap_val_nF are allway zero */
    319e:	91 2d       	mov	r25, r1
;#define FAKTOR_ESR (780000/(PIN_RM+PIN_RP+R_L_VAL))	/* 127 */
 #else
;#define FAKTOR_ESR (920000/(PIN_RM+PIN_RP+R_L_VAL))	/* 127 */
;#define CAP_OFFSET (433200/(PIN_RM+PIN_RP+R_L_VAL))	/* 60 nF */
 #endif
      	subi	r22, lo8(CAP_OFFSET); 0xED; 237
    31a0:	65 50       	subi	r22, 0x05	; 5
      	sbci	r23, hi8(CAP_OFFSET); 0xFF; 255
    31a2:	70 40       	sbci	r23, 0x00	; 0
      	sbci	r24, hlo8(CAP_OFFSET); 0xFF; 255
    31a4:	80 40       	sbci	r24, 0x00	; 0
      	sbci	r25, hhi8(CAP_OFFSET); 0xFF; 255
    31a6:	90 40       	sbci	r25, 0x00	; 0
	movw	r18, r22;		/* r18:21 = r22:25 = (cap_val_nF-60); */
	movw	r20, r24;
    31a8:	9b 01       	movw	r18, r22
	call	__mulsi3;		/* (cap_val_nF - 60) * (cap_val_nF - 60) */
    31aa:	ac 01       	movw	r20, r24
    31ac:	ac d5       	rcall	.+2904   	; 0x3d06 <__mulsi3>

       	movw	r18, r22;
    31ae:	9b 01       	movw	r18, r22
       	movw	r20, r24;
    31b0:	ac 01       	movw	r20, r24
       	ldi	r22, lo8(FAKTOR_ESR*FAKTOR_ESR*MAX_CNT); 0x36; 54
    31b2:	60 e7       	ldi	r22, 0x70	; 112
       	ldi	r23, hi8(FAKTOR_ESR*FAKTOR_ESR*MAX_CNT); 0x29; 41
       	ldi	r24, hlo8(FAKTOR_ESR*FAKTOR_ESR*MAX_CNT); 0x86; 134
    31b4:	79 e7       	ldi	r23, 0x79	; 121
       	ldi	r25, hhi8(FAKTOR_ESR*FAKTOR_ESR*MAX_CNT); 0x1A; 26
    31b6:	86 e1       	ldi	r24, 0x16	; 22
	call	__udivmodsi4;
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	d4 d5       	rcall	.+2984   	; 0x3d64 <__udivmodsi4>
	sub	r6, r18
    31bc:	62 1a       	sub	r6, r18
	sbc	r7, r19
    31be:	73 0a       	sbc	r7, r19
	sbc	r8, r20
    31c0:	84 0a       	sbc	r8, r20
	sbc	r9, r21
    31c2:	95 0a       	sbc	r9, r21

000031c4 <no_sub>:
no_sub:				/* } */
/* ############################################################ */

	cp	r10, r6;		/* if (sumvolt1 > sumvolt0) {  */
    31c4:	a6 14       	cp	r10, r6
	cpc	r11, r7;
    31c6:	b7 04       	cpc	r11, r7
	cpc	r12, r8;
    31c8:	c8 04       	cpc	r12, r8
	cpc	r13, r9;
    31ca:	d9 04       	cpc	r13, r9
	brcc	ad_396c;
    31cc:	28 f4       	brcc	.+10     	; 0x31d8 <ad_396c>
	sub	r6, r10;		/* sumvolt1 -= sumvolt0;	// difference HighPin - LowPin Voltage with current */
    31ce:	6a 18       	sub	r6, r10
	sbc	r7, r11;
    31d0:	7b 08       	sbc	r7, r11
	sbc	r8, r12;
    31d2:	8c 08       	sbc	r8, r12
	sbc	r9, r13;
    31d4:	9d 08       	sbc	r9, r13
	rjmp	ad_3972;		/* } else { */
    31d6:	03 c0       	rjmp	.+6      	; 0x31de <ad_3972>

000031d8 <ad_396c>:
ad_396c:
	eor	r6, r6;			/* sumvolt1 = 0; */
    31d8:	66 24       	eor	r6, r6
	eor	r7, r7
    31da:	77 24       	eor	r7, r7
	movw	r8, r6
    31dc:	43 01       	movw	r8, r6

000031de <ad_3972>:
	ldi	r20, '#';
	ldi	r18, 4	;
	call	DisplayValue16;
	call	wait2s
#endif
	movw	r22, r4
    31de:	b2 01       	movw	r22, r4
	ldi	r24, 0x00;
	ldi	r25, 0x00;	/*  r22:25 = 10 * (unsigned long)RRpinMI)  */
    31e0:	80 e0       	ldi	r24, 0x00	; 0
	      // mean voltage at the capacitor is higher with current
	      // sumvolt0 is the sum of voltages at LowPin, caused by output resistance of Port
	      // RRpinMI is the port output resistance in 0.1 Ohm units.
	      // we scale up the difference voltage with 10 to get 0.01 Ohm units of ESR
		/* esrvalue = (sumvolt1 * 10 * (unsigned long)RRpinMI) / sumvolt0; */
	movw	r18, r6;		/* r18:21 = r6:9 = sumvolt1 */
    31e2:	90 e0       	ldi	r25, 0x00	; 0
	movw	r20, r8;
	call	__mulsi3;		/* r22:25 = r22:25 * r18:21 */
    31e4:	93 01       	movw	r18, r6
    31e6:	a4 01       	movw	r20, r8
	movw	r18, r10;	/* r18:21 = r10:13 = sumvolt0 */
    31e8:	8e d5       	rcall	.+2844   	; 0x3d06 <__mulsi3>
	movw	r20, r12;
    31ea:	95 01       	movw	r18, r10
	call	__udivmodsi4;		/* r18:21 = r22:25  / r18:21 */
    31ec:	a6 01       	movw	r20, r12
	ldi	r24, lo8(EE_ESR_ZEROtab);	/* esr0 = (int8_t)eeprom_read_byte(&EE_ESR_ZEROtab[lopin+hipin]); */
    31ee:	ba d5       	rcall	.+2932   	; 0x3d64 <__udivmodsi4>
	ldi	r25, hi8(EE_ESR_ZEROtab);
    31f0:	88 ec       	ldi	r24, 0xC8	; 200
        ldd	r23, Y+1;
    31f2:	91 e0       	ldi	r25, 0x01	; 1
        add	r24, r23;
    31f4:	79 81       	ldd	r23, Y+1	; 0x01
	adc	r25, zero_reg;
	call	eeprom_read_byte;
    31f6:	87 0f       	add	r24, r23
    31f8:	91 1d       	adc	r25, r1
	mov	r6, r24;
    31fa:	7b d6       	rcall	.+3318   	; 0x3ef2 <eeprom_read_byte>
	movw	r24,r18;	/* r24:25 = r18:19 = esrvalue */
    31fc:	68 2e       	mov	r6, r24
	ldi	r22, 16;
    31fe:	c9 01       	movw	r24, r18
	ldi	r23, 0;
    3200:	60 e1       	ldi	r22, 0x10	; 16
	call	__udivmodhi4	/* r22:23 = r24:25 / r22:23 */
    3202:	70 e0       	ldi	r23, 0x00	; 0
    3204:	9b d5       	rcall	.+2870   	; 0x3d3c <__udivmodhi4>
	add	r18, r22;	/* esrvalue += esrvalue / 16; */
    3206:	26 0f       	add	r18, r22
	adc	r19, r23;
    3208:	37 1f       	adc	r19, r23
	movw	r24,r18;	/* esrvalue */
    320a:	c9 01       	movw	r24, r18
	cp	r6, r24;		/* if (esrvalue > esr0) esrvalue -= esr0; */
    320c:	68 16       	cp	r6, r24
	cpc	zero_reg, r25;
    320e:	19 06       	cpc	r1, r25
	brcc	esr_too_less;
    3210:	18 f4       	brcc	.+6      	; 0x3218 <esr_too_less>
	sub	r24, r6;		/* - esr0 */ 
    3212:	86 19       	sub	r24, r6
	sbc	r25, zero_reg;
    3214:	91 09       	sbc	r25, r1
	rjmp	ad_exit;
    3216:	0f c0       	rjmp	.+30     	; 0x3236 <ad_exit>

00003218 <esr_too_less>:
esr_too_less:
#ifdef AUTO_CAL
        subi	r24, lo8(-R_LIMIT_TO_UNCALIBRATED);		/* + 0.20 Ohm */
    3218:	8c 5e       	subi	r24, 0xEC	; 236
        sbci	r25, hi8(-R_LIMIT_TO_UNCALIBRATED);		/* esrvalue + 20 */
    321a:	9f 4f       	sbci	r25, 0xFF	; 255
	cp	r24, r6;		/* if ((esrvalue+20) < esr0) ; */
    321c:	86 15       	cp	r24, r6
	cpc	r25, zero_reg;
    321e:	91 05       	cpc	r25, r1
	brcc	esr_too_less2;
    3220:	40 f4       	brcc	.+16     	; 0x3232 <esr_too_less2>
	ldd	r24, Y+cap_val_nF;	/* mark only, if cap_val_nF > 4500 */
    3222:	8c 89       	ldd	r24, Y+20	; 0x14
	ldd     r25, Y+cap_val_nF+1;
    3224:	9d 89       	ldd	r25, Y+21	; 0x15
;	ldd	r26, Y+cap_val_nF+2;	/* the upper bits (cap_val_nF+2|3) are always zero */ 
	cpi	r24, lo8(4500);
    3226:	84 39       	cpi	r24, 0x94	; 148
	ldi	r24, hi8(4500);
    3228:	81 e1       	ldi	r24, 0x11	; 17
	cpc	r25, r24;
	brcs	esr_too_less2;
    322a:	98 07       	cpc	r25, r24
	call	mark_as_uncalibrated;
    322c:	10 f0       	brcs	.+4      	; 0x3232 <esr_too_less2>
    322e:	0e 94 ad 07 	call	0xf5a	; 0xf5a <mark_as_uncalibrated>

00003232 <esr_too_less2>:
/*	ldi	r24,'<'; */
/*	call	lcd_data; */
esr_too_less2:
#endif
	mov	r24, zero_reg;
	mov	r25, zero_reg;
    3232:	81 2d       	mov	r24, r1
	pop	r4;
	pop	r3;
	pop	r2;
	ret;
#else
	adiw	r28, 30
    3234:	91 2d       	mov	r25, r1

00003236 <ad_exit>:
	ldi	r30, 18
    3236:	6e 96       	adiw	r28, 0x1e	; 30
	jmp	__epilogue_restores__
    3238:	e2 e1       	ldi	r30, 0x12	; 18
    323a:	0d c6       	rjmp	.+3098   	; 0x3e56 <__epilogue_restores__>

0000323c <strtADC_pulse>:
    delay to pin high: lds,sbrc,sts and out Instructions are 7 clock tics */
  #define PIN_HIGH_DELAY (6+OUT_DELAY + 3 + (F_CPU_HZ/4000000))
 #endif
 #define WAST_TICS (((TICS_PER_ADC_CLOCK*5)/2) - HALF_PULSE_LENGTH_TICS - PIN_HIGH_DELAY)
#else
	sts	TCCR1B, r1		; stop counter1
    323c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	sts	TCCR1A, r1		; TCCR1A = 0 , normal port operation
    3240:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	sts	TIMSK1, r1		; disable all timer1 interrupts
    3244:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	sts	OCR1BH, r1		; OCR!B = 0
    3248:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	sts	OCR1BL, r1
    324c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	ldi	r21, (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1)
    3250:	57 e0       	ldi	r21, 0x07	; 7
	AOUT	TIFR1, r21			; clear flags
    3252:	56 bb       	out	0x16, r21	; 22
	ldi	r21, 0xff
    3254:	5f ef       	ldi	r21, 0xFF	; 255
	sts	TCNT1H, r21		; TCNT1 = -1
    3256:	50 93 85 00 	sts	0x0085, r21	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	sts	TCNT1L, r21
    325a:	50 93 84 00 	sts	0x0084, r21	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	ldi	r21, (1<<ADTS2) | (1<<ADTS0)	; Start ADC with counter1 compare B
    325e:	55 e0       	ldi	r21, 0x05	; 5
	sts	ADCSRB, r21
    3260:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	ldi	r21, (1<<ADEN) | (1<<ADATE) | (1<<ADIF) | AUTO_CLOCK_DIV;	/* enable ADC */
    3264:	56 eb       	ldi	r21, 0xB6	; 182
	sts	ADCSRA, r21;		/* ADCSRA = (1<<ADEN) | (1<<ADSC) | (1<<ADIF) | AUTO_CLOCK_DIV; // enable ADC */
    3266:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	ldi	r21, (1<<CS10) 
    326a:	51 e0       	ldi	r21, 0x01	; 1
	sts	TCCR1B, r21		; Start Counter 1 with full speed
    326c:	50 93 81 00 	sts	0x0081, r21	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 #define PIN_HIGH_DELAY (OUT_DELAY - 5 + (F_CPU_HZ/4000000))
 #define WAST_TICS ((TICS_PER_ADC_CLOCK*2) - HALF_PULSE_LENGTH_TICS - PIN_HIGH_DELAY)
#endif
; additional delay to the start of current pulse
	ldi	r21, (WAST_TICS/3)
    3270:	58 e2       	ldi	r21, 0x28	; 40

00003272 <wlop1>:
wlop1:
	dec	r21
    3272:	5a 95       	dec	r21
	brne	wlop1
    3274:	f1 f7       	brne	.-4      	; 0x3272 <wlop1>
#if (WAST_TICS % 3) > 1
	nop
#endif
#if (WAST_TICS % 3) > 0
	nop
    3276:	00 00       	nop
#endif
	AOUT	R_PORT, r20;		/* R_PORT = HiPinR_L (r12);	// switch R-Port to VCC */
    3278:	45 b9       	out	0x05, r20	; 5
	AOUT	R_DDR, r20;		/* R_DDR = HiPinR_L (r12);	// switch R_L port for HighPin to output (VCC) */
    327a:	44 b9       	out	0x04, r20	; 4
;	AOUT	R_PORT, LoPinR_L;	/* R_PORT = LoPinR_L (r7) ; */
;	AOUT	R_DDR, LoPinR_L;	/* R_DDR = LoPinR_L (r7) ;	// switch LowPin with 680 Ohm to VCC */
#define FULL_PULSE_LENGTH_TICS ((HALF_PULSE_LENGTH_TICS*2)+(MHZ_CPU/14))
	ldi	r21, (FULL_PULSE_LENGTH_TICS/3)
    327c:	55 e0       	ldi	r21, 0x05	; 5

0000327e <plop2>:
plop2:
	dec	r21
    327e:	5a 95       	dec	r21
	brne	plop2
    3280:	f1 f7       	brne	.-4      	; 0x327e <plop2>
#if (FULL_PULSE_LENGTH_TICS % 3) > 1
	nop
#endif
#if (FULL_PULSE_LENGTH_TICS % 3) > 0
	nop
    3282:	00 00       	nop
#endif
	AOUT	R_DDR, zero_reg;	/* R_DDR = 0; // switch current off,  SH is 1.5 ADC clock behind real start */
    3284:	14 b8       	out	0x04, r1	; 4
	AOUT	R_PORT, zero_reg;	/* R_PORT = 0; */
    3286:	15 b8       	out	0x05, r1	; 5
#ifndef WITHOUT_CNT_START
	sts	TCCR1B, r1		; stop counter1
    3288:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

0000328c <wadfin2>:
#endif

wadfin2:
	lds	r24, ADCSRA;		/* while (ADCSRA&(1<<ADSC));	// wait for conversion finished */
    328c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	sbrs	r24, ADIF;
    3290:	84 ff       	sbrs	r24, 4
	rjmp	wadfin2;
    3292:	fc cf       	rjmp	.-8      	; 0x328c <wadfin2>
	sts	ADCSRA, r24		; clear flags
    3294:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ret
    3298:	08 95       	ret

0000329a <GetVloss>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void GetVloss() {
    329a:	b0 e0       	ldi	r27, 0x00	; 0
    329c:	a0 e0       	ldi	r26, 0x00	; 0
    329e:	e2 e5       	ldi	r30, 0x52	; 82
    32a0:	f9 e1       	ldi	r31, 0x19	; 25
    32a2:	bf c5       	rjmp	.+2942   	; 0x3e22 <__prologue_saves__+0x4>
  } lval;
  uint8_t ii;
  uint8_t HiPinR_L;
  uint8_t LoADC;

  if (cap.v_loss > 0) {
    32a4:	00 91 76 01 	lds	r16, 0x0176	; 0x800176 <cap+0xe>
    32a8:	10 91 77 01 	lds	r17, 0x0177	; 0x800177 <cap+0xf>
    32ac:	01 15       	cp	r16, r1
    32ae:	11 05       	cpc	r17, r1
    32b0:	09 f0       	breq	.+2      	; 0x32b4 <GetVloss+0x1a>
    32b2:	8b c0       	rjmp	.+278    	; 0x33ca <GetVloss+0x130>
     return;		// Voltage loss is already known (big Capacitor)
  }
#if (((PIN_RL1 + 1) != PIN_RH1) || ((PIN_RL2 + 1) != PIN_RH2) || ((PIN_RL3 + 1) != PIN_RH3))
  LoADC = pgm_read_byte((&PinRLRHADCtab[6])+cap.ca-TP_MIN) | TXD_MSK;
#else
  LoADC = pgm_read_byte((&PinRLRHADCtab[3])+cap.ca-TP_MIN) | TXD_MSK;
    32b4:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <cap+0x10>
    32b8:	f0 e0       	ldi	r31, 0x00	; 0
    32ba:	ef 57       	subi	r30, 0x7F	; 127
    32bc:	ff 4f       	sbci	r31, 0xFF	; 255
    32be:	d4 91       	lpm	r29, Z
#endif
  HiPinR_L = pgm_read_byte(&PinRLRHADCtab[cap.cb-TP_MIN]);	//R_L mask for HighPin R_L load
    32c0:	e0 91 79 01 	lds	r30, 0x0179	; 0x800179 <cap+0x11>
    32c4:	f0 e0       	ldi	r31, 0x00	; 0
    32c6:	e2 58       	subi	r30, 0x82	; 130
    32c8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ca:	c4 91       	lpm	r28, Z

  EntladePins();			// discharge capacitor
    32cc:	0e 94 7d 10 	call	0x20fa	; 0x20fa <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    32d0:	18 b8       	out	0x08, r1	; 8
  R_PORT = 0;				// switch R-Port to GND
    32d2:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    32d4:	d7 b9       	out	0x07, r29	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    32d6:	c4 b9       	out	0x04, r28	; 4
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
    32d8:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <cap+0x11>
    32dc:	0e 94 a5 03 	call	0x74a	; 0x74a <ReadADC>
    32e0:	7c 01       	movw	r14, r24
// ******** should adcv[0] be measured without current???
  if ((cap.cpre_max > -9) || (cap.cpre_max < -12)) return;	// too much or too less capacity
    32e2:	d0 91 7b 01 	lds	r29, 0x017B	; 0x80017b <cap+0x13>
    32e6:	8c e0       	ldi	r24, 0x0C	; 12
    32e8:	8d 0f       	add	r24, r29
    32ea:	84 30       	cpi	r24, 0x04	; 4
    32ec:	08 f0       	brcs	.+2      	; 0x32f0 <GetVloss+0x56>
    32ee:	6d c0       	rjmp	.+218    	; 0x33ca <GetVloss+0x130>
  lval.dw = cap.cval_max;
    32f0:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <cap+0x4>
    32f4:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <cap+0x5>
    32f8:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <cap+0x6>
    32fc:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <cap+0x7>
  for (ii=cap.cpre_max+15;ii<7;ii++) {
    3300:	d1 5f       	subi	r29, 0xF1	; 241
     lval.dw = (lval.dw + 5) / 10;
    3302:	2a e0       	ldi	r18, 0x0A	; 10
    3304:	42 2e       	mov	r4, r18
    3306:	51 2c       	mov	r5, r1
    3308:	61 2c       	mov	r6, r1
    330a:	71 2c       	mov	r7, r1
    330c:	bc 01       	movw	r22, r24
    330e:	cd 01       	movw	r24, r26
    3310:	6b 5f       	subi	r22, 0xFB	; 251
    3312:	7f 4f       	sbci	r23, 0xFF	; 255
    3314:	8f 4f       	sbci	r24, 0xFF	; 255
    3316:	9f 4f       	sbci	r25, 0xFF	; 255
    3318:	a3 01       	movw	r20, r6
    331a:	92 01       	movw	r18, r4
    331c:	23 d5       	rcall	.+2630   	; 0x3d64 <__udivmodsi4>
    331e:	49 01       	movw	r8, r18
    3320:	5a 01       	movw	r10, r20
    3322:	da 01       	movw	r26, r20
    3324:	c9 01       	movw	r24, r18
  for (ii=cap.cpre_max+15;ii<7;ii++) {
    3326:	df 5f       	subi	r29, 0xFF	; 255
    3328:	d7 30       	cpi	r29, 0x07	; 7
    332a:	81 f7       	brne	.-32     	; 0x330c <GetVloss+0x72>
  }
  if (lval.dw > 5000) {
    332c:	89 38       	cpi	r24, 0x89	; 137
    332e:	23 e1       	ldi	r18, 0x13	; 19
    3330:	92 07       	cpc	r25, r18
    3332:	a1 05       	cpc	r26, r1
    3334:	b1 05       	cpc	r27, r1
    3336:	08 f0       	brcs	.+2      	; 0x333a <GetVloss+0xa0>
    3338:	48 c0       	rjmp	.+144    	; 0x33ca <GetVloss+0x130>
     /* capacity more than 50uF, Voltage loss is already measured  */
     return;
  }
  if (lval.w[0] < 5) return;		// Capacity below 5nF
    333a:	05 97       	sbiw	r24, 0x05	; 5
    333c:	08 f4       	brcc	.+2      	; 0x3340 <GetVloss+0xa6>
    333e:	45 c0       	rjmp	.+138    	; 0x33ca <GetVloss+0x130>
  R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    3340:	c5 b9       	out	0x05, r28	; 5
  R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    3342:	c4 b9       	out	0x04, r28	; 4
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    3344:	d0 e0       	ldi	r29, 0x00	; 0
    3346:	c0 e0       	ldi	r28, 0x00	; 0
    3348:	c8 15       	cp	r28, r8
    334a:	d9 05       	cpc	r29, r9
    334c:	08 f4       	brcc	.+2      	; 0x3350 <GetVloss+0xb6>
    334e:	41 c0       	rjmp	.+130    	; 0x33d2 <GetVloss+0x138>
//     wait50us();			// wait exactly 50us
     wait5us();			// wait exactly 5us
  }
  R_DDR = 0;				// switch back to input
    3350:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// no Pull up
    3352:	15 b8       	out	0x05, r1	; 5
 // wait10us();			//wait a little time
  wdt_reset();
    3354:	a8 95       	wdr
  // read voltage without current
  ADCconfig.Samples = 5;		// set ADC to only 5 samples
    3356:	85 e0       	ldi	r24, 0x05	; 5
    3358:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <ADCconfig>
  adcv[2] = ReadADC(cap.cb);
    335c:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <cap+0x11>
    3360:	0e 94 a5 03 	call	0x74a	; 0x74a <ReadADC>
  if (adcv[2] > adcv[0]) {
     adcv[2] -= adcv[0];		//difference to beginning voltage
    3364:	ec 01       	movw	r28, r24
    3366:	ce 19       	sub	r28, r14
    3368:	df 09       	sbc	r29, r15
  if (adcv[2] > adcv[0]) {
    336a:	e8 16       	cp	r14, r24
    336c:	f9 06       	cpc	r15, r25
    336e:	10 f0       	brcs	.+4      	; 0x3374 <GetVloss+0xda>
  } else {
     adcv[2] = 0;			// voltage is lower or same as beginning voltage
    3370:	d0 e0       	ldi	r29, 0x00	; 0
    3372:	c0 e0       	ldi	r28, 0x00	; 0
  }
  // wait 2x the time which was required for loading
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    3374:	d1 2c       	mov	r13, r1
    3376:	c1 2c       	mov	r12, r1
    3378:	c8 14       	cp	r12, r8
    337a:	d9 04       	cpc	r13, r9
    337c:	70 f1       	brcs	.+92     	; 0x33da <GetVloss+0x140>
//     wait50us();
     wait5us();
  }
  adcv[3] = ReadADC(cap.cb);	// read voltage again, is discharged only a little bit ?
    337e:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <cap+0x11>
    3382:	0e 94 a5 03 	call	0x74a	; 0x74a <ReadADC>
  ADCconfig.Samples = ANZ_MESS;		// set ADC back to configured No. of samples
    3386:	29 e1       	ldi	r18, 0x19	; 25
    3388:	20 93 27 01 	sts	0x0127, r18	; 0x800127 <ADCconfig>
  wdt_reset();
    338c:	a8 95       	wdr
  if (adcv[3] > adcv[0]) {
    338e:	e8 16       	cp	r14, r24
    3390:	f9 06       	cpc	r15, r25
    3392:	18 f4       	brcc	.+6      	; 0x339a <GetVloss+0x100>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    3394:	8c 01       	movw	r16, r24
    3396:	0e 19       	sub	r16, r14
    3398:	1f 09       	sbc	r17, r15
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    339a:	0c 17       	cp	r16, r28
    339c:	1d 07       	cpc	r17, r29
    339e:	78 f4       	brcc	.+30     	; 0x33be <GetVloss+0x124>
     // build difference to load voltage
     adcv[1] = adcv[2] - adcv[3];	// lost voltage during load time wait
    33a0:	9e 01       	movw	r18, r28
    33a2:	20 1b       	sub	r18, r16
    33a4:	31 0b       	sbc	r19, r17
  } else {
     adcv[1] = 0;			// no lost voltage
  }
  // compute voltage drop as part from loaded voltage
  if (adcv[1] > 0) {
    33a6:	59 f0       	breq	.+22     	; 0x33be <GetVloss+0x124>
     // there is any voltage drop (adcv[1]) !
     // adcv[2] is the loaded voltage.
     cap.v_loss = (unsigned long)(adcv[1] * 500UL) / adcv[2];
    33a8:	a4 ef       	ldi	r26, 0xF4	; 244
    33aa:	b1 e0       	ldi	r27, 0x01	; 1
    33ac:	19 d5       	rcall	.+2610   	; 0x3de0 <__umulhisi3>
    33ae:	9e 01       	movw	r18, r28
    33b0:	50 e0       	ldi	r21, 0x00	; 0
    33b2:	40 e0       	ldi	r20, 0x00	; 0
    33b4:	d7 d4       	rcall	.+2478   	; 0x3d64 <__udivmodsi4>
    33b6:	30 93 77 01 	sts	0x0177, r19	; 0x800177 <cap+0xf>
    33ba:	20 93 76 01 	sts	0x0176, r18	; 0x800176 <cap+0xe>
  lcd_line4();
  DisplayValue16(lval.w[0],0,'x',4);
#endif

  // discharge capacitor again
  EntladePins();		// discharge capacitors
    33be:	0e 94 7d 10 	call	0x20fa	; 0x20fa <EntladePins>
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    33c2:	17 b8       	out	0x07, r1	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    33c4:	18 b8       	out	0x08, r1	; 8
  R_DDR = 0;			// switch all resistor ports to input
    33c6:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
#endif
  return;
 } // end GetVloss()
    33c8:	15 b8       	out	0x05, r1	; 5
    33ca:	cd b7       	in	r28, 0x3d	; 61
    33cc:	de b7       	in	r29, 0x3e	; 62
    33ce:	e0 e1       	ldi	r30, 0x10	; 16
    33d0:	44 c5       	rjmp	.+2696   	; 0x3e5a <__epilogue_restores__+0x4>
     wait5us();			// wait exactly 5us
    33d2:	0e 94 9c 03 	call	0x738	; 0x738 <wait5us>
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    33d6:	22 96       	adiw	r28, 0x02	; 2
    33d8:	b7 cf       	rjmp	.-146    	; 0x3348 <GetVloss+0xae>
     wait5us();
    33da:	0e 94 9c 03 	call	0x738	; 0x738 <wait5us>
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    33de:	8f ef       	ldi	r24, 0xFF	; 255
    33e0:	c8 1a       	sub	r12, r24
    33e2:	d8 0a       	sbc	r13, r24
    33e4:	c9 cf       	rjmp	.-110    	; 0x3378 <GetVloss+0xde>

000033e6 <EE_check_init>:
 #ifdef WITH_ROTARY_SWITCH
// (void) eeprom_write_byte(&EE_RotarySwitch,0); 		// no switch is detected
 #endif
 wait_about1s();	// time to read the "EE" message, initialization of EEprom finished
#endif
}
    33e6:	08 95       	ret

000033e8 <main>:
	int main(void) {
    33e8:	b0 e0       	ldi	r27, 0x00	; 0
    33ea:	a0 e0       	ldi	r26, 0x00	; 0
    33ec:	e9 ef       	ldi	r30, 0xF9	; 249
    33ee:	f9 e1       	ldi	r31, 0x19	; 25
    33f0:	17 c5       	rjmp	.+2606   	; 0x3e20 <__prologue_saves__+0x2>
	  ON_DDR = (1<<ON_PIN);			// switch to output
    33f2:	80 e4       	ldi	r24, 0x40	; 64
    33f4:	8a b9       	out	0x0a, r24	; 10
	  ON_PORT = (1<<ON_PIN); 		// switch power on 
    33f6:	8b b9       	out	0x0b, r24	; 11
	  ADCSRA = (1<<ADEN) | AUTO_CLOCK_DIV;	//prescaler=8 or 64 (if 8Mhz clock)
    33f8:	86 e8       	ldi	r24, 0x86	; 134
    33fa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
          wait500ms();
    33fe:	0e 94 82 03 	call	0x704	; 0x704 <wait500ms>
	  tmp = (WDRF_HOME & ((1<<WDRF)));	// save Watch Dog Flag
    3402:	c4 b7       	in	r28, 0x34	; 52
    3404:	c8 70       	andi	r28, 0x08	; 8
	  WDRF_HOME &= ~(1<<WDRF);	 	//reset Watch Dog flag
    3406:	84 b7       	in	r24, 0x34	; 52
    3408:	87 7f       	andi	r24, 0xF7	; 247
    340a:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    340c:	0f b6       	in	r0, 0x3f	; 63
    340e:	f8 94       	cli
    3410:	a8 95       	wdr
    3412:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3416:	88 61       	ori	r24, 0x18	; 24
    3418:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    341c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3420:	0f be       	out	0x3f, r0	; 63
	  sei();				// enable interrupts
    3422:	78 94       	sei
	  lcd_init();				//initialize LCD
    3424:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_init>
	  if(tmp) { 
    3428:	c1 11       	cpse	r28, r1
    342a:	5d c4       	rjmp	.+2234   	; 0x3ce6 <main+0x8fe>
	  MCUCR = (1<<PUD);		// disable Pull-Up Resistors mega168 family
    342c:	80 e1       	ldi	r24, 0x10	; 16
    342e:	85 bf       	out	0x35, r24	; 53
		if (RST_PIN_REG & (1 << RST_PIN))
    3430:	4f 99       	sbic	0x09, 7	; 9
    3432:	05 c0       	rjmp	.+10     	; 0x343e <main+0x56>
	     wait_about10ms();
    3434:	0e 94 8b 03 	call	0x716	; 0x716 <wait10ms>
	  for (ii=0; ii<60; ii++) {
    3438:	cf 5f       	subi	r28, 0xFF	; 255
    343a:	cc 33       	cpi	r28, 0x3C	; 60
    343c:	c9 f7       	brne	.-14     	; 0x3430 <main+0x48>
	  display_time = OFF_WAIT_TIME;		// LONG_WAIT_TIME for single mode, else SHORT_WAIT_TIME
    343e:	8f e5       	ldi	r24, 0x5F	; 95
    3440:	9d e6       	ldi	r25, 0x6D	; 109
    3442:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <display_time+0x1>
    3446:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <display_time>
	  if (ii > 30) {
    344a:	cf 31       	cpi	r28, 0x1F	; 31
    344c:	30 f0       	brcs	.+12     	; 0x345a <main+0x72>
	     display_time = LONG_WAIT_TIME;	// ... set long time display anyway
    344e:	80 e6       	ldi	r24, 0x60	; 96
    3450:	9d e6       	ldi	r25, 0x6D	; 109
    3452:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <display_time+0x1>
    3456:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <display_time>
	  ADCconfig.RefFlag = 0;
    345a:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <ADCconfig+0x1>
	  Calibrate_UR();		// get Ref Voltages and Pin resistance
    345e:	d7 d9       	rcall	.-3154   	; 0x280e <Calibrate_UR>
		__asm__ __volatile__ (
    3460:	88 e1       	ldi	r24, 0x18	; 24
    3462:	9f e0       	ldi	r25, 0x0F	; 15
    3464:	0f b6       	in	r0, 0x3f	; 63
    3466:	f8 94       	cli
    3468:	a8 95       	wdr
    346a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    346e:	0f be       	out	0x3f, r0	; 63
    3470:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  ADC_DDR = (1<<TPRELAY) | TXD_MSK; 	// switch pin with reference to GND, release relay
    3474:	d0 e1       	ldi	r29, 0x10	; 16
	  _trans = &ntrans;			// default transistor structure to show
    3476:	3b e3       	ldi	r19, 0x3B	; 59
    3478:	a3 2e       	mov	r10, r19
    347a:	31 e0       	ldi	r19, 0x01	; 1
    347c:	b3 2e       	mov	r11, r19
       _trans = &ptrans;
    347e:	43 e5       	ldi	r20, 0x53	; 83
    3480:	e4 2e       	mov	r14, r20
    3482:	41 e0       	ldi	r20, 0x01	; 1
    3484:	f4 2e       	mov	r15, r20
          PartMode = PART_MODE_PNP;
    3486:	5d e0       	ldi	r21, 0x0D	; 13
    3488:	85 2e       	mov	r8, r21
       if ((ptrans.hfe < 500) && (ntrans.hfe >= 500)) cap.cpre = -16; // set PNP BE capacity to low value
    348a:	60 ef       	ldi	r22, 0xF0	; 240
    348c:	36 2e       	mov	r3, r22
        diode_sequence = 0x33;	// 3 3
    348e:	13 e3       	ldi	r17, 0x33	; 51
           diode_sequence = 0x21;	// 2 1
    3490:	81 e2       	ldi	r24, 0x21	; 33
    3492:	d8 2e       	mov	r13, r24
           diode_sequence = 0x12;	// 1 2
    3494:	92 e1       	ldi	r25, 0x12	; 18
    3496:	c9 2e       	mov	r12, r25
           diode_sequence = 0x20;	// 2 0
    3498:	20 e2       	ldi	r18, 0x20	; 32
    349a:	92 2e       	mov	r9, r18
	  lcd_clear();			// clear the LCD
    349c:	0e 94 21 01 	call	0x242	; 0x242 <lcd_clear>
	  ADC_DDR = TXD_MSK;		// activate Software-UART 
    34a0:	17 b8       	out	0x07, r1	; 7
          init_parts();			// reset parts info to nothing found
    34a2:	0e 94 0e 05 	call	0xa1c	; 0xa1c <init_parts>
	  Calibrate_UR();		// get Ref Voltages and Pin resistance
    34a6:	b3 d9       	rcall	.-3226   	; 0x280e <Calibrate_UR>
	  lcd_line1();			// Cursor to 1. row, column 1
    34a8:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_line1>
        Battery_check();
    34ac:	0e 94 02 08 	call	0x1004	; 0x1004 <Battery_check>
	  if (WithReference) {
    34b0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <WithReference>
    34b4:	88 23       	and	r24, r24
    34b6:	79 f0       	breq	.+30     	; 0x34d6 <main+0xee>
		 lcd_line2();
    34b8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_line2>
		 lcd_MEM_string(VCC_str);		// VCC=
    34bc:	89 e8       	ldi	r24, 0x89	; 137
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
		 Display_mV(ADCconfig.U_AVCC,3);	// Display 3 Digits of this mV units
    34c4:	63 e0       	ldi	r22, 0x03	; 3
    34c6:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <ADCconfig+0x4>
    34ca:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <ADCconfig+0x5>
    34ce:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Display_mV>
		 wait_about1s();		// time to read the VCC= message
    34d2:	0e 94 81 03 	call	0x702	; 0x702 <wait1000ms>
	  lcd_line2();			//LCD position row 2, column 1
    34d6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_line2>
	  EntladePins();		// discharge all capacitors!
    34da:	0e 94 7d 10 	call	0x20fa	; 0x20fa <EntladePins>
	  if(PartFound == PART_CELL) {
    34de:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <PartFound>
    34e2:	89 30       	cpi	r24, 0x09	; 9
    34e4:	81 f4       	brne	.+32     	; 0x3506 <main+0x11e>
	    lcd_clear();
    34e6:	0e 94 21 01 	call	0x242	; 0x242 <lcd_clear>
	    lcd_MEM_string(Cell_str);	// display "Cell!"
    34ea:	8e e8       	ldi	r24, 0x8E	; 142
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
	    wait_about2s();
    34f2:	0e 94 80 03 	call	0x700	; 0x700 <wait2s>
	    AutoCheck(0x11);		// full Selftest with "Short probes" message
    34f6:	81 e1       	ldi	r24, 0x11	; 17
    34f8:	0e 94 83 05 	call	0xb06	; 0xb06 <AutoCheck>
  max_time = display_time;	// full specified wait time
    34fc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <display_time>
    3500:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <display_time+0x1>
    3504:	59 c1       	rjmp	.+690    	; 0x37b8 <main+0x3d0>
	  lcd_cursor_off();
    3506:	8c e0       	ldi	r24, 0x0C	; 12
    3508:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_command>
	  UnCalibrated = (eeprom_read_byte(&c_zero_tab[3]) - eeprom_read_byte(&c_zero_tab[0]));
    350c:	8f ec       	ldi	r24, 0xCF	; 207
    350e:	91 e0       	ldi	r25, 0x01	; 1
    3510:	f0 d4       	rcall	.+2528   	; 0x3ef2 <eeprom_read_byte>
    3512:	c8 2f       	mov	r28, r24
    3514:	8c ec       	ldi	r24, 0xCC	; 204
    3516:	91 e0       	ldi	r25, 0x01	; 1
    3518:	ec d4       	rcall	.+2520   	; 0x3ef2 <eeprom_read_byte>
    351a:	c8 1b       	sub	r28, r24
    351c:	c0 93 33 01 	sts	0x0133, r28	; 0x800133 <UnCalibrated>
	  if (UnCalibrated != 0) {
    3520:	cc 23       	and	r28, r28
    3522:	19 f0       	breq	.+6      	; 0x352a <main+0x142>
	     lcd_cursor_on();
    3524:	8e e0       	ldi	r24, 0x0E	; 14
    3526:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_command>
	  AutoCheck(0x01);			//check, if selftest should be done, full selftest without MENU
    352a:	81 e0       	ldi	r24, 0x01	; 1
    352c:	0e 94 83 05 	call	0xb06	; 0xb06 <AutoCheck>
          lcd_clear_line2();			//LCD position row2, column 1
    3530:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_clear_line2>
	  lcd_MEM_string(TestRunning);		//String: testing...
    3534:	85 e6       	ldi	r24, 0x65	; 101
    3536:	91 e0       	ldi	r25, 0x01	; 1
    3538:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
	  CheckPins(TP1, TP2, TP3);
    353c:	42 e0       	ldi	r20, 0x02	; 2
    353e:	61 e0       	ldi	r22, 0x01	; 1
    3540:	80 e0       	ldi	r24, 0x00	; 0
    3542:	0e 94 41 08 	call	0x1082	; 0x1082 <CheckPins>
	  CheckPins(TP2, TP1, TP3);
    3546:	42 e0       	ldi	r20, 0x02	; 2
    3548:	60 e0       	ldi	r22, 0x00	; 0
    354a:	81 e0       	ldi	r24, 0x01	; 1
    354c:	0e 94 41 08 	call	0x1082	; 0x1082 <CheckPins>
	  CheckPins(TP1, TP3, TP2);
    3550:	41 e0       	ldi	r20, 0x01	; 1
    3552:	62 e0       	ldi	r22, 0x02	; 2
    3554:	80 e0       	ldi	r24, 0x00	; 0
    3556:	0e 94 41 08 	call	0x1082	; 0x1082 <CheckPins>
	  CheckPins(TP3, TP1, TP2);
    355a:	41 e0       	ldi	r20, 0x01	; 1
    355c:	60 e0       	ldi	r22, 0x00	; 0
    355e:	82 e0       	ldi	r24, 0x02	; 2
    3560:	0e 94 41 08 	call	0x1082	; 0x1082 <CheckPins>
	  CheckPins(TP2, TP3, TP1);
    3564:	40 e0       	ldi	r20, 0x00	; 0
    3566:	62 e0       	ldi	r22, 0x02	; 2
    3568:	81 e0       	ldi	r24, 0x01	; 1
    356a:	0e 94 41 08 	call	0x1082	; 0x1082 <CheckPins>
	  CheckPins(TP3, TP2, TP1);
    356e:	40 e0       	ldi	r20, 0x00	; 0
    3570:	61 e0       	ldi	r22, 0x01	; 1
    3572:	82 e0       	ldi	r24, 0x02	; 2
    3574:	0e 94 41 08 	call	0x1082	; 0x1082 <CheckPins>
	  if(PartFound == PART_NONE) {
    3578:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <PartFound>
    357c:	81 11       	cpse	r24, r1
    357e:	0e c0       	rjmp	.+28     	; 0x359c <main+0x1b4>
	     EntladePins();		// discharge capacities
    3580:	0e 94 7d 10 	call	0x20fa	; 0x20fa <EntladePins>
	     ReadCapacity(TP3, TP1);
    3584:	60 e0       	ldi	r22, 0x00	; 0
    3586:	82 e0       	ldi	r24, 0x02	; 2
    3588:	0e 94 41 11 	call	0x2282	; 0x2282 <ReadCapacity>
	     ReadCapacity(TP3, TP2);
    358c:	61 e0       	ldi	r22, 0x01	; 1
    358e:	82 e0       	ldi	r24, 0x02	; 2
    3590:	0e 94 41 11 	call	0x2282	; 0x2282 <ReadCapacity>
	     ReadCapacity(TP2, TP1);
    3594:	60 e0       	ldi	r22, 0x00	; 0
    3596:	81 e0       	ldi	r24, 0x01	; 1
    3598:	0e 94 41 11 	call	0x2282	; 0x2282 <ReadCapacity>
	  lcd_clear();				// clear total display
    359c:	0e 94 21 01 	call	0x242	; 0x242 <lcd_clear>
	  _trans = &ntrans;			// default transistor structure to show
    35a0:	b0 92 39 01 	sts	0x0139, r11	; 0x800139 <_trans+0x1>
    35a4:	a0 92 38 01 	sts	0x0138, r10	; 0x800138 <_trans>
	  if (PartFound == PART_THYRISTOR) {
    35a8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <PartFound>
    35ac:	86 30       	cpi	r24, 0x06	; 6
    35ae:	b9 f4       	brne	.+46     	; 0x35de <main+0x1f6>
	    lcd_MEM_string(Thyristor);		//"Thyristor"
    35b0:	8c e3       	ldi	r24, 0x3C	; 60
    35b2:	91 e0       	ldi	r25, 0x01	; 1
    35b4:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
            PinLayout(Cathode_char,'G','A'); 	// CGA= or 123=...
    35b8:	41 e4       	ldi	r20, 0x41	; 65
    35ba:	67 e4       	ldi	r22, 0x47	; 71
    35bc:	83 e4       	ldi	r24, 0x43	; 67
    PinLayout('1','G','2'); 	// CGA= or 123=...
    35be:	0e 94 01 02 	call	0x402	; 0x402 <PinLayout>
  lcd_line2(); //2. row 
    35c2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_line2>
  lcd_MEM_string(Uf_str);		// "Uf="
    35c6:	82 ea       	ldi	r24, 0xA2	; 162
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
  Display_mV(ntrans.uBE,2);
    35ce:	62 e0       	ldi	r22, 0x02	; 2
    35d0:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <ntrans+0x4>
    35d4:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <ntrans+0x5>
    35d8:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Display_mV>
    35dc:	8f cf       	rjmp	.-226    	; 0x34fc <main+0x114>
  if (PartFound == PART_TRIAC) {
    35de:	87 30       	cpi	r24, 0x07	; 7
    35e0:	41 f4       	brne	.+16     	; 0x35f2 <main+0x20a>
    lcd_MEM_string(Triac);		//"Triac"
    35e2:	85 e4       	ldi	r24, 0x45	; 69
    35e4:	91 e0       	ldi	r25, 0x01	; 1
    35e6:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
    PinLayout('1','G','2'); 	// CGA= or 123=...
    35ea:	42 e3       	ldi	r20, 0x32	; 50
    35ec:	67 e4       	ldi	r22, 0x47	; 71
    35ee:	81 e3       	ldi	r24, 0x31	; 49
  if (PartFound == PART_CAPACITOR) {
    35f0:	e6 cf       	rjmp	.-52     	; 0x35be <main+0x1d6>
    35f2:	88 30       	cpi	r24, 0x08	; 8
     show_cap_simple();		// show capacity in normal way and measure additional parameters
    35f4:	11 f4       	brne	.+4      	; 0x35fa <main+0x212>
    35f6:	0d da       	rcall	.-3046   	; 0x2a12 <show_cap_simple>
     goto tt_end;
    35f8:	81 cf       	rjmp	.-254    	; 0x34fc <main+0x114>
  if(PartFound == PART_DIODE) {
    35fa:	83 30       	cpi	r24, 0x03	; 3
    35fc:	09 f0       	breq	.+2      	; 0x3600 <main+0x218>
    35fe:	e6 c0       	rjmp	.+460    	; 0x37cc <main+0x3e4>
     if(NumOfDiodes == 1) {		//single Diode
    3600:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <NumOfDiodes>
    3604:	81 30       	cpi	r24, 0x01	; 1
    3606:	09 f0       	breq	.+2      	; 0x360a <main+0x222>
    3608:	50 c0       	rjmp	.+160    	; 0x36aa <main+0x2c2>
        DiodeSymbol_withPins(0);
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	0e 94 8e 02 	call	0x51c	; 0x51c <DiodeSymbol_withPins>
	GetIr(diodes.Cathode[0],diodes.Anode[0]);	// measure and output Ir=x.xuA
    3610:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <diodes>
    3614:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <diodes+0x6>
    3618:	0e 94 bf 07 	call	0xf7e	; 0xf7e <GetIr>
        UfAusgabe(0x70);		// mark for additional resistor and output Uf= in line 2
    361c:	80 e7       	ldi	r24, 0x70	; 112
    361e:	0e 94 66 02 	call	0x4cc	; 0x4cc <UfAusgabe>
        ReadCapacity(diodes.Cathode[0],diodes.Anode[0]);	// Capacity opposite flow direction
    3622:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <diodes>
    3626:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <diodes+0x6>
    362a:	0e 94 41 11 	call	0x2282	; 0x2282 <ReadCapacity>
        if (cap.cpre < -3) {	/* capacity is measured */
    362e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <cap+0x12>
    3632:	8d 3f       	cpi	r24, 0xFD	; 253
    3634:	94 f4       	brge	.+36     	; 0x365a <main+0x272>
           lcd_MEM_string(Cap_str);	//"C="
    3636:	89 eb       	ldi	r24, 0xB9	; 185
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
           DisplayValue(cap.cval,cap.cpre,'F',2);
    363e:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <cap>
    3642:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <cap+0x1>
    3646:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <cap+0x2>
    364a:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <cap+0x3>
    364e:	02 e0       	ldi	r16, 0x02	; 2
    3650:	26 e4       	ldi	r18, 0x46	; 70
    3652:	40 91 7a 01 	lds	r20, 0x017A	; 0x80017a <cap+0x12>
    3656:	0e 94 ba 02 	call	0x574	; 0x574 <DisplayValue>
	if (ResistorsFound == 0)
    365a:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <ResistorsFound>
    365e:	88 23       	and	r24, r24
    3660:	09 f4       	brne	.+2      	; 0x3664 <main+0x27c>
    3662:	4c cf       	rjmp	.-360    	; 0x34fc <main+0x114>
  ADC_DDR = (1<<TPRELAY) | TXD_MSK; 	// switch pin with reference to GND, release relay
    3664:	d7 b9       	out	0x07, r29	; 7
  wait_for_key_ms(display_time);
    3666:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <display_time>
    366a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <display_time+0x1>
    366e:	0e 94 15 04 	call	0x82a	; 0x82a <wait_for_key_ms>
  ADC_DDR =  TXD_MSK; 	// switch pin with reference to input, activate relay
    3672:	17 b8       	out	0x07, r1	; 7
  lcd_clear();
    3674:	0e 94 21 01 	call	0x242	; 0x242 <lcd_clear>
  lcd_data('0'+NumOfDiodes);
    3678:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <NumOfDiodes>
    367c:	80 5d       	subi	r24, 0xD0	; 208
    367e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_data>
  lcd_MEM_string(Dioden);	//"Diodes "
    3682:	85 e6       	ldi	r24, 0x65	; 101
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
  if (ResistorsFound != 0) {
    368a:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <ResistorsFound>
    368e:	33 23       	and	r19, r19
    3690:	09 f4       	brne	.+2      	; 0x3694 <main+0x2ac>
    3692:	1c c3       	rjmp	.+1592   	; 0x3ccc <main+0x8e4>
    3694:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <ResistorList>
    if (ResistorsFound == 1) { // single resistor
    3698:	31 30       	cpi	r19, 0x01	; 1
    369a:	09 f0       	breq	.+2      	; 0x369e <main+0x2b6>
       rpins.pw = Rnum2pins(ResistorList[0]);	// get pin numbers for resistor 1
    369c:	b2 c2       	rjmp	.+1380   	; 0x3c02 <main+0x81a>
    369e:	0e 94 28 02 	call	0x450	; 0x450 <Rnum2pins>
       show_resis(rpins.pb[0],rpins.pb[1],0);
    36a2:	40 e0       	ldi	r20, 0x00	; 0
    36a4:	69 2f       	mov	r22, r25
    36a6:	7e d9       	rcall	.-3332   	; 0x29a4 <show_resis>
    36a8:	29 cf       	rjmp	.-430    	; 0x34fc <main+0x114>
     } else if(NumOfDiodes == 2) { // double diode
    36aa:	82 30       	cpi	r24, 0x02	; 2
    36ac:	89 f5       	brne	.+98     	; 0x3710 <main+0x328>
        lcd_data('2');
    36ae:	82 e3       	ldi	r24, 0x32	; 50
    36b0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_data>
        lcd_MEM_string(Dioden);		//"diodes "
    36b4:	85 e6       	ldi	r24, 0x65	; 101
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
        if(diodes.Anode[0] == diodes.Anode[1]) { //Common Anode
    36bc:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <diodes>
    36c0:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <diodes+0x1>
    36c4:	93 13       	cpse	r25, r19
    36c6:	0a c0       	rjmp	.+20     	; 0x36dc <main+0x2f4>
           DiodeSymbol_CpinApin(0);	// 1-|<-2
    36c8:	80 e0       	ldi	r24, 0x00	; 0
    36ca:	0e 94 aa 02 	call	0x554	; 0x554 <DiodeSymbol_CpinApin>
           DiodeSymbol_ACpin(1);	//  ->|-3
    36ce:	81 e0       	ldi	r24, 0x01	; 1
    36d0:	0e 94 a1 02 	call	0x542	; 0x542 <DiodeSymbol_ACpin>
           UfAusgabe(0x01);
    36d4:	81 e0       	ldi	r24, 0x01	; 1
    36d6:	0e 94 66 02 	call	0x4cc	; 0x4cc <UfAusgabe>
           goto end3;
    36da:	bf cf       	rjmp	.-130    	; 0x365a <main+0x272>
        if(diodes.Cathode[0] == diodes.Cathode[1]) { //Common Cathode
    36dc:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <diodes+0x6>
    36e0:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <diodes+0x7>
    36e4:	28 13       	cpse	r18, r24
    36e6:	07 c0       	rjmp	.+14     	; 0x36f6 <main+0x30e>
           DiodeSymbol_ApinCpin(0);	// 1->|-2
    36e8:	80 e0       	ldi	r24, 0x00	; 0
    36ea:	0e 94 9a 02 	call	0x534	; 0x534 <DiodeSymbol_ApinCpin>
           DiodeSymbol_CApin(1);	//  -|<-3
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	0e 94 b1 02 	call	0x562	; 0x562 <DiodeSymbol_CApin>
    36f4:	ef cf       	rjmp	.-34     	; 0x36d4 <main+0x2ec>
        if (diodes.Cathode[0] == diodes.Anode[1]) {
    36f6:	32 13       	cpse	r19, r18
    36f8:	06 c0       	rjmp	.+12     	; 0x3706 <main+0x31e>
           diode_sequence = 0x01;	// 0 1
    36fa:	81 e0       	ldi	r24, 0x01	; 1
    36fc:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <diode_sequence>
           SerienDiodenAusgabe();
    3700:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <SerienDiodenAusgabe>
           goto end3;
    3704:	aa cf       	rjmp	.-172    	; 0x365a <main+0x272>
        if (diodes.Cathode[1] == diodes.Anode[0]) {
    3706:	98 13       	cpse	r25, r24
    3708:	3b c0       	rjmp	.+118    	; 0x3780 <main+0x398>
           diode_sequence = 0x10;	// 1 0
    370a:	d0 93 0d 01 	sts	0x010D, r29	; 0x80010d <diode_sequence>
    370e:	f8 cf       	rjmp	.-16     	; 0x3700 <main+0x318>
     } else if(NumOfDiodes == 3) {
    3710:	83 30       	cpi	r24, 0x03	; 3
    3712:	b1 f5       	brne	.+108    	; 0x3780 <main+0x398>
        diode_sequence = 0x33;	// 3 3
    3714:	10 93 0d 01 	sts	0x010D, r17	; 0x80010d <diode_sequence>
			if (diodes.Cathode[0] == diodes.Anode[1]) {
    3718:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <diodes+0x6>
    371c:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <diodes+0x1>
    3720:	89 13       	cpse	r24, r25
    3722:	03 c0       	rjmp	.+6      	; 0x372a <main+0x342>
           diode_sequence = 0x01;	// 0 1
    3724:	21 e0       	ldi	r18, 0x01	; 1
    3726:	20 93 0d 01 	sts	0x010D, r18	; 0x80010d <diode_sequence>
			if (diodes.Anode[0] == diodes.Cathode[1]) {
    372a:	40 91 7e 01 	lds	r20, 0x017E	; 0x80017e <diodes>
    372e:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <diodes+0x7>
    3732:	43 13       	cpse	r20, r19
    3734:	02 c0       	rjmp	.+4      	; 0x373a <main+0x352>
           diode_sequence = 0x10;	// 1 0
    3736:	d0 93 0d 01 	sts	0x010D, r29	; 0x80010d <diode_sequence>
			if (diodes.Cathode[0] == diodes.Anode[2]) {
    373a:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <diodes+0x2>
    373e:	82 13       	cpse	r24, r18
    3740:	03 c0       	rjmp	.+6      	; 0x3748 <main+0x360>
           diode_sequence = 0x02;	// 0 2
    3742:	82 e0       	ldi	r24, 0x02	; 2
    3744:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <diode_sequence>
			if (diodes.Anode[0] == diodes.Cathode[2]) {
    3748:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <diodes+0x8>
    374c:	48 13       	cpse	r20, r24
    374e:	02 c0       	rjmp	.+4      	; 0x3754 <main+0x36c>
           diode_sequence = 0x20;	// 2 0
    3750:	90 92 0d 01 	sts	0x010D, r9	; 0x80010d <diode_sequence>
			if (diodes.Cathode[1] == diodes.Anode[2]) {
    3754:	32 13       	cpse	r19, r18
    3756:	0c c0       	rjmp	.+24     	; 0x3770 <main+0x388>
           diode_sequence = 0x12;	// 1 2
    3758:	c0 92 0d 01 	sts	0x010D, r12	; 0x80010d <diode_sequence>
			if (diodes.Anode[1] == diodes.Cathode[2]) {
    375c:	98 17       	cp	r25, r24
    375e:	51 f0       	breq	.+20     	; 0x3774 <main+0x38c>
           lcd_data('3');
    3760:	83 e3       	ldi	r24, 0x33	; 51
    3762:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_data>
           lcd_MEM_string(Dioden);	//"Diodes "
    3766:	85 e6       	ldi	r24, 0x65	; 101
    3768:	90 e0       	ldi	r25, 0x00	; 0
    376a:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
    376e:	c8 cf       	rjmp	.-112    	; 0x3700 <main+0x318>
			if (diodes.Anode[1] == diodes.Cathode[2]) {
    3770:	98 13       	cpse	r25, r24
    3772:	02 c0       	rjmp	.+4      	; 0x3778 <main+0x390>
           diode_sequence = 0x21;	// 2 1
    3774:	d0 92 0d 01 	sts	0x010D, r13	; 0x80010d <diode_sequence>
        if(diode_sequence < 0x22) {
    3778:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <diode_sequence>
    377c:	82 32       	cpi	r24, 0x22	; 34
    377e:	80 f3       	brcs	.-32     	; 0x3760 <main+0x378>
     lcd_MEM_string(Bauteil);		//"Bauteil"
    3780:	8b e4       	ldi	r24, 0x4B	; 75
    3782:	91 e0       	ldi	r25, 0x01	; 1
    3784:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
     lcd_MEM_string(Unknown); 		//" unbek."
    3788:	83 e3       	ldi	r24, 0x33	; 51
    378a:	91 e0       	ldi	r25, 0x01	; 1
    378c:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
     lcd_line2(); //2. row 
    3790:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_line2>
     lcd_data(NumOfDiodes + '0');
    3794:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <NumOfDiodes>
    3798:	80 5d       	subi	r24, 0xD0	; 208
    379a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_data>
     lcd_data('*');
    379e:	8a e2       	ldi	r24, 0x2A	; 42
    37a0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_data>
     lcd_MEM_string(AnKat_str);		//"->|-"
    37a4:	8e e6       	ldi	r24, 0x6E	; 110
    37a6:	90 e0       	ldi	r25, 0x00	; 0
    37a8:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
     lcd_MEM_string(Detected);		//" detected"
    37ac:	89 e1       	ldi	r24, 0x19	; 25
    37ae:	91 e0       	ldi	r25, 0x01	; 1
  lcd_MEM_string(Bauteil);		//"Bauteil"
    37b0:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
  max_time = SHORT_WAIT_TIME;		// use allways the short wait time
    37b4:	80 e4       	ldi	r24, 0x40	; 64
    37b6:	9f e1       	ldi	r25, 0x1F	; 31
  ADC_DDR = (1<<TPRELAY) | TXD_MSK; 	// switch pin with reference to GND, release relay
    37b8:	d7 b9       	out	0x07, r29	; 7
	while (!(RST_PIN_REG & (1 << RST_PIN)))
    37ba:	4f 9b       	sbis	0x09, 7	; 9
    37bc:	fe cf       	rjmp	.-4      	; 0x37ba <main+0x3d2>
  ii = wait_for_key_ms(max_time);
    37be:	0e 94 15 04 	call	0x82a	; 0x82a <wait_for_key_ms>
	if (ii != 0)
    37c2:	81 11       	cpse	r24, r1
    37c4:	6b ce       	rjmp	.-810    	; 0x349c <main+0xb4>
  switch_tester_off();
    37c6:	0e 94 31 05 	call	0xa62	; 0xa62 <switch_tester_off>
	goto loop_start;
    37ca:	61 ce       	rjmp	.-830    	; 0x348e <main+0xa6>
  } else if (PartFound == PART_TRANSISTOR) {
    37cc:	84 30       	cpi	r24, 0x04	; 4
    37ce:	09 f0       	breq	.+2      	; 0x37d2 <main+0x3ea>
    37d0:	4e c1       	rjmp	.+668    	; 0x3a6e <main+0x686>
    if ((ptrans.count != 0) && (ntrans.count !=0)) {
    37d2:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <ptrans+0xf>
    37d6:	88 23       	and	r24, r24
    37d8:	09 f4       	brne	.+2      	; 0x37dc <main+0x3f4>
    37da:	5d c0       	rjmp	.+186    	; 0x3896 <main+0x4ae>
    37dc:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <ntrans+0xf>
    37e0:	88 23       	and	r24, r24
    37e2:	09 f4       	brne	.+2      	; 0x37e6 <main+0x3fe>
    37e4:	58 c0       	rjmp	.+176    	; 0x3896 <main+0x4ae>
       ReadCapacity(ntrans.e, ntrans.b);	// read capacity of NPN base-emitter
    37e6:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <ntrans+0xc>
    37ea:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <ntrans+0xe>
    37ee:	0e 94 41 11 	call	0x2282	; 0x2282 <ReadCapacity>
       n_cval = cap.cval;			// save the found capacity value
    37f2:	40 90 68 01 	lds	r4, 0x0168	; 0x800168 <cap>
    37f6:	50 90 69 01 	lds	r5, 0x0169	; 0x800169 <cap+0x1>
    37fa:	60 90 6a 01 	lds	r6, 0x016A	; 0x80016a <cap+0x2>
    37fe:	70 90 6b 01 	lds	r7, 0x016B	; 0x80016b <cap+0x3>
       n_cpre  = cap.cpre;			// and dimension
    3802:	c0 91 7a 01 	lds	r28, 0x017A	; 0x80017a <cap+0x12>
       ReadCapacity(ptrans.b, ptrans.e);	// read capacity of PNP base-emitter
    3806:	60 91 61 01 	lds	r22, 0x0161	; 0x800161 <ptrans+0xe>
    380a:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <ptrans+0xc>
    380e:	0e 94 41 11 	call	0x2282	; 0x2282 <ReadCapacity>
       if ((ntrans.hfe < 500) && (ptrans.hfe >= 500)) n_cpre = -16; // set NPN BE capacity to low value
    3812:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <ntrans>
    3816:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <ntrans+0x1>
    381a:	a0 91 3d 01 	lds	r26, 0x013D	; 0x80013d <ntrans+0x2>
    381e:	b0 91 3e 01 	lds	r27, 0x013E	; 0x80013e <ntrans+0x3>
    3822:	40 91 53 01 	lds	r20, 0x0153	; 0x800153 <ptrans>
    3826:	50 91 54 01 	lds	r21, 0x0154	; 0x800154 <ptrans+0x1>
    382a:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <ptrans+0x2>
    382e:	70 91 56 01 	lds	r23, 0x0156	; 0x800156 <ptrans+0x3>
    3832:	84 3f       	cpi	r24, 0xF4	; 244
    3834:	21 e0       	ldi	r18, 0x01	; 1
    3836:	92 07       	cpc	r25, r18
    3838:	a1 05       	cpc	r26, r1
    383a:	b1 05       	cpc	r27, r1
    383c:	38 f4       	brcc	.+14     	; 0x384c <main+0x464>
    383e:	44 3f       	cpi	r20, 0xF4	; 244
    3840:	21 e0       	ldi	r18, 0x01	; 1
    3842:	52 07       	cpc	r21, r18
    3844:	61 05       	cpc	r22, r1
    3846:	71 05       	cpc	r23, r1
    3848:	08 f0       	brcs	.+2      	; 0x384c <main+0x464>
    384a:	c0 ef       	ldi	r28, 0xF0	; 240
       if ((ptrans.hfe < 500) && (ntrans.hfe >= 500)) cap.cpre = -16; // set PNP BE capacity to low value
    384c:	44 3f       	cpi	r20, 0xF4	; 244
    384e:	51 40       	sbci	r21, 0x01	; 1
    3850:	61 05       	cpc	r22, r1
    3852:	71 05       	cpc	r23, r1
    3854:	38 f4       	brcc	.+14     	; 0x3864 <main+0x47c>
    3856:	84 3f       	cpi	r24, 0xF4	; 244
    3858:	91 40       	sbci	r25, 0x01	; 1
    385a:	a1 05       	cpc	r26, r1
    385c:	b1 05       	cpc	r27, r1
    385e:	10 f0       	brcs	.+4      	; 0x3864 <main+0x47c>
    3860:	30 92 7a 01 	sts	0x017A, r3	; 0x80017a <cap+0x12>
       if (((n_cpre == cap.cpre) && (cap.cval > n_cval))
    3864:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <cap+0x12>
    3868:	8c 13       	cpse	r24, r28
    386a:	11 c0       	rjmp	.+34     	; 0x388e <main+0x4a6>
    386c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <cap>
    3870:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <cap+0x1>
    3874:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <cap+0x2>
    3878:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <cap+0x3>
    387c:	48 16       	cp	r4, r24
    387e:	59 06       	cpc	r5, r25
    3880:	6a 06       	cpc	r6, r26
    3882:	7b 06       	cpc	r7, r27
    3884:	30 f0       	brcs	.+12     	; 0x3892 <main+0x4aa>
          PartMode = PART_MODE_NPN;
    3886:	8c e0       	ldi	r24, 0x0C	; 12
    3888:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <PartMode>
    388c:	04 c0       	rjmp	.+8      	; 0x3896 <main+0x4ae>
					|| (cap.cpre > n_cpre)) {
    388e:	c8 17       	cp	r28, r24
    3890:	d4 f7       	brge	.-12     	; 0x3886 <main+0x49e>
          PartMode = PART_MODE_PNP;
    3892:	80 92 15 01 	sts	0x0115, r8	; 0x800115 <PartMode>
		if ((ptrans.count != 0) && (ntrans.count != 0)
    3896:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <ptrans+0xf>
    389a:	88 23       	and	r24, r24
    389c:	61 f0       	breq	.+24     	; 0x38b6 <main+0x4ce>
    389e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <ntrans+0xf>
    38a2:	88 23       	and	r24, r24
    38a4:	41 f0       	breq	.+16     	; 0x38b6 <main+0x4ce>
				&& (!(RST_PIN_REG & (1 << RST_PIN)))) {
    38a6:	4f 99       	sbic	0x09, 7	; 9
    38a8:	06 c0       	rjmp	.+12     	; 0x38b6 <main+0x4ce>
       PartMode ^= (PART_MODE_PNP - PART_MODE_NPN);
    38aa:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <PartMode>
    38ae:	91 e0       	ldi	r25, 0x01	; 1
    38b0:	89 27       	eor	r24, r25
    38b2:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <PartMode>
    if(PartMode == PART_MODE_NPN) {
    38b6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <PartMode>
    38ba:	8c 30       	cpi	r24, 0x0C	; 12
    38bc:	f9 f4       	brne	.+62     	; 0x38fc <main+0x514>
       lcd_MEM_string(NPN_str);		//"NPN "
    38be:	85 eb       	ldi	r24, 0xB5	; 181
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
       if (ptrans.count != 0) {
    38c6:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <ptrans+0xf>
    38ca:	88 23       	and	r24, r24
    38cc:	19 f0       	breq	.+6      	; 0x38d4 <main+0x4ec>
          lcd_data('p');		// mark for parasitic PNp
    38ce:	80 e7       	ldi	r24, 0x70	; 112
          lcd_data('n');		// mark for parasitic NPn
    38d0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_data>
    lcd_space();
    38d4:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_space>
    vak_diode_nr = search_vak_diode();
    38d8:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <search_vak_diode>
    38dc:	c8 2f       	mov	r28, r24
    if (vak_diode_nr < 5) {
    38de:	85 30       	cpi	r24, 0x05	; 5
    38e0:	48 f5       	brcc	.+82     	; 0x3934 <main+0x54c>
		|| ((PartMode != PART_MODE_NPN) && (ptrans.c < ptrans.e)));
    38e2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <PartMode>
    38e6:	8c 30       	cpi	r24, 0x0C	; 12
    38e8:	b9 f4       	brne	.+46     	; 0x3918 <main+0x530>
       an_cat = (((PartMode == PART_MODE_NPN) && (ntrans.c > ntrans.e))
    38ea:	81 e0       	ldi	r24, 0x01	; 1
    38ec:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <ntrans+0xd>
    38f0:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <ntrans+0xe>
    38f4:	92 17       	cp	r25, r18
    38f6:	b8 f0       	brcs	.+46     	; 0x3926 <main+0x53e>
		|| ((PartMode != PART_MODE_NPN) && (ptrans.c < ptrans.e)));
    38f8:	80 e0       	ldi	r24, 0x00	; 0
    38fa:	15 c0       	rjmp	.+42     	; 0x3926 <main+0x53e>
       _trans = &ptrans;		// change transistor structure
    38fc:	f0 92 39 01 	sts	0x0139, r15	; 0x800139 <_trans+0x1>
    3900:	e0 92 38 01 	sts	0x0138, r14	; 0x800138 <_trans>
       lcd_MEM_string(PNP_str);		//"PNP "
    3904:	81 eb       	ldi	r24, 0xB1	; 177
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
       if (ntrans.count != 0) {
    390c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <ntrans+0xf>
    3910:	88 23       	and	r24, r24
    3912:	01 f3       	breq	.-64     	; 0x38d4 <main+0x4ec>
          lcd_data('n');		// mark for parasitic NPn
    3914:	8e e6       	ldi	r24, 0x6E	; 110
    3916:	dc cf       	rjmp	.-72     	; 0x38d0 <main+0x4e8>
		|| ((PartMode != PART_MODE_NPN) && (ptrans.c < ptrans.e)));
    3918:	81 e0       	ldi	r24, 0x01	; 1
    391a:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <ptrans+0xd>
    391e:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <ptrans+0xe>
    3922:	29 17       	cp	r18, r25
    3924:	48 f7       	brcc	.-46     	; 0x38f8 <main+0x510>
       if (an_cat) {
    3926:	88 23       	and	r24, r24
    3928:	09 f4       	brne	.+2      	; 0x392c <main+0x544>
    392a:	9a c0       	rjmp	.+308    	; 0x3a60 <main+0x678>
          lcd_MEM_string(AnKat_str);	//"->|-"
    392c:	8e e6       	ldi	r24, 0x6E	; 110
    392e:	90 e0       	ldi	r25, 0x00	; 0
          lcd_MEM_string(KatAn_str);	//"-|<-"
    3930:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
    PinLayout('E','B','C'); 		//  EBC= or 123=...
    3934:	43 e4       	ldi	r20, 0x43	; 67
    3936:	62 e4       	ldi	r22, 0x42	; 66
    3938:	85 e4       	ldi	r24, 0x45	; 69
    393a:	0e 94 01 02 	call	0x402	; 0x402 <PinLayout>
    lcd_line2(); //2. row 
    393e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_line2>
    lcd_MEM_string(hfe_str);		//"B="  (hFE)
    3942:	8f eb       	ldi	r24, 0xBF	; 191
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
    DisplayValue(_trans->hfe,-2,0,3);
    394a:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <_trans>
    394e:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <_trans+0x1>
    3952:	60 81       	ld	r22, Z
    3954:	71 81       	ldd	r23, Z+1	; 0x01
    3956:	82 81       	ldd	r24, Z+2	; 0x02
    3958:	93 81       	ldd	r25, Z+3	; 0x03
    395a:	03 e0       	ldi	r16, 0x03	; 3
    395c:	20 e0       	ldi	r18, 0x00	; 0
    395e:	4e ef       	ldi	r20, 0xFE	; 254
    3960:	0e 94 ba 02 	call	0x574	; 0x574 <DisplayValue>
    lcd_space();
    3964:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_space>
    lcd_data('I');
    3968:	89 e4       	ldi	r24, 0x49	; 73
    396a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_data>
    if (_trans->current >= 10000) {
    396e:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <_trans>
    3972:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <_trans+0x1>
    3976:	86 81       	ldd	r24, Z+6	; 0x06
    3978:	97 81       	ldd	r25, Z+7	; 0x07
    397a:	80 31       	cpi	r24, 0x10	; 16
    397c:	97 42       	sbci	r25, 0x27	; 39
    397e:	08 f4       	brcc	.+2      	; 0x3982 <main+0x59a>
    3980:	72 c0       	rjmp	.+228    	; 0x3a66 <main+0x67e>
       lcd_data('e');				// emitter current has 10mA offset
    3982:	85 e6       	ldi	r24, 0x65	; 101
    3984:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_data>
       _trans->current -= 10000;
    3988:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <_trans>
    398c:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <_trans+0x1>
    3990:	86 81       	ldd	r24, Z+6	; 0x06
    3992:	97 81       	ldd	r25, Z+7	; 0x07
    3994:	80 51       	subi	r24, 0x10	; 16
    3996:	97 42       	sbci	r25, 0x27	; 39
    3998:	97 83       	std	Z+7, r25	; 0x07
    399a:	86 83       	std	Z+6, r24	; 0x06
    lcd_equal();			// lcd_data('=');
    399c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_equal>
    DisplayValue16(_trans->current,-6,'A',2);	// display Ic or Ie current
    39a0:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <_trans>
    39a4:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <_trans+0x1>
    39a8:	22 e0       	ldi	r18, 0x02	; 2
    39aa:	41 e4       	ldi	r20, 0x41	; 65
    39ac:	6a ef       	ldi	r22, 0xFA	; 250
    39ae:	86 81       	ldd	r24, Z+6	; 0x06
    39b0:	97 81       	ldd	r25, Z+7	; 0x07
    39b2:	0e 94 67 03 	call	0x6ce	; 0x6ce <DisplayValue16>
    lcd_next_line_wait(0);		// next line, wait 5s and clear line 2
    39b6:	80 e0       	ldi	r24, 0x00	; 0
    39b8:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_next_line_wait>
    lcd_MEM_string(Ube_str);		//"Ube=" 
    39bc:	86 ea       	ldi	r24, 0xA6	; 166
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
    Display_mV(_trans->uBE,3);
    39c4:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <_trans>
    39c8:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <_trans+0x1>
    39cc:	63 e0       	ldi	r22, 0x03	; 3
    39ce:	84 81       	ldd	r24, Z+4	; 0x04
    39d0:	95 81       	ldd	r25, Z+5	; 0x05
    39d2:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Display_mV>
    if (_trans->ice0 > 0) {
    39d6:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <_trans>
    39da:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <_trans+0x1>
    39de:	80 85       	ldd	r24, Z+8	; 0x08
    39e0:	91 85       	ldd	r25, Z+9	; 0x09
    39e2:	89 2b       	or	r24, r25
    39e4:	91 f0       	breq	.+36     	; 0x3a0a <main+0x622>
       lcd_next_line_wait(0);		// next line, wait 5s and clear line 2
    39e6:	80 e0       	ldi	r24, 0x00	; 0
    39e8:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_next_line_wait>
       lcd_MEM2_string(ICE0_str);		// "ICE0="
    39ec:	8e e8       	ldi	r24, 0x8E	; 142
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	0e 94 31 01 	call	0x262	; 0x262 <lcd_pgm_string>
       DisplayValue16(_trans->ice0,-6,'A',3);
    39f4:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <_trans>
    39f8:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <_trans+0x1>
    39fc:	23 e0       	ldi	r18, 0x03	; 3
    39fe:	41 e4       	ldi	r20, 0x41	; 65
    3a00:	6a ef       	ldi	r22, 0xFA	; 250
    3a02:	80 85       	ldd	r24, Z+8	; 0x08
    3a04:	91 85       	ldd	r25, Z+9	; 0x09
    3a06:	0e 94 67 03 	call	0x6ce	; 0x6ce <DisplayValue16>
    if (_trans->ices > 0) {
    3a0a:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <_trans>
    3a0e:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <_trans+0x1>
    3a12:	82 85       	ldd	r24, Z+10	; 0x0a
    3a14:	93 85       	ldd	r25, Z+11	; 0x0b
    3a16:	89 2b       	or	r24, r25
    3a18:	91 f0       	breq	.+36     	; 0x3a3e <main+0x656>
       lcd_next_line_wait(0);		// next line, wait 5s and clear line 2
    3a1a:	80 e0       	ldi	r24, 0x00	; 0
    3a1c:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_next_line_wait>
       lcd_MEM2_string(ICEs_str);		// "ICEs="
    3a20:	88 e8       	ldi	r24, 0x88	; 136
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	0e 94 31 01 	call	0x262	; 0x262 <lcd_pgm_string>
       DisplayValue16(_trans->ices,-6,'A',3);
    3a28:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <_trans>
    3a2c:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <_trans+0x1>
    3a30:	23 e0       	ldi	r18, 0x03	; 3
    3a32:	41 e4       	ldi	r20, 0x41	; 65
    3a34:	6a ef       	ldi	r22, 0xFA	; 250
    3a36:	82 85       	ldd	r24, Z+10	; 0x0a
    3a38:	93 85       	ldd	r25, Z+11	; 0x0b
    3a3a:	0e 94 67 03 	call	0x6ce	; 0x6ce <DisplayValue16>
    if (vak_diode_nr < 5) {
    3a3e:	c5 30       	cpi	r28, 0x05	; 5
    3a40:	08 f0       	brcs	.+2      	; 0x3a44 <main+0x65c>
    3a42:	5c cd       	rjmp	.-1352   	; 0x34fc <main+0x114>
       lcd_next_line_wait(0); 		// next line, wait 5s and clear line 2/4
    3a44:	80 e0       	ldi	r24, 0x00	; 0
    3a46:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_next_line_wait>
       DiodeSymbol_withPins(vak_diode_nr);
    3a4a:	8c 2f       	mov	r24, r28
    3a4c:	0e 94 8e 02 	call	0x51c	; 0x51c <DiodeSymbol_withPins>
       lcd_MEM_string(Uf_str);			//"Uf="
    3a50:	82 ea       	ldi	r24, 0xA2	; 162
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
       mVAusgabe(vak_diode_nr);
    3a58:	8c 2f       	mov	r24, r28
    3a5a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <mVAusgabe>
    3a5e:	4e cd       	rjmp	.-1380   	; 0x34fc <main+0x114>
          lcd_MEM_string(KatAn_str);	//"-|<-"
    3a60:	8a e6       	ldi	r24, 0x6A	; 106
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	65 cf       	rjmp	.-310    	; 0x3930 <main+0x548>
       lcd_data('c');
    3a66:	83 e6       	ldi	r24, 0x63	; 99
    3a68:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_data>
    3a6c:	97 cf       	rjmp	.-210    	; 0x399c <main+0x5b4>
  } else if (PartFound == PART_FET) {	/* JFET or MOSFET */
    3a6e:	85 30       	cpi	r24, 0x05	; 5
    3a70:	09 f0       	breq	.+2      	; 0x3a74 <main+0x68c>
    3a72:	0b ce       	rjmp	.-1002   	; 0x368a <main+0x2a2>
    if((PartMode&P_CHANNEL) == P_CHANNEL) {
    3a74:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <PartMode>
    3a78:	84 ff       	sbrs	r24, 4
    3a7a:	3e c0       	rjmp	.+124    	; 0x3af8 <main+0x710>
       lcd_data('P');			//P-channel
    3a7c:	80 e5       	ldi	r24, 0x50	; 80
    3a7e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_data>
       _trans = &ptrans;
    3a82:	f0 92 39 01 	sts	0x0139, r15	; 0x800139 <_trans+0x1>
    3a86:	e0 92 38 01 	sts	0x0138, r14	; 0x800138 <_trans>
    lcd_data('-');		// minus is used for JFET, D-MOS, E-MOS ...
    3a8a:	8d e2       	ldi	r24, 0x2D	; 45
    3a8c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_data>
    part_code = PartMode&0x0f;
    3a90:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <PartMode>
    3a94:	c8 2f       	mov	r28, r24
    3a96:	cf 70       	andi	r28, 0x0F	; 15
    if (part_code == PART_MODE_JFET) {
    3a98:	c4 30       	cpi	r28, 0x04	; 4
    3a9a:	91 f5       	brne	.+100    	; 0x3b00 <main+0x718>
       lcd_MEM_string(jfet_str);	//"-JFET"
    3a9c:	88 ec       	ldi	r24, 0xC8	; 200
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
       PinLayout('?','G','?'); 		//  ?G?= or 123=...
    3aa4:	4f e3       	ldi	r20, 0x3F	; 63
    3aa6:	67 e4       	ldi	r22, 0x47	; 71
    3aa8:	8f e3       	ldi	r24, 0x3F	; 63
       PinLayout('S','G','D'); 		//  SGD= or 123=...
    3aaa:	0e 94 01 02 	call	0x402	; 0x402 <PinLayout>
    if((PartMode&D_MODE) != D_MODE) {	//enhancement-MOSFET
    3aae:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <PartMode>
    3ab2:	85 fd       	sbrc	r24, 5
    3ab4:	3e c0       	rjmp	.+124    	; 0x3b32 <main+0x74a>
       lcd_line2();		// line 2
    3ab6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_line2>
       ReadCapacity(_trans->b,_trans->e);	//measure capacity
    3aba:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <_trans>
    3abe:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <_trans+0x1>
    3ac2:	66 85       	ldd	r22, Z+14	; 0x0e
    3ac4:	84 85       	ldd	r24, Z+12	; 0x0c
    3ac6:	0e 94 41 11 	call	0x2282	; 0x2282 <ReadCapacity>
       lcd_show_Cg();	// show Cg=xxxpF
    3aca:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_show_Cg>
       lcd_MEM_string(vt_str);		// " Vt="
    3ace:	8d e9       	ldi	r24, 0x9D	; 157
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
       Display_mV(_trans->gthvoltage,2);	//Gate-threshold voltage
    3ad6:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <_trans>
    3ada:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <_trans+0x1>
    3ade:	62 e0       	ldi	r22, 0x02	; 2
    3ae0:	82 85       	ldd	r24, Z+10	; 0x0a
    3ae2:	93 85       	ldd	r25, Z+11	; 0x0b
          Display_mV(_trans->ice0,2);	// cutoff Gate voltage
    3ae4:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Display_mV>
       lcd_show_rds(0);                // show Drain-Source resistance RDS at column 0
    3ae8:	80 e0       	ldi	r24, 0x00	; 0
    3aea:	0e 94 d5 01 	call	0x3aa	; 0x3aa <lcd_show_rds>
    if (part_code != PART_MODE_JFET) {
    3aee:	c4 30       	cpi	r28, 0x04	; 4
    3af0:	09 f4       	brne	.+2      	; 0x3af4 <main+0x70c>
    3af2:	04 cd       	rjmp	.-1528   	; 0x34fc <main+0x114>
       for (ii=0;ii<NumOfDiodes;ii++) {
    3af4:	c0 e0       	ldi	r28, 0x00	; 0
    3af6:	80 c0       	rjmp	.+256    	; 0x3bf8 <main+0x810>
       lcd_data('N');			//N-channel
    3af8:	8e e4       	ldi	r24, 0x4E	; 78
    3afa:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_data>
    3afe:	c5 cf       	rjmp	.-118    	; 0x3a8a <main+0x6a2>
       if ((PartMode&D_MODE) == D_MODE) {
    3b00:	85 ff       	sbrs	r24, 5
    3b02:	0d c0       	rjmp	.+26     	; 0x3b1e <main+0x736>
          lcd_data('D');			// N-D or P-D
    3b04:	84 e4       	ldi	r24, 0x44	; 68
          lcd_data('E');			// N-E or P-E
    3b06:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_data>
       if (part_code == (PART_MODE_IGBT)) {
    3b0a:	c3 30       	cpi	r28, 0x03	; 3
    3b0c:	51 f4       	brne	.+20     	; 0x3b22 <main+0x73a>
          lcd_MEM_string(igbt_str);	//"-IGBT"
    3b0e:	82 ec       	ldi	r24, 0xC2	; 194
    3b10:	90 e0       	ldi	r25, 0x00	; 0
    3b12:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
       PinLayout('E','G','C'); 		//  SGD= or 123=...
    3b16:	43 e4       	ldi	r20, 0x43	; 67
    3b18:	67 e4       	ldi	r22, 0x47	; 71
    3b1a:	85 e4       	ldi	r24, 0x45	; 69
    3b1c:	c6 cf       	rjmp	.-116    	; 0x3aaa <main+0x6c2>
          lcd_data('E');			// N-E or P-E
    3b1e:	85 e4       	ldi	r24, 0x45	; 69
    3b20:	f2 cf       	rjmp	.-28     	; 0x3b06 <main+0x71e>
          lcd_MEM_string(mosfet_str);	//"-MOS "
    3b22:	8d ec       	ldi	r24, 0xCD	; 205
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
       PinLayout('S','G','D'); 		//  SGD= or 123=...
    3b2a:	44 e4       	ldi	r20, 0x44	; 68
    3b2c:	67 e4       	ldi	r22, 0x47	; 71
    3b2e:	83 e5       	ldi	r24, 0x53	; 83
    3b30:	bc cf       	rjmp	.-136    	; 0x3aaa <main+0x6c2>
       if ((PartMode&0x0f)  != PART_MODE_JFET) {     /* kein JFET */
    3b32:	8f 70       	andi	r24, 0x0F	; 15
    3b34:	84 30       	cpi	r24, 0x04	; 4
    3b36:	69 f0       	breq	.+26     	; 0x3b52 <main+0x76a>
          lcd_next_line(0);		// line 2
    3b38:	80 e0       	ldi	r24, 0x00	; 0
    3b3a:	0e 94 99 01 	call	0x332	; 0x332 <lcd_next_line>
          ReadCapacity(_trans->b,_trans->e);	//measure capacity
    3b3e:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <_trans>
    3b42:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <_trans+0x1>
    3b46:	66 85       	ldd	r22, Z+14	; 0x0e
    3b48:	84 85       	ldd	r24, Z+12	; 0x0c
    3b4a:	0e 94 41 11 	call	0x2282	; 0x2282 <ReadCapacity>
          lcd_show_Cg();	// show Cg=xxxpF
    3b4e:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_show_Cg>
       lcd_next_line_wait(0);		// line 2 or 3, if possible & wait and clear last line
    3b52:	80 e0       	ldi	r24, 0x00	; 0
    3b54:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_next_line_wait>
       lcd_data('I');			// show I=xmA@Vg=y.yV at line 2 or 3
    3b58:	89 e4       	ldi	r24, 0x49	; 73
    3b5a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_data>
       lcd_equal();			// lcd_data('=');
    3b5e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_equal>
       DisplayValue16(_trans->current,-6,'A',2);
    3b62:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <_trans>
    3b66:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <_trans+0x1>
    3b6a:	22 e0       	ldi	r18, 0x02	; 2
    3b6c:	41 e4       	ldi	r20, 0x41	; 65
    3b6e:	6a ef       	ldi	r22, 0xFA	; 250
    3b70:	86 81       	ldd	r24, Z+6	; 0x06
    3b72:	97 81       	ldd	r25, Z+7	; 0x07
    3b74:	0e 94 67 03 	call	0x6ce	; 0x6ce <DisplayValue16>
       lcd_MEM_string(Vgs_str);		// "@Vg="
    3b78:	88 e9       	ldi	r24, 0x98	; 152
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    3b7c:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
       Display_mV(_trans->gthvoltage,2);	//Gate-threshold voltage
    3b80:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <_trans>
    3b84:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <_trans+0x1>
    3b88:	62 e0       	ldi	r22, 0x02	; 2
    3b8a:	82 85       	ldd	r24, Z+10	; 0x0a
    3b8c:	93 85       	ldd	r25, Z+11	; 0x0b
    3b8e:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Display_mV>
       if (_trans->ice0<4800) { // can't trust cutoff voltage if close to 5V supply voltage, since then the transistor may not have been cut off at all
    3b92:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <_trans>
    3b96:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <_trans+0x1>
    3b9a:	80 85       	ldd	r24, Z+8	; 0x08
    3b9c:	91 85       	ldd	r25, Z+9	; 0x09
    3b9e:	80 3c       	cpi	r24, 0xC0	; 192
    3ba0:	92 41       	sbci	r25, 0x12	; 18
    3ba2:	08 f0       	brcs	.+2      	; 0x3ba6 <main+0x7be>
    3ba4:	a1 cf       	rjmp	.-190    	; 0x3ae8 <main+0x700>
          lcd_next_line_wait(0);
    3ba6:	80 e0       	ldi	r24, 0x00	; 0
    3ba8:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_next_line_wait>
          lcd_data('I');
    3bac:	89 e4       	ldi	r24, 0x49	; 73
    3bae:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_data>
          lcd_equal();			// lcd_data('=');
    3bb2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_equal>
          DisplayValue16(0,-5,'A',2);
    3bb6:	22 e0       	ldi	r18, 0x02	; 2
    3bb8:	41 e4       	ldi	r20, 0x41	; 65
    3bba:	6b ef       	ldi	r22, 0xFB	; 251
    3bbc:	90 e0       	ldi	r25, 0x00	; 0
    3bbe:	80 e0       	ldi	r24, 0x00	; 0
    3bc0:	0e 94 67 03 	call	0x6ce	; 0x6ce <DisplayValue16>
          lcd_MEM_string(Vgs_str);		// "@Vg="
    3bc4:	88 e9       	ldi	r24, 0x98	; 152
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
          Display_mV(_trans->ice0,2);	// cutoff Gate voltage
    3bcc:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <_trans>
    3bd0:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <_trans+0x1>
    3bd4:	62 e0       	ldi	r22, 0x02	; 2
    3bd6:	80 85       	ldd	r24, Z+8	; 0x08
    3bd8:	91 85       	ldd	r25, Z+9	; 0x09
    3bda:	84 cf       	rjmp	.-248    	; 0x3ae4 <main+0x6fc>
          lcd_next_line_wait(0);		// line 4, if possible & wait 5s and clear last line 
    3bdc:	80 e0       	ldi	r24, 0x00	; 0
    3bde:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_next_line_wait>
          DiodeSymbol_withPins(ii);
    3be2:	8c 2f       	mov	r24, r28
    3be4:	0e 94 8e 02 	call	0x51c	; 0x51c <DiodeSymbol_withPins>
          lcd_MEM_string(Uf_str);			//"Uf="
    3be8:	82 ea       	ldi	r24, 0xA2	; 162
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
          mVAusgabe(ii);
    3bf0:	8c 2f       	mov	r24, r28
    3bf2:	0e 94 58 02 	call	0x4b0	; 0x4b0 <mVAusgabe>
       for (ii=0;ii<NumOfDiodes;ii++) {
    3bf6:	cf 5f       	subi	r28, 0xFF	; 255
    3bf8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <NumOfDiodes>
    3bfc:	c8 17       	cp	r28, r24
    3bfe:	70 f3       	brcs	.-36     	; 0x3bdc <main+0x7f4>
    3c00:	7d cc       	rjmp	.-1798   	; 0x34fc <main+0x114>
       if (ResistorVal[ResistorList[1]] > ResistorVal[ii])
    3c02:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <ResistorList+0x1>
    3c06:	24 e0       	ldi	r18, 0x04	; 4
    3c08:	92 9f       	mul	r25, r18
    3c0a:	d0 01       	movw	r26, r0
    3c0c:	11 24       	eor	r1, r1
    3c0e:	a9 56       	subi	r26, 0x69	; 105
    3c10:	be 4f       	sbci	r27, 0xFE	; 254
    3c12:	24 e0       	ldi	r18, 0x04	; 4
    3c14:	82 9f       	mul	r24, r18
    3c16:	f0 01       	movw	r30, r0
    3c18:	11 24       	eor	r1, r1
    3c1a:	e9 56       	subi	r30, 0x69	; 105
    3c1c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c1e:	4d 90       	ld	r4, X+
    3c20:	5d 90       	ld	r5, X+
    3c22:	6d 90       	ld	r6, X+
    3c24:	7c 90       	ld	r7, X
    3c26:	40 81       	ld	r20, Z
    3c28:	51 81       	ldd	r21, Z+1	; 0x01
    3c2a:	62 81       	ldd	r22, Z+2	; 0x02
    3c2c:	73 81       	ldd	r23, Z+3	; 0x03
       ii = ResistorList[0];	// first resistor in the list with number 0,1,2
    3c2e:	28 2f       	mov	r18, r24
       if (ResistorVal[ResistorList[1]] > ResistorVal[ii])
    3c30:	44 15       	cp	r20, r4
    3c32:	55 05       	cpc	r21, r5
    3c34:	66 05       	cpc	r22, r6
    3c36:	77 05       	cpc	r23, r7
    3c38:	08 f4       	brcc	.+2      	; 0x3c3c <main+0x854>
          ii = ResistorList[1]; // second resistor in the list with number 0,1,2
    3c3a:	29 2f       	mov	r18, r25
          ii = (3 - ResistorList[0] - ResistorList[1]);
    3c3c:	98 0f       	add	r25, r24
    3c3e:	c3 e0       	ldi	r28, 0x03	; 3
    3c40:	c9 1b       	sub	r28, r25
       if (ResistorsFound == 2) {
    3c42:	32 30       	cpi	r19, 0x02	; 2
    3c44:	e1 f0       	breq	.+56     	; 0x3c7e <main+0x896>
          if (ResistorVal[ResistorList[2]] > ResistorVal[ii]) {
    3c46:	c0 91 52 01 	lds	r28, 0x0152	; 0x800152 <ResistorList+0x2>
    3c4a:	84 e0       	ldi	r24, 0x04	; 4
    3c4c:	c8 9f       	mul	r28, r24
    3c4e:	d0 01       	movw	r26, r0
    3c50:	11 24       	eor	r1, r1
    3c52:	a9 56       	subi	r26, 0x69	; 105
    3c54:	be 4f       	sbci	r27, 0xFE	; 254
    3c56:	84 e0       	ldi	r24, 0x04	; 4
    3c58:	28 9f       	mul	r18, r24
    3c5a:	f0 01       	movw	r30, r0
    3c5c:	11 24       	eor	r1, r1
    3c5e:	e9 56       	subi	r30, 0x69	; 105
    3c60:	fe 4f       	sbci	r31, 0xFE	; 254
    3c62:	4d 91       	ld	r20, X+
    3c64:	5d 91       	ld	r21, X+
    3c66:	6d 91       	ld	r22, X+
    3c68:	7c 91       	ld	r23, X
    3c6a:	80 81       	ld	r24, Z
    3c6c:	91 81       	ldd	r25, Z+1	; 0x01
    3c6e:	a2 81       	ldd	r26, Z+2	; 0x02
    3c70:	b3 81       	ldd	r27, Z+3	; 0x03
    3c72:	84 17       	cp	r24, r20
    3c74:	95 07       	cpc	r25, r21
    3c76:	a6 07       	cpc	r26, r22
    3c78:	b7 07       	cpc	r27, r23
    3c7a:	08 f0       	brcs	.+2      	; 0x3c7e <main+0x896>
    3c7c:	c2 2f       	mov	r28, r18
       x = TP1+(ii>>1);
    3c7e:	6c 2e       	mov	r6, r28
    3c80:	66 94       	lsr	r6
       y = TP3-ii;
    3c82:	82 e0       	ldi	r24, 0x02	; 2
    3c84:	78 2e       	mov	r7, r24
    3c86:	7c 1a       	sub	r7, r28
       z = TP2+(ii>0);
    3c88:	02 e0       	ldi	r16, 0x02	; 2
    3c8a:	c1 11       	cpse	r28, r1
    3c8c:	01 c0       	rjmp	.+2      	; 0x3c90 <main+0x8a8>
    3c8e:	01 e0       	ldi	r16, 0x01	; 1
       lcd_testpin(x);  	//Pin-number 1
    3c90:	86 2d       	mov	r24, r6
    3c92:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
       lcd_MEM_string(Resistor_str);    // -[=]-
    3c96:	80 e6       	ldi	r24, 0x60	; 96
    3c98:	90 e0       	ldi	r25, 0x00	; 0
    3c9a:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
       lcd_testpin(y);		//Pin-number 2
    3c9e:	87 2d       	mov	r24, r7
    3ca0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
       lcd_MEM_string(Resistor_str);    // -[=]-
    3ca4:	80 e6       	ldi	r24, 0x60	; 96
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
       lcd_testpin(z);		//Pin-number 3
    3cac:	80 2f       	mov	r24, r16
    3cae:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
       lcd_next_line(0);
    3cb2:	80 e0       	ldi	r24, 0x00	; 0
    3cb4:	0e 94 99 01 	call	0x332	; 0x332 <lcd_next_line>
       RvalOut(ii==0);
    3cb8:	81 e0       	ldi	r24, 0x01	; 1
    3cba:	c1 11       	cpse	r28, r1
    3cbc:	80 e0       	ldi	r24, 0x00	; 0
    3cbe:	0e 94 32 02 	call	0x464	; 0x464 <RvalOut>
       RvalOut(2-(ii>>1));
    3cc2:	82 e0       	ldi	r24, 0x02	; 2
    3cc4:	86 19       	sub	r24, r6
    3cc6:	0e 94 32 02 	call	0x464	; 0x464 <RvalOut>
    3cca:	18 cc       	rjmp	.-2000   	; 0x34fc <main+0x114>
  lcd_MEM_string(TestFailed1); 	//"Kein,unbek. oder"
    3ccc:	83 e2       	ldi	r24, 0x23	; 35
    3cce:	91 e0       	ldi	r25, 0x01	; 1
    3cd0:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
  lcd_line2(); //2. row 
    3cd4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_line2>
  lcd_MEM_string(TestFailed2); 		//"defektes "
    3cd8:	80 e5       	ldi	r24, 0x50	; 80
    3cda:	91 e0       	ldi	r25, 0x01	; 1
    3cdc:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
  lcd_MEM_string(Bauteil);		//"Bauteil"
    3ce0:	8b e4       	ldi	r24, 0x4B	; 75
    3ce2:	91 e0       	ldi	r25, 0x01	; 1
    3ce4:	65 cd       	rjmp	.-1334   	; 0x37b0 <main+0x3c8>
	     lcd_line1();
    3ce6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_line1>
             lcd_MEM_string(TestTimedOut);	//Output Timeout
    3cea:	80 e1       	ldi	r24, 0x10	; 16
    3cec:	91 e0       	ldi	r25, 0x01	; 1
    3cee:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_fix_string>
	     wait_about3s();			// time to read the Timeout message
    3cf2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <wait3s>
	     switch_tester_off();
    3cf6:	0e 94 31 05 	call	0xa62	; 0xa62 <switch_tester_off>
}   // end main
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	80 e0       	ldi	r24, 0x00	; 0
    3cfe:	cd b7       	in	r28, 0x3d	; 61
    3d00:	de b7       	in	r29, 0x3e	; 62
    3d02:	e1 e1       	ldi	r30, 0x11	; 17
    3d04:	a9 c0       	rjmp	.+338    	; 0x3e58 <__epilogue_restores__+0x2>

00003d06 <__mulsi3>:
    3d06:	db 01       	movw	r26, r22
    3d08:	8f 93       	push	r24
    3d0a:	9f 93       	push	r25
    3d0c:	7e d0       	rcall	.+252    	; 0x3e0a <__muluhisi3>
    3d0e:	bf 91       	pop	r27
    3d10:	af 91       	pop	r26
    3d12:	a2 9f       	mul	r26, r18
    3d14:	80 0d       	add	r24, r0
    3d16:	91 1d       	adc	r25, r1
    3d18:	a3 9f       	mul	r26, r19
    3d1a:	90 0d       	add	r25, r0
    3d1c:	b2 9f       	mul	r27, r18
    3d1e:	90 0d       	add	r25, r0
    3d20:	11 24       	eor	r1, r1
    3d22:	08 95       	ret

00003d24 <__udivmodqi4>:
    3d24:	99 1b       	sub	r25, r25
    3d26:	79 e0       	ldi	r23, 0x09	; 9
    3d28:	04 c0       	rjmp	.+8      	; 0x3d32 <__udivmodqi4_ep>

00003d2a <__udivmodqi4_loop>:
    3d2a:	99 1f       	adc	r25, r25
    3d2c:	96 17       	cp	r25, r22
    3d2e:	08 f0       	brcs	.+2      	; 0x3d32 <__udivmodqi4_ep>
    3d30:	96 1b       	sub	r25, r22

00003d32 <__udivmodqi4_ep>:
    3d32:	88 1f       	adc	r24, r24
    3d34:	7a 95       	dec	r23
    3d36:	c9 f7       	brne	.-14     	; 0x3d2a <__udivmodqi4_loop>
    3d38:	80 95       	com	r24
    3d3a:	08 95       	ret

00003d3c <__udivmodhi4>:
    3d3c:	aa 1b       	sub	r26, r26
    3d3e:	bb 1b       	sub	r27, r27
    3d40:	51 e1       	ldi	r21, 0x11	; 17
    3d42:	07 c0       	rjmp	.+14     	; 0x3d52 <__udivmodhi4_ep>

00003d44 <__udivmodhi4_loop>:
    3d44:	aa 1f       	adc	r26, r26
    3d46:	bb 1f       	adc	r27, r27
    3d48:	a6 17       	cp	r26, r22
    3d4a:	b7 07       	cpc	r27, r23
    3d4c:	10 f0       	brcs	.+4      	; 0x3d52 <__udivmodhi4_ep>
    3d4e:	a6 1b       	sub	r26, r22
    3d50:	b7 0b       	sbc	r27, r23

00003d52 <__udivmodhi4_ep>:
    3d52:	88 1f       	adc	r24, r24
    3d54:	99 1f       	adc	r25, r25
    3d56:	5a 95       	dec	r21
    3d58:	a9 f7       	brne	.-22     	; 0x3d44 <__udivmodhi4_loop>
    3d5a:	80 95       	com	r24
    3d5c:	90 95       	com	r25
    3d5e:	bc 01       	movw	r22, r24
    3d60:	cd 01       	movw	r24, r26
    3d62:	08 95       	ret

00003d64 <__udivmodsi4>:
    3d64:	a1 e2       	ldi	r26, 0x21	; 33
    3d66:	1a 2e       	mov	r1, r26
    3d68:	aa 1b       	sub	r26, r26
    3d6a:	bb 1b       	sub	r27, r27
    3d6c:	fd 01       	movw	r30, r26
    3d6e:	0d c0       	rjmp	.+26     	; 0x3d8a <__udivmodsi4_ep>

00003d70 <__udivmodsi4_loop>:
    3d70:	aa 1f       	adc	r26, r26
    3d72:	bb 1f       	adc	r27, r27
    3d74:	ee 1f       	adc	r30, r30
    3d76:	ff 1f       	adc	r31, r31
    3d78:	a2 17       	cp	r26, r18
    3d7a:	b3 07       	cpc	r27, r19
    3d7c:	e4 07       	cpc	r30, r20
    3d7e:	f5 07       	cpc	r31, r21
    3d80:	20 f0       	brcs	.+8      	; 0x3d8a <__udivmodsi4_ep>
    3d82:	a2 1b       	sub	r26, r18
    3d84:	b3 0b       	sbc	r27, r19
    3d86:	e4 0b       	sbc	r30, r20
    3d88:	f5 0b       	sbc	r31, r21

00003d8a <__udivmodsi4_ep>:
    3d8a:	66 1f       	adc	r22, r22
    3d8c:	77 1f       	adc	r23, r23
    3d8e:	88 1f       	adc	r24, r24
    3d90:	99 1f       	adc	r25, r25
    3d92:	1a 94       	dec	r1
    3d94:	69 f7       	brne	.-38     	; 0x3d70 <__udivmodsi4_loop>
    3d96:	60 95       	com	r22
    3d98:	70 95       	com	r23
    3d9a:	80 95       	com	r24
    3d9c:	90 95       	com	r25
    3d9e:	9b 01       	movw	r18, r22
    3da0:	ac 01       	movw	r20, r24
    3da2:	bd 01       	movw	r22, r26
    3da4:	cf 01       	movw	r24, r30
    3da6:	08 95       	ret

00003da8 <__divmodsi4>:
    3da8:	05 2e       	mov	r0, r21
    3daa:	97 fb       	bst	r25, 7
    3dac:	16 f4       	brtc	.+4      	; 0x3db2 <__divmodsi4+0xa>
    3dae:	00 94       	com	r0
    3db0:	0f d0       	rcall	.+30     	; 0x3dd0 <__negsi2>
    3db2:	57 fd       	sbrc	r21, 7
    3db4:	05 d0       	rcall	.+10     	; 0x3dc0 <__divmodsi4_neg2>
    3db6:	d6 df       	rcall	.-84     	; 0x3d64 <__udivmodsi4>
    3db8:	07 fc       	sbrc	r0, 7
    3dba:	02 d0       	rcall	.+4      	; 0x3dc0 <__divmodsi4_neg2>
    3dbc:	46 f4       	brtc	.+16     	; 0x3dce <__divmodsi4_exit>
    3dbe:	08 c0       	rjmp	.+16     	; 0x3dd0 <__negsi2>

00003dc0 <__divmodsi4_neg2>:
    3dc0:	50 95       	com	r21
    3dc2:	40 95       	com	r20
    3dc4:	30 95       	com	r19
    3dc6:	21 95       	neg	r18
    3dc8:	3f 4f       	sbci	r19, 0xFF	; 255
    3dca:	4f 4f       	sbci	r20, 0xFF	; 255
    3dcc:	5f 4f       	sbci	r21, 0xFF	; 255

00003dce <__divmodsi4_exit>:
    3dce:	08 95       	ret

00003dd0 <__negsi2>:
    3dd0:	90 95       	com	r25
    3dd2:	80 95       	com	r24
    3dd4:	70 95       	com	r23
    3dd6:	61 95       	neg	r22
    3dd8:	7f 4f       	sbci	r23, 0xFF	; 255
    3dda:	8f 4f       	sbci	r24, 0xFF	; 255
    3ddc:	9f 4f       	sbci	r25, 0xFF	; 255
    3dde:	08 95       	ret

00003de0 <__umulhisi3>:
    3de0:	a2 9f       	mul	r26, r18
    3de2:	b0 01       	movw	r22, r0
    3de4:	b3 9f       	mul	r27, r19
    3de6:	c0 01       	movw	r24, r0
    3de8:	a3 9f       	mul	r26, r19
    3dea:	70 0d       	add	r23, r0
    3dec:	81 1d       	adc	r24, r1
    3dee:	11 24       	eor	r1, r1
    3df0:	91 1d       	adc	r25, r1
    3df2:	b2 9f       	mul	r27, r18
    3df4:	70 0d       	add	r23, r0
    3df6:	81 1d       	adc	r24, r1
    3df8:	11 24       	eor	r1, r1
    3dfa:	91 1d       	adc	r25, r1
    3dfc:	08 95       	ret

00003dfe <__usmulhisi3>:
    3dfe:	f0 df       	rcall	.-32     	; 0x3de0 <__umulhisi3>

00003e00 <__usmulhisi3_tail>:
    3e00:	b7 ff       	sbrs	r27, 7
    3e02:	08 95       	ret
    3e04:	82 1b       	sub	r24, r18
    3e06:	93 0b       	sbc	r25, r19
    3e08:	08 95       	ret

00003e0a <__muluhisi3>:
    3e0a:	ea df       	rcall	.-44     	; 0x3de0 <__umulhisi3>
    3e0c:	a5 9f       	mul	r26, r21
    3e0e:	90 0d       	add	r25, r0
    3e10:	b4 9f       	mul	r27, r20
    3e12:	90 0d       	add	r25, r0
    3e14:	a4 9f       	mul	r26, r20
    3e16:	80 0d       	add	r24, r0
    3e18:	91 1d       	adc	r25, r1
    3e1a:	11 24       	eor	r1, r1
    3e1c:	08 95       	ret

00003e1e <__prologue_saves__>:
    3e1e:	2f 92       	push	r2
    3e20:	3f 92       	push	r3
    3e22:	4f 92       	push	r4
    3e24:	5f 92       	push	r5
    3e26:	6f 92       	push	r6
    3e28:	7f 92       	push	r7
    3e2a:	8f 92       	push	r8
    3e2c:	9f 92       	push	r9
    3e2e:	af 92       	push	r10
    3e30:	bf 92       	push	r11
    3e32:	cf 92       	push	r12
    3e34:	df 92       	push	r13
    3e36:	ef 92       	push	r14
    3e38:	ff 92       	push	r15
    3e3a:	0f 93       	push	r16
    3e3c:	1f 93       	push	r17
    3e3e:	cf 93       	push	r28
    3e40:	df 93       	push	r29
    3e42:	cd b7       	in	r28, 0x3d	; 61
    3e44:	de b7       	in	r29, 0x3e	; 62
    3e46:	ca 1b       	sub	r28, r26
    3e48:	db 0b       	sbc	r29, r27
    3e4a:	0f b6       	in	r0, 0x3f	; 63
    3e4c:	f8 94       	cli
    3e4e:	de bf       	out	0x3e, r29	; 62
    3e50:	0f be       	out	0x3f, r0	; 63
    3e52:	cd bf       	out	0x3d, r28	; 61
    3e54:	09 94       	ijmp

00003e56 <__epilogue_restores__>:
    3e56:	2a 88       	ldd	r2, Y+18	; 0x12
    3e58:	39 88       	ldd	r3, Y+17	; 0x11
    3e5a:	48 88       	ldd	r4, Y+16	; 0x10
    3e5c:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e5e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e60:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e62:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e64:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e66:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e68:	b9 84       	ldd	r11, Y+9	; 0x09
    3e6a:	c8 84       	ldd	r12, Y+8	; 0x08
    3e6c:	df 80       	ldd	r13, Y+7	; 0x07
    3e6e:	ee 80       	ldd	r14, Y+6	; 0x06
    3e70:	fd 80       	ldd	r15, Y+5	; 0x05
    3e72:	0c 81       	ldd	r16, Y+4	; 0x04
    3e74:	1b 81       	ldd	r17, Y+3	; 0x03
    3e76:	aa 81       	ldd	r26, Y+2	; 0x02
    3e78:	b9 81       	ldd	r27, Y+1	; 0x01
    3e7a:	ce 0f       	add	r28, r30
    3e7c:	d1 1d       	adc	r29, r1
    3e7e:	0f b6       	in	r0, 0x3f	; 63
    3e80:	f8 94       	cli
    3e82:	de bf       	out	0x3e, r29	; 62
    3e84:	0f be       	out	0x3f, r0	; 63
    3e86:	cd bf       	out	0x3d, r28	; 61
    3e88:	ed 01       	movw	r28, r26
    3e8a:	08 95       	ret

00003e8c <utoa>:
    3e8c:	45 32       	cpi	r20, 0x25	; 37
    3e8e:	51 05       	cpc	r21, r1
    3e90:	18 f4       	brcc	.+6      	; 0x3e98 <utoa+0xc>
    3e92:	42 30       	cpi	r20, 0x02	; 2
    3e94:	08 f0       	brcs	.+2      	; 0x3e98 <utoa+0xc>
    3e96:	04 c0       	rjmp	.+8      	; 0x3ea0 <__utoa_ncheck>
    3e98:	fb 01       	movw	r30, r22
    3e9a:	10 82       	st	Z, r1
    3e9c:	cb 01       	movw	r24, r22
    3e9e:	08 95       	ret

00003ea0 <__utoa_ncheck>:
    3ea0:	bb 27       	eor	r27, r27

00003ea2 <__utoa_common>:
    3ea2:	fb 01       	movw	r30, r22
    3ea4:	55 27       	eor	r21, r21
    3ea6:	aa 27       	eor	r26, r26
    3ea8:	88 0f       	add	r24, r24
    3eaa:	99 1f       	adc	r25, r25
    3eac:	aa 1f       	adc	r26, r26
    3eae:	a4 17       	cp	r26, r20
    3eb0:	10 f0       	brcs	.+4      	; 0x3eb6 <__utoa_common+0x14>
    3eb2:	a4 1b       	sub	r26, r20
    3eb4:	83 95       	inc	r24
    3eb6:	50 51       	subi	r21, 0x10	; 16
    3eb8:	b9 f7       	brne	.-18     	; 0x3ea8 <__utoa_common+0x6>
    3eba:	a0 5d       	subi	r26, 0xD0	; 208
    3ebc:	aa 33       	cpi	r26, 0x3A	; 58
    3ebe:	08 f0       	brcs	.+2      	; 0x3ec2 <__utoa_common+0x20>
    3ec0:	a9 5d       	subi	r26, 0xD9	; 217
    3ec2:	a1 93       	st	Z+, r26
    3ec4:	00 97       	sbiw	r24, 0x00	; 0
    3ec6:	79 f7       	brne	.-34     	; 0x3ea6 <__utoa_common+0x4>
    3ec8:	b1 11       	cpse	r27, r1
    3eca:	b1 93       	st	Z+, r27
    3ecc:	11 92       	st	Z+, r1
    3ece:	cb 01       	movw	r24, r22
    3ed0:	00 c0       	rjmp	.+0      	; 0x3ed2 <strrev>

00003ed2 <strrev>:
    3ed2:	dc 01       	movw	r26, r24
    3ed4:	fc 01       	movw	r30, r24
    3ed6:	67 2f       	mov	r22, r23
    3ed8:	71 91       	ld	r23, Z+
    3eda:	77 23       	and	r23, r23
    3edc:	e1 f7       	brne	.-8      	; 0x3ed6 <strrev+0x4>
    3ede:	32 97       	sbiw	r30, 0x02	; 2
    3ee0:	04 c0       	rjmp	.+8      	; 0x3eea <strrev+0x18>
    3ee2:	7c 91       	ld	r23, X
    3ee4:	6d 93       	st	X+, r22
    3ee6:	70 83       	st	Z, r23
    3ee8:	62 91       	ld	r22, -Z
    3eea:	ae 17       	cp	r26, r30
    3eec:	bf 07       	cpc	r27, r31
    3eee:	c8 f3       	brcs	.-14     	; 0x3ee2 <strrev+0x10>
    3ef0:	08 95       	ret

00003ef2 <eeprom_read_byte>:
    3ef2:	f9 99       	sbic	0x1f, 1	; 31
    3ef4:	fe cf       	rjmp	.-4      	; 0x3ef2 <eeprom_read_byte>
    3ef6:	92 bd       	out	0x22, r25	; 34
    3ef8:	81 bd       	out	0x21, r24	; 33
    3efa:	f8 9a       	sbi	0x1f, 0	; 31
    3efc:	99 27       	eor	r25, r25
    3efe:	80 b5       	in	r24, 0x20	; 32
    3f00:	08 95       	ret

00003f02 <eeprom_write_byte>:
    3f02:	26 2f       	mov	r18, r22

00003f04 <eeprom_write_r18>:
    3f04:	f9 99       	sbic	0x1f, 1	; 31
    3f06:	fe cf       	rjmp	.-4      	; 0x3f04 <eeprom_write_r18>
    3f08:	1f ba       	out	0x1f, r1	; 31
    3f0a:	92 bd       	out	0x22, r25	; 34
    3f0c:	81 bd       	out	0x21, r24	; 33
    3f0e:	20 bd       	out	0x20, r18	; 32
    3f10:	0f b6       	in	r0, 0x3f	; 63
    3f12:	f8 94       	cli
    3f14:	fa 9a       	sbi	0x1f, 2	; 31
    3f16:	f9 9a       	sbi	0x1f, 1	; 31
    3f18:	0f be       	out	0x3f, r0	; 63
    3f1a:	01 96       	adiw	r24, 0x01	; 1
    3f1c:	08 95       	ret

00003f1e <eeprom_write_word>:
    3f1e:	f1 df       	rcall	.-30     	; 0x3f02 <eeprom_write_byte>
    3f20:	27 2f       	mov	r18, r23
    3f22:	f0 cf       	rjmp	.-32     	; 0x3f04 <eeprom_write_r18>

00003f24 <_exit>:
    3f24:	f8 94       	cli

00003f26 <__stop_program>:
    3f26:	ff cf       	rjmp	.-2      	; 0x3f26 <__stop_program>
